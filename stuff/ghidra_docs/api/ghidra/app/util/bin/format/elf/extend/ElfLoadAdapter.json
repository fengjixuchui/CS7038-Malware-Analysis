{
  "name": "ElfLoadAdapter",
  "comment": "ElfLoadAdapter provides the base ELF load adapter implementation \n which may be extended to facilitate target specific behavior.",
  "javadoc": "\u003ccode\u003eElfLoadAdapter\u003c/code\u003e provides the base ELF load adapter implementation \n which may be extended to facilitate target specific behavior.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDynamicTypes",
      "comment": "Add all extension specific Dynamic table entry types (e.g., DT_ prefix).\n This method will add all those statically defined ElfDynamicType fields\n within this class.",
      "javadoc": "Add all extension specific Dynamic table entry types (e.g., DT_ prefix).\n This method will add all those statically defined ElfDynamicType fields\n within this class.\n@param dynamicTypeMap map to which ElfDynamicType definitions should be added",
      "static": false,
      "params": [
        {
          "name": "dynamicTypeMap",
          "type_long": "java.util.Map\u003cjava.lang.Integer,ghidra.app.util.bin.format.elf.ElfDynamicType\u003e",
          "type_short": "Map",
          "comment": "map to which ElfDynamicType definitions should be added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addProgramHeaderTypes",
      "comment": "Add all extension specific Program Header types (e.g., PT_ prefix).\n This method will add all those statically defined ElfProgramHeaderType fields\n within this class.",
      "javadoc": "Add all extension specific Program Header types (e.g., PT_ prefix).\n This method will add all those statically defined ElfProgramHeaderType fields\n within this class.\n@param programHeaderTypeMap map to which ElfProgramHeaderType definitions should be added",
      "static": false,
      "params": [
        {
          "name": "programHeaderTypeMap",
          "type_long": "java.util.Map\u003cjava.lang.Integer,ghidra.app.util.bin.format.elf.ElfProgramHeaderType\u003e",
          "type_short": "Map",
          "comment": "map to which ElfProgramHeaderType definitions should be added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addSectionHeaderTypes",
      "comment": "Add all extension specific Section Header types (e.g., SHT_ prefix).\n This method will add all those statically defined ElfSectionHeaderType fields\n within this class.",
      "javadoc": "Add all extension specific Section Header types (e.g., SHT_ prefix).\n This method will add all those statically defined ElfSectionHeaderType fields\n within this class.\n@param sectionHeaderTypeMap map to which ElfSectionHeaderType definitions should be added",
      "static": false,
      "params": [
        {
          "name": "sectionHeaderTypeMap",
          "type_long": "java.util.HashMap\u003cjava.lang.Integer,ghidra.app.util.bin.format.elf.ElfSectionHeaderType\u003e",
          "type_short": "HashMap",
          "comment": "map to which ElfSectionHeaderType definitions should be added"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreferredSegmentAddressSpace",
      "comment": "Get the preferred load address space for an allocated program segment.\n The OTHER space is reserved and should not be returned by this method.\n This method may only return a physical address space and not an overlay \n address space.",
      "javadoc": "Get the preferred load address space for an allocated program segment.\n The OTHER space is reserved and should not be returned by this method.\n This method may only return a physical address space and not an overlay \n address space.\n@param elfLoadHelper load helper object\n@param elfProgramHeader elf program segment header\n@return preferred load address space",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "elfProgramHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": "elf program segment header"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "preferred load address space"
      },
      "throws": []
    },
    {
      "name": "getPreferredSegmentAddress",
      "comment": "Get the preferred load address for a program segment.\n This method may only return a physical address and not an overlay \n address.",
      "javadoc": "Get the preferred load address for a program segment.\n This method may only return a physical address and not an overlay \n address.\n@param elfLoadHelper load helper object\n@param elfProgramHeader elf program segment header\n@return preferred load address",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "elfProgramHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": "elf program segment header"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "preferred load address"
      },
      "throws": []
    },
    {
      "name": "getDefaultAlignment",
      "comment": "Get the default alignment within the default address space.",
      "javadoc": "Get the default alignment within the default address space.\n@param elfLoadHelper helper object\n@return default alignment within the default address space.",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "helper object"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "default alignment within the default address space."
      },
      "throws": []
    },
    {
      "name": "getPreferredSectionAddressSpace",
      "comment": "Get the preferred load address space for an allocated section.   The OTHER space\n is reserved and should not be returned by this method.\n This method may only return a physical address space and not an overlay \n address space.",
      "javadoc": "Get the preferred load address space for an allocated section.   The OTHER space\n is reserved and should not be returned by this method.\n This method may only return a physical address space and not an overlay \n address space.\n@param elfLoadHelper load helper object\n@param elfSectionHeader elf section header\n@return preferred load address space",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "elfSectionHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "elf section header"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "preferred load address space"
      },
      "throws": []
    },
    {
      "name": "getPreferredSectionAddress",
      "comment": "Get the preferred load address for an allocated program section.  \n This method may only return a physical address and not an overlay \n address.",
      "javadoc": "Get the preferred load address for an allocated program section.  \n This method may only return a physical address and not an overlay \n address.\n@param elfLoadHelper load helper object\n@param elfSectionHeader elf program section header\n@return preferred load address",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "elfSectionHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "elf program section header"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "preferred load address"
      },
      "throws": []
    },
    {
      "name": "canHandle",
      "comment": "Check if this extension can handle the specified elf header.  If this method returns \n true, this extension will be used to obtain extended types definitions and to perform\n additional load processing.",
      "javadoc": "Check if this extension can handle the specified elf header.  If this method returns \n true, this extension will be used to obtain extended types definitions and to perform\n additional load processing.\n@param elf elf header\n@return true if this extension should be used when loading the elf image which\n corresponds to the specified header.",
      "static": false,
      "params": [
        {
          "name": "elf",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "elf header"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this extension should be used when loading the elf image which\n corresponds to the specified header."
      },
      "throws": []
    },
    {
      "name": "canHandle",
      "comment": "Check if this extension can handle the specified elf image.  This method can provide\n a more accurate check based upon the actual language utilized.  While the ELF header\n may have stipulated a specific processor via the machine-id, a completely different\n and incompatible language may have been used.",
      "javadoc": "Check if this extension can handle the specified elf image.  This method can provide\n a more accurate check based upon the actual language utilized.  While the ELF header\n may have stipulated a specific processor via the machine-id, a completely different\n and incompatible language may have been used.\n@param elfLoadHelper elf header\n@return true if this extension can properly support the ELF header and the \n current program/language.",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "elf header"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this extension can properly support the ELF header and the \n current program/language."
      },
      "throws": []
    },
    {
      "name": "getDataTypeSuffix",
      "comment": "Return the data type naming suffix which should be used when creating types derived \n from data supplied by this extension.",
      "javadoc": "Return the data type naming suffix which should be used when creating types derived \n from data supplied by this extension.\n@return type naming suffix or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "type naming suffix or null"
      },
      "throws": []
    },
    {
      "name": "getAdjustedMemoryOffset",
      "comment": "Perform any required offset adjustment to account for differences between offset \n values contained within ELF headers and the language modeling of the \n associated address space.\n \n WARNING: This is an experimental method and is not yet fully supported.\n \n NOTE: This has currently been utilized for symbol address offset adjustment only.",
      "javadoc": "Perform any required offset adjustment to account for differences between offset \n values contained within ELF headers and the language modeling of the \n associated address space.\n \u003cbr\u003e\n WARNING: This is an experimental method and is not yet fully supported.\n \u003cbr\u003e\n NOTE: This has currently been utilized for symbol address offset adjustment only.\n@param elfOffset memory offset from ELF header\n@param space associated address space\n@return offset appropriate for use in space (does not account for image base alterations)",
      "static": false,
      "params": [
        {
          "name": "elfOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "memory offset from ELF header"
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "associated address space"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "offset appropriate for use in space (does not account for image base alterations)"
      },
      "throws": []
    },
    {
      "name": "processElf",
      "comment": "Perform extension specific processing of Elf image during program load.\n The following loading steps will have already been completed:\n \n 1. default processing of all program headers and section headers\n 2. memory resolution and loading of all program headers and section headers\n 3. Markup completed of Elf header, program headers, section headers, dynamic table,\n    string tables, and symbol tables.\n \n Markup and application of relocation tables will NOT have been done yet.",
      "javadoc": "Perform extension specific processing of Elf image during program load.\n The following loading steps will have already been completed:\n \u003cpre\u003e\n 1. default processing of all program headers and section headers\n 2. memory resolution and loading of all program headers and section headers\n 3. Markup completed of Elf header, program headers, section headers, dynamic table,\n    string tables, and symbol tables.\n \u003c/pre\u003e\n Markup and application of relocation tables will NOT have been done yet.\n@param elfLoadHelper load helper object\n@param monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processGotPlt",
      "comment": "Perform extension specific processing of Elf GOT/PLT tables and any other \n related function relocation mechanism (e.g., function descriptors, etc) after\n normal REL/RELA relocation fix-ups have been applied.",
      "javadoc": "Perform extension specific processing of Elf GOT/PLT tables and any other \n related function relocation mechanism (e.g., function descriptors, etc) after\n normal REL/RELA relocation fix-ups have been applied.\n@param elfLoadHelper load helper object\n@param monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "creatingFunction",
      "comment": "Prior to the ELF loader creating a function this method will be invoked to permit an \n extension to adjust the address and/or apply context to the intended location.",
      "javadoc": "Prior to the ELF loader creating a function this method will be invoked to permit an \n extension to adjust the address and/or apply context to the intended location.\n@param elfLoadHelper load helper object\n@param functionAddress function address\n@return adjusted function address (required)",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "functionAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "function address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "adjusted function address (required)"
      },
      "throws": []
    },
    {
      "name": "calculateSymbolAddress",
      "comment": "This method allows an extension to override the default address calculation for loading\n a symbol.  This is generally only neccessary when symbol requires handling of processor-specific \n flags or section index.  This method should return null when default symbol processing \n is sufficient. Address#NO_ADDRESS should be returned if the symbol is external\n and is not handled by default processing.",
      "javadoc": "This method allows an extension to override the default address calculation for loading\n a symbol.  This is generally only neccessary when symbol requires handling of processor-specific \n flags or section index.  This method should return null when default symbol processing \n is sufficient. {@link Address#NO_ADDRESS} should be returned if the symbol is external\n and is not handled by default processing.\n@param elfLoadHelper load helper object\n@param elfSymbol elf symbol\n@return symbol memory address or null to defer to default implementation\n@throws NoValueException if error logged and address calculation failed",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "elf symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "symbol memory address or null to defer to default implementation"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NoValueException",
          "type_short": "NoValueException",
          "comment": "if error logged and address calculation failed"
        }
      ]
    },
    {
      "name": "evaluateElfSymbol",
      "comment": "During symbol processing this method will be invoked to permit an extension to\n adjust the address and/or apply context to the intended symbol location.",
      "javadoc": "During symbol processing this method will be invoked to permit an extension to\n adjust the address and/or apply context to the intended symbol location.\n@param elfLoadHelper load helper object\n@param elfSymbol elf symbol\n@param address program memory address where symbol will be created\n@param isExternal true if symbol treated as external to the program and has been\n assigned a fake memory address in the EXTERNAL memory block.\n@return adjusted symbol address or null if extension will handle applying the elfSymbol\n to the program (must also invoke {@link ElfLoadHelper#setElfSymbolAddress(ElfSymbol, Address)},\n or symbol should not be applied.",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": "load helper object"
        },
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "elf symbol"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "program memory address where symbol will be created"
        },
        {
          "name": "isExternal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if symbol treated as external to the program and has been\n assigned a fake memory address in the EXTERNAL memory block."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "adjusted symbol address or null if extension will handle applying the elfSymbol\n to the program (must also invoke ElfLoadHelper#setElfSymbolAddress(ElfSymbol, Address),\n or symbol should not be applied."
      },
      "throws": []
    },
    {
      "name": "isSegmentWritable",
      "comment": "Get the write permission for the specified segment.",
      "javadoc": "Get the write permission for the specified segment.\n@param segment program header object\n@return true if write enabled, else false or null to use standard Elf program header\n flags to make the determination.",
      "static": false,
      "params": [
        {
          "name": "segment",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": "program header object"
        }
      ],
      "return": {
        "type_long": "java.lang.Boolean",
        "type_short": "Boolean",
        "comment": "true if write enabled, else false or null to use standard Elf program header\n flags to make the determination."
      },
      "throws": []
    },
    {
      "name": "isSegmentReadable",
      "comment": "Get the read permission for the specified segment.",
      "javadoc": "Get the read permission for the specified segment.\n@param segment program header object\n@return true if read enabled, else false or null to use standard Elf program header\n flags to make the determination.",
      "static": false,
      "params": [
        {
          "name": "segment",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": "program header object"
        }
      ],
      "return": {
        "type_long": "java.lang.Boolean",
        "type_short": "Boolean",
        "comment": "true if read enabled, else false or null to use standard Elf program header\n flags to make the determination."
      },
      "throws": []
    },
    {
      "name": "isSegmentExecutable",
      "comment": "Get the execute permission for the specified segment.",
      "javadoc": "Get the execute permission for the specified segment.\n@param segment program header object\n@return true if execute enabled, else false or null to use standard Elf program header\n flags to make the determination.",
      "static": false,
      "params": [
        {
          "name": "segment",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": "program header object"
        }
      ],
      "return": {
        "type_long": "java.lang.Boolean",
        "type_short": "Boolean",
        "comment": "true if execute enabled, else false or null to use standard Elf program header\n flags to make the determination."
      },
      "throws": []
    },
    {
      "name": "isSectionWritable",
      "comment": "Get the write permission for the specified section.",
      "javadoc": "Get the write permission for the specified section.\n@param section section header object\n@return true if write enabled, else false or null to use standard Elf section\n flags to make the determination.",
      "static": false,
      "params": [
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "section header object"
        }
      ],
      "return": {
        "type_long": "java.lang.Boolean",
        "type_short": "Boolean",
        "comment": "true if write enabled, else false or null to use standard Elf section\n flags to make the determination."
      },
      "throws": []
    },
    {
      "name": "isSectionExecutable",
      "comment": "Get the execute permission for the specified section (i.e., instructions permitted).",
      "javadoc": "Get the execute permission for the specified section (i.e., instructions permitted).\n@param section section header object\n@return true if execute enabled, else false or null to use standard Elf section\n flags to make the determination.",
      "static": false,
      "params": [
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "section header object"
        }
      ],
      "return": {
        "type_long": "java.lang.Boolean",
        "type_short": "Boolean",
        "comment": "true if execute enabled, else false or null to use standard Elf section\n flags to make the determination."
      },
      "throws": []
    },
    {
      "name": "isSectionAllocated",
      "comment": "Determine if the specified section is \"allocated\" within memory.",
      "javadoc": "Determine if the specified section is \"allocated\" within memory.\n@param section section header object\n@return true if section should be allocated, else false or null to use standard Elf section\n flags to make the determination.",
      "static": false,
      "params": [
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "section header object"
        }
      ],
      "return": {
        "type_long": "java.lang.Boolean",
        "type_short": "Boolean",
        "comment": "true if section should be allocated, else false or null to use standard Elf section\n flags to make the determination."
      },
      "throws": []
    },
    {
      "name": "getAdjustedLoadSize",
      "comment": "Return the memory bytes to be loaded from the underlying file for the specified program header.\n The returned value will be consistent with any byte filtering which may be required.",
      "javadoc": "Return the memory bytes to be loaded from the underlying file for the specified program header.\n The returned value will be consistent with any byte filtering which may be required.\n@param elfProgramHeader\n@return preferred memory block size in bytes which corresponds to the specified program header",
      "static": false,
      "params": [
        {
          "name": "elfProgramHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "preferred memory block size in bytes which corresponds to the specified program header"
      },
      "throws": []
    },
    {
      "name": "getAdjustedMemorySize",
      "comment": "Return the memory segment size in bytes for the specified program header.\n The returned value will be consistent with any byte filtering which may be required.",
      "javadoc": "Return the memory segment size in bytes for the specified program header.\n The returned value will be consistent with any byte filtering which may be required.\n@param elfProgramHeader\n@return preferred memory block size in bytes which corresponds to the specified program header",
      "static": false,
      "params": [
        {
          "name": "elfProgramHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "preferred memory block size in bytes which corresponds to the specified program header"
      },
      "throws": []
    },
    {
      "name": "getLinkageBlockAlignment",
      "comment": "Get the dynamic memory block allocation alignment as addressable units\n within the default memory space.",
      "javadoc": "Get the dynamic memory block allocation alignment as addressable units\n within the default memory space.\n@return dynamic memory block allocation alignment.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "dynamic memory block allocation alignment."
      },
      "throws": []
    },
    {
      "name": "getPreferredExternalBlockSize",
      "comment": "Get the preferred free range size for the EXTERNAL memory block as addressable units\n within the default memory space.",
      "javadoc": "Get the preferred free range size for the EXTERNAL memory block as addressable units\n within the default memory space.\n@return minimum free range size for EXTERNAL memory block as addressable units",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "minimum free range size for EXTERNAL memory block as addressable units"
      },
      "throws": []
    },
    {
      "name": "getExternalBlockReserveSize",
      "comment": "Get reserve size of the EXTERNAL memory block as addressable units\n within the default memory space.  This size represents the largest \n expansion size to the block which could occur during relocation\n processing.",
      "javadoc": "Get reserve size of the EXTERNAL memory block as addressable units\n within the default memory space.  This size represents the largest \n expansion size to the block which could occur during relocation\n processing.\n@return reserve size of the EXTERNAL memory block as addressable units",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "reserve size of the EXTERNAL memory block as addressable units"
      },
      "throws": []
    },
    {
      "name": "getAdjustedSize",
      "comment": "Return the memory section size in bytes for the specified section header.\n The returned value will be consistent with any byte filtering which may be required.",
      "javadoc": "Return the memory section size in bytes for the specified section header.\n The returned value will be consistent with any byte filtering which may be required.\n@param section the section header\n@return preferred memory block size in bytes which corresponds to the specified section header",
      "static": false,
      "params": [
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "the section header"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "preferred memory block size in bytes which corresponds to the specified section header"
      },
      "throws": []
    },
    {
      "name": "getFilteredLoadInputStream",
      "comment": "Return filtered InputStream for loading a memory block (includes non-loaded OTHER blocks).\n NOTE: If this method is overriden, the #hasFilteredLoadInputStream(ElfLoadHelper, MemoryLoadable, Address)\n must also be overriden in a consistent fashion.",
      "javadoc": "Return filtered InputStream for loading a memory block (includes non-loaded OTHER blocks).\n NOTE: If this method is overriden, the {@link #hasFilteredLoadInputStream(ElfLoadHelper, MemoryLoadable, Address)}\n must also be overriden in a consistent fashion.\n@param elfLoadHelper\n@param loadable Corresponding ElfSectionHeader or ElfProgramHeader for the memory block to be created.\n@param start memory load address\n@param dataLength the in-memory data length in bytes (actual bytes read from dataInput may be more)\n@param dataInput the source input stream\n@return filtered input stream or original input stream",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": ""
        },
        {
          "name": "loadable",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": "Corresponding ElfSectionHeader or ElfProgramHeader for the memory block to be created."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "memory load address"
        },
        {
          "name": "dataLength",
          "type_long": "long",
          "type_short": "long",
          "comment": "the in-memory data length in bytes (actual bytes read from dataInput may be more)"
        },
        {
          "name": "dataInput",
          "type_long": "java.io.InputStream",
          "type_short": "InputStream",
          "comment": "the source input stream"
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "filtered input stream or original input stream"
      },
      "throws": []
    },
    {
      "name": "hasFilteredLoadInputStream",
      "comment": "Determine if the use of #getFilteredLoadInputStream(ElfLoadHelper, MemoryLoadable, Address, long, InputStream) \n is required when loading a memory block.  If a filtered input stream is required this will prevent the use of a direct \n mapping to file bytes.",
      "javadoc": "Determine if the use of {@link #getFilteredLoadInputStream(ElfLoadHelper, MemoryLoadable, Address, long, InputStream)} \n is required when loading a memory block.  If a filtered input stream is required this will prevent the use of a direct \n mapping to file bytes.\n@param elfLoadHelper\n@param loadable Corresponding ElfSectionHeader or ElfProgramHeader for the memory block to be loaded.\n@param start memory load address\n@return true if the use of a filtered input stream is required",
      "static": false,
      "params": [
        {
          "name": "elfLoadHelper",
          "type_long": "ghidra.app.util.bin.format.elf.ElfLoadHelper",
          "type_short": "ElfLoadHelper",
          "comment": ""
        },
        {
          "name": "loadable",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": "Corresponding ElfSectionHeader or ElfProgramHeader for the memory block to be loaded."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "memory load address"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the use of a filtered input stream is required"
      },
      "throws": []
    },
    {
      "name": "getRelocationClass",
      "comment": "Get the ElfRelocation class which should be used to properly parse\n the relocation tables.",
      "javadoc": "Get the ElfRelocation class which should be used to properly parse\n the relocation tables.\n@param elfHeader ELF header object (for header field access only)\n@return ElfRelocation class or null for default behavior",
      "static": false,
      "params": [
        {
          "name": "elfHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "ELF header object (for header field access only)"
        }
      ],
      "return": {
        "type_long": "java.lang.Class\u003c? extends ghidra.app.util.bin.format.elf.ElfRelocation\u003e",
        "type_short": "Class",
        "comment": "ElfRelocation class or null for default behavior"
      },
      "throws": []
    }
  ]
}
