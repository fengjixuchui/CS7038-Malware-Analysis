{
  "name": "ImportedLibrary",
  "comment": "Imported Libraries\n \n See Apple\u0027s -- PEFBinaryFormat.h\n \n struct PEFImportedLibrary {\n   UInt32              nameOffset;             // Loader string table offset of library\u0027s name.\n   UInt32              oldImpVersion;          // Oldest compatible implementation version.\n   UInt32              currentVersion;         // Current version at build time.\n   UInt32              importedSymbolCount;    // Imported symbol count for this library.\n   UInt32              firstImportedSymbol;    // Index of first imported symbol from this library.\n   UInt8               options;                // Option bits for this library.\n   UInt8               reservedA;              // Reserved, must be zero.\n   UInt16              reservedB;              // Reserved, must be zero.\n };\n ",
  "javadoc": "Imported Libraries\n \n See Apple\u0027s -- PEFBinaryFormat.h\n \u003cpre\u003e\n struct PEFImportedLibrary {\n   UInt32              nameOffset;             // Loader string table offset of library\u0027s name.\n   UInt32              oldImpVersion;          // Oldest compatible implementation version.\n   UInt32              currentVersion;         // Current version at build time.\n   UInt32              importedSymbolCount;    // Imported symbol count for this library.\n   UInt32              firstImportedSymbol;    // Index of first imported symbol from this library.\n   UInt8               options;                // Option bits for this library.\n   UInt8               reservedA;              // Reserved, must be zero.\n   UInt16              reservedB;              // Reserved, must be zero.\n };\n \u003c/pre\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SIZEOF",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "24"
    },
    {
      "name": "OPTION_kPEFWeakImportLibMask",
      "comment": "The imported library is allowed to be missing.",
      "javadoc": "The imported library is allowed to be missing.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "64"
    },
    {
      "name": "OPTION_kPEFInitLibBeforeMask",
      "comment": "The imported library must be initialized first.",
      "javadoc": "The imported library must be initialized first.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "128"
    },
    {
      "name": "nameOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "oldImpVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "currentVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "importedSymbolCount",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "firstImportedSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "options",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "reservedA",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "reservedB",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "_name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "loader",
          "type_long": "ghidra.app.util.bin.format.pef.LoaderInfoHeader",
          "type_short": "LoaderInfoHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getName",
      "comment": "Returns the name of the library being imported.",
      "javadoc": "Returns the name of the library being imported.\n@return the name of the library being imported",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the library being imported"
      },
      "throws": []
    },
    {
      "name": "getNameOffset",
      "comment": "The nameOffset field (4 bytes) indicates the offset (in bytes) from the beginning \n of the loader string table to the start of the null-terminated library name.",
      "javadoc": "The nameOffset field (4 bytes) indicates the offset (in bytes) from the beginning \n of the loader string table to the start of the null-terminated library name.\n@return loader string table offset of library\u0027s name.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "loader string table offset of library\u0027s name."
      },
      "throws": []
    },
    {
      "name": "getOldImpVersion",
      "comment": "The oldImpVersion and currentVersion fields (4 bytes each) provide version \n information for checking the compatibility of the imported library.",
      "javadoc": "The oldImpVersion and currentVersion fields (4 bytes each) provide version \n information for checking the compatibility of the imported library.\n@return oldest compatible implementation version",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "oldest compatible implementation version"
      },
      "throws": []
    },
    {
      "name": "getCurrentVersion",
      "comment": "The oldImpVersion and currentVersion fields (4 bytes each) provide version \n information for checking the compatibility of the imported library.",
      "javadoc": "The oldImpVersion and currentVersion fields (4 bytes each) provide version \n information for checking the compatibility of the imported library.\n@return current version at build time",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "current version at build time"
      },
      "throws": []
    },
    {
      "name": "getImportedSymbolCount",
      "comment": "The importedSymbolCount field (4 bytes) indicates the number of symbols \n imported from this library.",
      "javadoc": "The importedSymbolCount field (4 bytes) indicates the number of symbols \n imported from this library.\n@return imported symbol count for this library",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "imported symbol count for this library"
      },
      "throws": []
    },
    {
      "name": "getFirstImportedSymbol",
      "comment": "The firstImportedSymbol field (4 bytes) holds the (zero-based) index of the \n first entry in the imported symbol table for this library.",
      "javadoc": "The firstImportedSymbol field (4 bytes) holds the (zero-based) index of the \n first entry in the imported symbol table for this library.\n@return index of first imported symbol from this library",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "index of first imported symbol from this library"
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "The options byte contains bit flag information as follows:\n \n The high-order bit (mask 0x80) controls the order that the import libraries \n are initialized. If set to 0, the default initialization order is used, which \n specifies that the Code Fragment Manager should try to initialize the \n import library before the fragment that imports it. When set to 1, the import \n library must be initialized before the client fragment.\n \n The next bit (mask 0x40) controls whether the import library is weak. \n When set to 1 (weak import), the Code Fragment Manager continues \n preparation of the client fragment (and does not generate an error) even if \n the import library cannot be found. If the import library is not found, all \n imported symbols from that library have their addresses set to 0. You can \n use this information to determine whether a weak import library is actually \n present.",
      "javadoc": "The options byte contains bit flag information as follows:\n \u003cp\u003e\n The high-order bit (mask 0x80) controls the order that the import libraries \n are initialized. If set to 0, the default initialization order is used, which \n specifies that the Code Fragment Manager should try to initialize the \n import library before the fragment that imports it. When set to 1, the import \n library must be initialized before the client fragment.\n \u003cp\u003e\n The next bit (mask 0x40) controls whether the import library is weak. \n When set to 1 (weak import), the Code Fragment Manager continues \n preparation of the client fragment (and does not generate an error) even if \n the import library cannot be found. If the import library is not found, all \n imported symbols from that library have their addresses set to 0. You can \n use this information to determine whether a weak import library is actually \n present.\n@return option bits for this library",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "option bits for this library"
      },
      "throws": []
    },
    {
      "name": "getReservedA",
      "comment": "Reserved, must be set to zero (0).",
      "javadoc": "Reserved, must be set to zero (0).\n@return reserved, must be set to zero (0)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "reserved, must be set to zero (0)"
      },
      "throws": []
    },
    {
      "name": "getReservedB",
      "comment": "Reserved, must be set to zero (0).",
      "javadoc": "Reserved, must be set to zero (0).\n@return reserved, must be set to zero (0)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": "reserved, must be set to zero (0)"
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
