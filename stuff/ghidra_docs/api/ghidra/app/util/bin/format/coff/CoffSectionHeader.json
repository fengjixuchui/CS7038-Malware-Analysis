{
  "name": "CoffSectionHeader",
  "comment": "A 0x28 byte COFF section header",
  "javadoc": "A 0x28 byte COFF section header",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "s_name",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "s_paddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_vaddr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_scnptr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_relptr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_lnnoptr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_nreloc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_nlnno",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_flags",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "s_reserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "s_page",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "_header",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.coff.CoffFileHeader",
      "type_short": "CoffFileHeader",
      "constant_value": null
    },
    {
      "name": "_relocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.coff.CoffRelocation\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "_lineNumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.coff.CoffLineNumber\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.coff.CoffFileHeader",
          "type_short": "CoffFileHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getName",
      "comment": "Returns the section name.\n The section name will never be more than eight characters.",
      "javadoc": "Returns the section name.\n The section name will never be more than eight characters.\n@return the section name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the section name"
      },
      "throws": []
    },
    {
      "name": "getPhysicalAddress",
      "comment": "Returns the physical address offset.\n This is the address at which the section \n should be loaded into memory and reflects a addressable word offset.\n For linked executables, this is the absolute \n address within the program space.\n For unlinked objects, this address is relative\n to the object\u0027s address space (i.e. the first section\n is always at offset zero).",
      "javadoc": "Returns the physical address offset.\n This is the address at which the section \n should be loaded into memory and reflects a addressable word offset.\n For linked executables, this is the absolute \n address within the program space.\n For unlinked objects, this address is relative\n to the object\u0027s address space (i.e. the first section\n is always at offset zero).\n@return the physical address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the physical address"
      },
      "throws": []
    },
    {
      "name": "move",
      "comment": "Adds offset to the physical address; this must be performed before\n relocations in order to achieve the proper result.",
      "javadoc": "Adds offset to the physical address; this must be performed before\n relocations in order to achieve the proper result.\n@param offset the offset to add to the physical address",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the offset to add to the physical address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPhysicalAddress",
      "comment": "Returns the physical address.\n This is the address at which the section \n should be loaded into memory.\n For linked executables, this is the absolute \n address within the program space.\n For unlinked objects, this address is relative\n to the object\u0027s address space (i.e. the first section\n is always at offset zero).",
      "javadoc": "Returns the physical address.\n This is the address at which the section \n should be loaded into memory.\n For linked executables, this is the absolute \n address within the program space.\n For unlinked objects, this address is relative\n to the object\u0027s address space (i.e. the first section\n is always at offset zero).\n@return the physical address",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the physical address"
      },
      "throws": []
    },
    {
      "name": "getVirtualAddress",
      "comment": "Returns the virtual address.\n This value is always the same as s_paddr.",
      "javadoc": "Returns the virtual address.\n This value is always the same as s_paddr.\n@return the virtual address",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the virtual address"
      },
      "throws": []
    },
    {
      "name": "isExplicitlyByteAligned",
      "comment": "Returns true if this section is byte oriented and aligned and should assume\n an addressable unit size of 1.",
      "javadoc": "Returns true if this section is byte oriented and aligned and should assume\n an addressable unit size of 1.\n@return true if byte aligned, false if word aligned",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if byte aligned, false if word aligned"
      },
      "throws": []
    },
    {
      "name": "getSize",
      "comment": "Returns the number of bytes of data stored in the file for this section.\n NOTE: This value does not strictly indicate size in bytes.\n       For word-oriented machines, this value is represents\n       size in words.",
      "javadoc": "Returns the number of bytes of data stored in the file for this section.\n NOTE: This value does not strictly indicate size in bytes.\n       For word-oriented machines, this value is represents\n       size in words.\n@return the number of bytes of data stored in the file for this section",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes of data stored in the file for this section"
      },
      "throws": []
    },
    {
      "name": "getPointerToRawData",
      "comment": "Returns the file offset to the section data.",
      "javadoc": "Returns the file offset to the section data.\n@return the file offset to the section data",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file offset to the section data"
      },
      "throws": []
    },
    {
      "name": "getPointerToRelocations",
      "comment": "Returns the file offset to the relocations for this section.",
      "javadoc": "Returns the file offset to the relocations for this section.\n@return the file offset to the relocations for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file offset to the relocations for this section"
      },
      "throws": []
    },
    {
      "name": "getPointerToLineNumbers",
      "comment": "Returns the file offset to the line numbers for this section.",
      "javadoc": "Returns the file offset to the line numbers for this section.\n@return the file offset to the line numbers for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the file offset to the line numbers for this section"
      },
      "throws": []
    },
    {
      "name": "getRelocationCount",
      "comment": "Returns the number of relocations for this section.",
      "javadoc": "Returns the number of relocations for this section.\n@return the number of relocations for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of relocations for this section"
      },
      "throws": []
    },
    {
      "name": "getLineNumberCount",
      "comment": "Returns the number of line number entries for this section.",
      "javadoc": "Returns the number of line number entries for this section.\n@return the number of line number entries for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of line number entries for this section"
      },
      "throws": []
    },
    {
      "name": "getFlags",
      "comment": "Returns the flags for this section.",
      "javadoc": "Returns the flags for this section.\n@return the flags for this section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the flags for this section"
      },
      "throws": []
    },
    {
      "name": "getReserved",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRawDataStream",
      "comment": "Returns an input stream that will supply the bytes\n for this section.",
      "javadoc": "Returns an input stream that will supply the bytes\n for this section.\n@return the input stream\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "the input stream"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "isProcessedBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parse",
      "comment": "Parse the relocations and line number information\n for this section.",
      "javadoc": "Parse the relocations and line number information\n for this section.\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.coff.CoffFileHeader",
          "type_short": "CoffFileHeader",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "parseLineNumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.coff.CoffFileHeader",
          "type_short": "CoffFileHeader",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isUninitializedData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInitializedData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReadable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isGroup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isWritable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExecutable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isAllocated",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.coff.CoffRelocation\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLineNumbers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.coff.CoffLineNumber\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffsetUnitSize",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.coff.CoffSectionHeader",
          "type_short": "CoffSectionHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Convert address offset to an Address object.  The default data space (defined by pspec)\n will be used if section is null or corresponds to a data section.  The language default\n space (defined by slaspec) will be used for all non-data sections.  If pspec does not \n specify a default data space, the default language space is used.",
      "javadoc": "Convert address offset to an Address object.  The default data space (defined by pspec)\n will be used if section is null or corresponds to a data section.  The language default\n space (defined by slaspec) will be used for all non-data sections.  If pspec does not \n specify a default data space, the default language space is used.\n@param language\n@param offset address offset (byte offset assumed if section is null or is not explicitly\n byte aligned, otherwise word offset assumed).\n@param section section which contains the specified offset or null (data space assumed)\n@return address object",
      "static": true,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "address offset (byte offset assumed if section is null or is not explicitly\n byte aligned, otherwise word offset assumed)."
        },
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.coff.CoffSectionHeader",
          "type_short": "CoffSectionHeader",
          "comment": "section which contains the specified offset or null (data space assumed)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "address object"
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "Convert address offset to an Address in the specified space (defined by pspec).\n If pspec does not specify a default data space, the default language space is used.",
      "javadoc": "Convert address offset to an Address in the specified space (defined by pspec).\n If pspec does not specify a default data space, the default language space is used.\n@param language\n@param offset address offset (word offset assumed).\n@param space address space\n@return address object",
      "static": true,
      "params": [
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": "address offset (word offset assumed)."
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "address space"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "address object"
      },
      "throws": []
    }
  ]
}
