{
  "name": "DebugDirectoryParser",
  "comment": "A helper class to parsing different types of \n debug information from a debug directory",
  "javadoc": "A helper class to parsing different types of \n debug information from a debug directory",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "IMAGE_DEBUG_TYPE_UNKNOWN",
      "comment": "Unknown debug type.",
      "javadoc": "Unknown debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "0"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_COFF",
      "comment": "COFF debug type.",
      "javadoc": "COFF debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "1"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_CODEVIEW",
      "comment": "CodeView debug type.",
      "javadoc": "CodeView debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "2"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_FPO",
      "comment": "FPO debug type.",
      "javadoc": "FPO debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "3"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_MISC",
      "comment": "Misc debug type.",
      "javadoc": "Misc debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "4"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_EXCEPTION",
      "comment": "Exception debug type.",
      "javadoc": "Exception debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "5"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_FIXUP",
      "comment": "Fixup debug type.",
      "javadoc": "Fixup debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "6"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_OMAP_TO_SRC",
      "comment": "OMAP-To-Source debug type.",
      "javadoc": "OMAP-To-Source debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "7"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_OMAP_FROM_SRC",
      "comment": "OMAP-From-Source debug type.",
      "javadoc": "OMAP-From-Source debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "8"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_BORLAND",
      "comment": "Borland debug type.",
      "javadoc": "Borland debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "9"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_RESERVED10",
      "comment": "Reserved debug type.",
      "javadoc": "Reserved debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "10"
    },
    {
      "name": "IMAGE_DEBUG_TYPE_CLSID",
      "comment": "CLS ID debug type.",
      "javadoc": "CLS ID debug type.",
      "static": true,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": "11"
    },
    {
      "name": "debugFormatList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.bin.format.pe.debug.DebugDirectory\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "miscDebug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugMisc",
      "type_short": "DebugMisc",
      "constant_value": null
    },
    {
      "name": "codeViewDebug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCodeView",
      "type_short": "DebugCodeView",
      "constant_value": null
    },
    {
      "name": "coffDebug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbolsHeader",
      "type_short": "DebugCOFFSymbolsHeader",
      "constant_value": null
    },
    {
      "name": "fixupDebug",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.pe.debug.DebugFixup",
      "type_short": "DebugFixup",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDebugDirectoryParser",
      "comment": "Constructs a new debug directory parser.",
      "javadoc": "Constructs a new debug directory parser.\n@param reader the binary reader\n@param ptr the pointer into the binary reader\n@param size the size of the directory\n@param validator the validator for the directory\n@throws IOException if an I/O error occurs",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader"
        },
        {
          "name": "ptr",
          "type_long": "long",
          "type_short": "long",
          "comment": "the pointer into the binary reader"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the size of the directory"
        },
        {
          "name": "validator",
          "type_long": "ghidra.app.util.bin.format.pe.OffsetValidator",
          "type_short": "OffsetValidator",
          "comment": "the validator for the directory"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugDirectoryParser",
        "type_short": "DebugDirectoryParser",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDebugDirectoryParser",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "validator",
          "type_long": "ghidra.app.util.bin.format.pe.OffsetValidator",
          "type_short": "OffsetValidator",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDebugDirectories",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugDirectory[]",
        "type_short": "ghidra.app.util.bin.format.pe.debug.DebugDirectory[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDebugMisc",
      "comment": "Returns the miscellaneous debug information, or null if it does not exists.",
      "javadoc": "Returns the miscellaneous debug information, or null if it does not exists.\n@return the miscellaneous debug information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugMisc",
        "type_short": "DebugMisc",
        "comment": "the miscellaneous debug information"
      },
      "throws": []
    },
    {
      "name": "getDebugCodeView",
      "comment": "Returns the CodeView debug information, or null if it does not exists.",
      "javadoc": "Returns the CodeView debug information, or null if it does not exists.\n@return the CodeView debug information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCodeView",
        "type_short": "DebugCodeView",
        "comment": "the CodeView debug information"
      },
      "throws": []
    },
    {
      "name": "getDebugCOFFSymbolsHeader",
      "comment": "Returns the COFF debug information, or null if it does not exists.",
      "javadoc": "Returns the COFF debug information, or null if it does not exists.\n@return the COFF debug information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugCOFFSymbolsHeader",
        "type_short": "DebugCOFFSymbolsHeader",
        "comment": "the COFF debug information"
      },
      "throws": []
    },
    {
      "name": "getDebugFixup",
      "comment": "Returns the Fixup debug information, or null if it does not exists.",
      "javadoc": "Returns the Fixup debug information, or null if it does not exists.\n@return the Fixup debug information",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DebugFixup",
        "type_short": "DebugFixup",
        "comment": "the Fixup debug information"
      },
      "throws": []
    }
  ]
}
