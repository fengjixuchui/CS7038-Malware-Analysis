{
  "name": "DataSym32_new",
  "comment": "\n typedef struct DATASYM32_NEW {\n     unsigned short  reclen;         // Record length\n     unsigned short  rectyp;         // S_LDATA32, S_GDATA32 or S_PUB32\n     CVTYPEINDEX     typind;\n     unsigned long   off;\n     unsigned short  seg;\n     unsigned char   name[1];        // Length-prefixed name\n } DATASYM32_NEW;\n ",
  "javadoc": "\u003cpre\u003e\n typedef struct DATASYM32_NEW {\n     unsigned short  reclen;         // Record length\n     unsigned short  rectyp;         // S_LDATA32, S_GDATA32 or S_PUB32\n     CVTYPEINDEX     typind;\n     unsigned long   off;\n     unsigned short  seg;\n     unsigned char   name[1];        // Length-prefixed name\n } DATASYM32_NEW;\n \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.bin.format.pe.debug.DebugSymbol",
  "fields": [
    {
      "name": "typeIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "nameChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createDataSym32_new",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "length",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.pe.debug.DataSym32_new",
        "type_short": "DataSym32_new",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initDataSym32_new",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "length",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        },
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "ptr",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getTypeIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNameChar",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": []
    }
  ]
}
