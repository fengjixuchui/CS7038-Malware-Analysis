{
  "name": "DyldCacheSlideInfoCommon",
  "comment": "Class for representing the common components of the various dyld_cache_slide_info structures.\n The intent is for the the full dyld_cache_slide_info structures to extend this and add their\n specific parts.",
  "javadoc": "Class for representing the common components of the various dyld_cache_slide_info structures.\n The intent is for the the full dyld_cache_slide_info structures to extend this and add their\n specific parts.\n@see \u003ca href\u003d\"https://opensource.apple.com/source/dyld/dyld-852.2/dyld3/shared-cache/dyld_cache_format.h.auto.html\"\u003edyld3/shared-cache/dyld_cache_format.h\u003c/a\u003e",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.StructConverter"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DATA_PAGE_MAP_ENTRY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "BYTES_PER_CHAIN_OFFSET",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4"
    },
    {
      "name": "CHAIN_OFFSET_MASK",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16383"
    },
    {
      "name": "version",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "slideInfoOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "parseSlideInfo",
      "comment": "Parses the slide info",
      "javadoc": "Parses the slide info\n@param reader A {@link BinaryReader} positioned at the start of a DYLD slide info\n@param slideInfoOffset The offset of the slide info to parse\n@param log The log\n@param monitor A cancelable task monitor\n@return The slide info object",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A BinaryReader positioned at the start of a DYLD slide info"
        },
        {
          "name": "slideInfoOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "The offset of the slide info to parse"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.dyld.DyldCacheSlideInfoCommon",
        "type_short": "DyldCacheSlideInfoCommon",
        "comment": "The slide info object"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Create a new DyldCacheSlideInfoCommon.",
      "javadoc": "Create a new {@link DyldCacheSlideInfoCommon}.\n@param reader A {@link BinaryReader} positioned at the start of a DYLD slide info\n@throws IOException if there was an IO-related problem creating the DYLD slide info",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "A BinaryReader positioned at the start of a DYLD slide info"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related problem creating the DYLD slide info"
        }
      ]
    },
    {
      "name": "getVersion",
      "comment": "Gets the version of the DYLD slide info.",
      "javadoc": "Gets the version of the DYLD slide info.\n@return The version of the DYLD slide info.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The version of the DYLD slide info."
      },
      "throws": []
    },
    {
      "name": "getSlideInfoOffset",
      "comment": "Return the original slide info offset",
      "javadoc": "Return the original slide info offset\n@return the original slide info offset",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the original slide info offset"
      },
      "throws": []
    },
    {
      "name": "fixPageChains",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "dyldCacheHeader",
          "type_long": "ghidra.app.util.bin.format.macho.dyld.DyldCacheHeader",
          "type_short": "DyldCacheHeader",
          "comment": ""
        },
        {
          "name": "addRelocations",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addRelocationTableEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "chainLoc",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "chainValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "origBytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createChainPointers",
      "comment": "Create pointers at each fixed chain location.",
      "javadoc": "Create pointers at each fixed chain location.\n@param program The program\n@param unchainedLocList Address list of fixed pointer locations\n@param monitor A cancelable task monitor\n@throws CancelledException if the user cancels",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The program"
        },
        {
          "name": "unchainedLocList",
          "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
          "type_short": "List",
          "comment": "Address list of fixed pointer locations"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancels"
        }
      ]
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
