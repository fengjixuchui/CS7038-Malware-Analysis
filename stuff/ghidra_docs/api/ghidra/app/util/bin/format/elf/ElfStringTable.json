{
  "name": "ElfStringTable",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.format.elf.ElfFileSection"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "header",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
      "type_short": "ElfHeader",
      "constant_value": null
    },
    {
      "name": "stringTableSection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
      "type_short": "ElfSectionHeader",
      "constant_value": null
    },
    {
      "name": "fileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "addrOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createElfStringTable",
      "comment": "Create and parse an Elf string table",
      "javadoc": "Create and parse an Elf string table\n@param reader the binary reader containing the elf string table\n@param header elf header\n@param stringTableSection string table section header or null if associated with a dynamic table entry\n@param fileOffset symbol table file offset\n@param addrOffset memory address of symbol table (should already be adjusted for prelink)\n@param length length of symbol table in bytes of -1 if unknown\n@return Elf string table object\n@throws IOException",
      "static": true,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": "the binary reader containing the elf string table"
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": "elf header"
        },
        {
          "name": "stringTableSection",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "string table section header or null if associated with a dynamic table entry"
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "symbol table file offset"
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "memory address of symbol table (should already be adjusted for prelink)"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "length of symbol table in bytes of -1 if unknown"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfStringTable",
        "type_short": "ElfStringTable",
        "comment": "Elf string table object"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "javadoc": "DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initElfStringTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.format.FactoryBundledWithBinaryReader",
          "type_short": "FactoryBundledWithBinaryReader",
          "comment": ""
        },
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        },
        {
          "name": "stringTableSection",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": ""
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readString",
      "comment": "Read string from table at specified relative table offset",
      "javadoc": "Read string from table at specified relative table offset\n@param reader\n@param stringOffset table relative string offset\n@return string or null on error",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": ""
        },
        {
          "name": "stringOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "table relative string offset"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "string or null on error"
      },
      "throws": []
    },
    {
      "name": "getAddressOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTableSectionHeader",
      "comment": "Get section header which corresponds to this table, or null\n if only associated with a dynamic table entry",
      "javadoc": "Get section header which corresponds to this table, or null\n if only associated with a dynamic table entry\n@return string table section header or null",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
        "type_short": "ElfSectionHeader",
        "comment": "string table section header or null"
      },
      "throws": []
    },
    {
      "name": "getFileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEntrySize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toDataType",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
