{
  "name": "RandomAccessMutableByteProvider",
  "comment": "An implementation of ByteProvider where the underlying\n bytes are supplied by a random access file.",
  "javadoc": "An implementation of ByteProvider where the underlying\n bytes are supplied by a random access file.",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.MutableByteProvider"
  ],
  "extends": "ghidra.app.util.bin.RandomAccessByteProvider",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a byte provider using the specified file",
      "javadoc": "Constructs a byte provider using the specified file\n@param file the file to open for random access\n@throws FileNotFoundException if the file does not exist",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to open for random access"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a byte provider using the specified file and permissions string",
      "javadoc": "Constructs a byte provider using the specified file and permissions string\n@param file the file to open for random access\n@param permissions indicating permissions used for open\n@throws FileNotFoundException if the file does not exist",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "the file to open for random access"
        },
        {
          "name": "permissions",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "indicating permissions used for open"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "writeBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "values",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
