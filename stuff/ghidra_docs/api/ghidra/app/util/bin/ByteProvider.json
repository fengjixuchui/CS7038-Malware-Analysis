{
  "name": "ByteProvider",
  "comment": "An interface for a generic random-access byte provider.",
  "javadoc": "An interface for a generic random-access byte provider.",
  "static": false,
  "implements": [
    "java.io.Closeable"
  ],
  "fields": [
    {
      "name": "EMPTY_BYTEPROVIDER",
      "comment": "A static re-usable empty ByteProvider instance.",
      "javadoc": "A static re-usable empty {@link ByteProvider} instance.",
      "static": true,
      "type_long": "ghidra.app.util.bin.ByteProvider",
      "type_short": "ByteProvider",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getFSRL",
      "comment": "Returns the FSRL of the underlying file for this byte provider,\n or null if this byte provider is not associated with a file.",
      "javadoc": "Returns the {@link FSRL} of the underlying file for this byte provider,\n or null if this byte provider is not associated with a file.\n@return The {@link FSRL} of the underlying {@link File}, or null if no associated \n   {@link File}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.formats.gfilesystem.FSRL",
        "type_short": "FSRL",
        "comment": "The FSRL of the underlying File, or null if no associated \n   File."
      },
      "throws": []
    },
    {
      "name": "getFile",
      "comment": "Returns the underlying File for this ByteProvider, or null if this \n ByteProvider is not associated with a File.",
      "javadoc": "Returns the underlying {@link File} for this {@link ByteProvider}, or null if this \n {@link ByteProvider} is not associated with a {@link File}.\n@return the underlying file for this byte provider",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.io.File",
        "type_short": "File",
        "comment": "the underlying file for this byte provider"
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "Returns the name of the ByteProvider. For example, the underlying file name.",
      "javadoc": "Returns the name of the {@link ByteProvider}. For example, the underlying file name.\n@return the name of the {@link ByteProvider} or null if there is no name",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the name of the ByteProvider or null if there is no name"
      },
      "throws": []
    },
    {
      "name": "getAbsolutePath",
      "comment": "Returns the absolute path (similar to, but not a, URI) to the ByteProvider.\n For example, the complete path to the file.",
      "javadoc": "Returns the absolute path (similar to, but not a, URI) to the {@link ByteProvider}.\n For example, the complete path to the file.\n@return the absolute path to the {@link ByteProvider} or null if not associated with a \n   {@link File}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the absolute path to the ByteProvider or null if not associated with a \n   File."
      },
      "throws": []
    },
    {
      "name": "length",
      "comment": "Returns the length of the ByteProvider",
      "javadoc": "Returns the length of the {@link ByteProvider}\n@return the length of the {@link ByteProvider}\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "the length of the ByteProvider"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "isValidIndex",
      "comment": "Returns true if the specified index is valid.",
      "javadoc": "Returns true if the specified index is valid.\n@param index the index in the byte provider to check\n@return true if the specified index is valid",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index in the byte provider to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified index is valid"
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "Releases any resources the ByteProvider may have occupied",
      "javadoc": "Releases any resources the {@link ByteProvider} may have occupied\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "readByte",
      "comment": "Reads a byte at the specified index",
      "javadoc": "Reads a byte at the specified index\n@param index the index of the byte to read\n@return the byte read from the specified index\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index of the byte to read"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the byte read from the specified index"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "Reads a byte array at the specified index",
      "javadoc": "Reads a byte array at the specified index\n@param index the index of the byte to read\n@param length the number of bytes to read\n@return the byte array read from the specified index\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "the index of the byte to read"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "the number of bytes to read"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the byte array read from the specified index"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    },
    {
      "name": "getInputStream",
      "comment": "Returns an input stream to the underlying byte provider starting at the specified index.\n \n The caller is responsible for closing the returned InputStream instance.\n \n If you need to override this default implementation, please document why your inputstream\n is needed.",
      "javadoc": "Returns an input stream to the underlying byte provider starting at the specified index.\n \u003cp\u003e\n The caller is responsible for closing the returned {@link InputStream} instance.\n \u003cp\u003e\n If you need to override this default implementation, please document why your inputstream\n is needed.\n@param index where in the {@link ByteProvider} to start the {@link InputStream}\n@return the {@link InputStream}\n@throws IOException if an I/O error occurs",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": "where in the ByteProvider to start the InputStream"
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "the InputStream"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs"
        }
      ]
    }
  ]
}
