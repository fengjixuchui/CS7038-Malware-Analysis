{
  "name": "RepeatInstructionByteTracker",
  "comment": "RepeatInstructionByteTracker provides pseudo-disassemblers the ability to track\n repeated bytes during disassembly of a block of instructions.",
  "javadoc": "\u003ccode\u003eRepeatInstructionByteTracker\u003c/code\u003e provides pseudo-disassemblers the ability to track\n repeated bytes during disassembly of a block of instructions.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "repeatPatternLimitIgnoredRegion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSetView",
      "type_short": "AddressSetView",
      "constant_value": null
    },
    {
      "name": "repeatPatternLimit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "repeatPatternCnt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "repeatByteValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor.",
      "javadoc": "Constructor.\n@param repeatPatternLimit maximum number of instructions containing the same repeated \n byte values.  A value less than or equal to 0 will disable counting.\n@param repeatPatternLimitIgnoredRegion optional set of addresses where check is not \n performed or null for check to be performed everywhere.",
      "static": false,
      "params": [
        {
          "name": "repeatPatternLimit",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum number of instructions containing the same repeated \n byte values.  A value less than or equal to 0 will disable counting."
        },
        {
          "name": "repeatPatternLimitIgnoredRegion",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "optional set of addresses where check is not \n performed or null for check to be performed everywhere."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "reset",
      "comment": "Reset internal counter.  This should be performed before disassembling\n a new block of instructions.",
      "javadoc": "Reset internal counter.  This should be performed before disassembling\n a new block of instructions.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "exceedsRepeatBytePattern",
      "comment": "Check the next instruction within a block of instructions.",
      "javadoc": "Check the next instruction within a block of instructions.\n@param inst next instruction\n@return true if repeat limit has been exceeded, else false.  \n If the repeat limit has been set \u0026lt;\u003d 0 false will be returned.",
      "static": false,
      "params": [
        {
          "name": "inst",
          "type_long": "ghidra.app.util.PseudoInstruction",
          "type_short": "PseudoInstruction",
          "comment": "next instruction"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if repeat limit has been exceeded, else false.  \n If the repeat limit has been set \u003d 0 false will be returned."
      },
      "throws": []
    },
    {
      "name": "setRepeatPatternLimit",
      "comment": "Set the maximum number of instructions in a single run which contain the same byte values.",
      "javadoc": "Set the maximum number of instructions in a single run which contain the same byte values.\n@param maxInstructions limit on the number of consecutive instructions with the same \n byte values.  A non-positive value (\u0026lt;\u003d 0) will disable the \n {@link #exceedsRepeatBytePattern(PseudoInstruction)} checking.",
      "static": false,
      "params": [
        {
          "name": "maxInstructions",
          "type_long": "int",
          "type_short": "int",
          "comment": "limit on the number of consecutive instructions with the same \n byte values.  A non-positive value (\u003d 0) will disable the \n #exceedsRepeatBytePattern(PseudoInstruction) checking."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRepeatPatternLimitIgnored",
      "comment": "Set the region over which the repeat pattern limit will be ignored.",
      "javadoc": "Set the region over which the repeat pattern limit will be ignored.\n@param set region over which the repeat pattern limit will be ignored",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": "region over which the repeat pattern limit will be ignored"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
