{
  "name": "PseudoCodeUnit",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.program.model.listing.CodeUnit"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "address",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "maxAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "emptyAddrArray",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.address.Address[]",
      "type_short": "ghidra.program.model.address.Address[]",
      "constant_value": null
    },
    {
      "name": "hash",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "emptyMemRefs",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.program.model.symbol.Reference[]",
      "type_short": "ghidra.program.model.symbol.Reference[]",
      "constant_value": null
    },
    {
      "name": "comments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Integer,java.lang.String\u003e",
      "type_short": "Map",
      "constant_value": null
    },
    {
      "name": "refMgr",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.symbol.ReferenceManager",
      "type_short": "ReferenceManager",
      "constant_value": null
    },
    {
      "name": "isValid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a pseudo code unit within a program",
      "javadoc": "Creates a pseudo code unit within a program\n@param program the program this code unit is in.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program this code unit is in."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the minimum address of this code unit."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length  of this code unit."
        },
        {
          "name": "memBuffer",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the memory buffer where bytes can be obtained for this code unit."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if code unit length causes wrap within space"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a pseudo code unit within a program",
      "javadoc": "Creates a pseudo code unit within a program\n@param program the program this code unit is in.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param cacheLength the number of memBuffer bytes to be available within this CodeUnit MemBuffer\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program this code unit is in."
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the minimum address of this code unit."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length  of this code unit."
        },
        {
          "name": "cacheLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of memBuffer bytes to be available within this CodeUnit MemBuffer"
        },
        {
          "name": "memBuffer",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the memory buffer where bytes can be obtained for this code unit."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if code unit length causes wrap within space"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a pseudo code unit without a program.",
      "javadoc": "Creates a pseudo code unit without a program.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the minimum address of this code unit."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length  of this code unit."
        },
        {
          "name": "memBuffer",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the memory buffer where bytes can be obtained for this code unit."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if code unit length causes wrap within space"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a pseudo code unit without a program.",
      "javadoc": "Creates a pseudo code unit without a program.\n@param addr the minimum address of this code unit.\n@param length the length  of this code unit.\n@param cacheLength the number of memBuffer bytes to be available within this CodeUnit MemBuffer\n@param memBuffer the memory buffer where bytes can be obtained for this code unit.\n@throws AddressOverflowException if code unit length causes wrap within space",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the minimum address of this code unit."
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the length  of this code unit."
        },
        {
          "name": "cacheLength",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of memBuffer bytes to be available within this CodeUnit MemBuffer"
        },
        {
          "name": "memBuffer",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the memory buffer where bytes can be obtained for this code unit."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if code unit length causes wrap within space"
        }
      ]
    },
    {
      "name": "refresh",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "invalidate",
      "comment": "Invalidate memory buffer",
      "javadoc": "Invalidate memory buffer",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddressString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "showBlockName",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "pad",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLength",
      "comment": "Get the length of the code unit.",
      "javadoc": "Get the length of the code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "refreshIfNeeded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Gets the bytes for this code unit.",
      "javadoc": "Gets the bytes for this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBytesInCodeUnit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "bufferOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getShort",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getInt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getLong",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getBigInteger",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setProperty",
      "comment": "Set the property name with the given value for this code unit.",
      "javadoc": "Set the property name with the given value for this code unit.\n@param name the name of the property to save.\n@param value the value of the property to save.\n@throws TypeMismatchException if the property manager for name does not support object\n             types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to save."
        },
        {
          "name": "value",
          "type_long": "ghidra.util.Saveable",
          "type_short": "Saveable",
          "comment": "the value of the property to save."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Set the property name with the given value for this code unit.",
      "javadoc": "Set the property name with the given value for this code unit.\n@param name the name of the property to save.\n@param value the value of the property to save.\n@throws TypeMismatchException if the property manager for name does not support string\n             types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to save."
        },
        {
          "name": "value",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the value of the property to save."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Set the property name with the given value for this code unit.",
      "javadoc": "Set the property name with the given value for this code unit.\n@param name the name of the property to save.\n@param value the value of the property to save.\n@throws TypeMismatchException if the property manager for name does not support int types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to save."
        },
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": "the value of the property to save."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProperty",
      "comment": "Mark the property name as having a value for this code unit.",
      "javadoc": "Mark the property name as having a value for this code unit.\n@param name the name of the property to save.\n@throws TypeMismatchException if the property manager for name does not support void types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to save."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getObjectProperty",
      "comment": "Get the object property for name; returns null if there is no name\n property for this code unit.",
      "javadoc": "Get the object property for name; returns null if there is no name\n property for this code unit.\n@param name the name of the property.\n@throws TypeMismatchException if the property manager for name does not support object\n             types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        }
      ],
      "return": {
        "type_long": "ghidra.util.Saveable",
        "type_short": "Saveable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStringProperty",
      "comment": "Get the string property for name; returns null if there is no name\n property for this code unit.",
      "javadoc": "Get the string property for name; returns null if there is no name\n property for this code unit.\n@param name the name of the property.\n@throws TypeMismatchException if the property manager for name does not support string\n             types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getIntProperty",
      "comment": "Get the int property for name.",
      "javadoc": "Get the int property for name.\n@param name the name of the property.\n@throws NoValueException if there is not name property for this code unit\n@throws TypeMismatchException if the property manager for name does not support int types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.NoValueException",
          "type_short": "NoValueException",
          "comment": "if there is not name property for this code unit"
        }
      ]
    },
    {
      "name": "hasProperty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getVoidProperty",
      "comment": "Returns whether this code unit is marked as having the name property.",
      "javadoc": "Returns whether this code unit is marked as having the name property.\n@param name the name of the property.\n@throws TypeMismatchException if the property manager for name does not support void types\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "propertyNames",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.Iterator\u003cjava.lang.String\u003e",
        "type_short": "Iterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeProperty",
      "comment": "Remove the property value with the given name for this code unit.",
      "javadoc": "Remove the property value with the given name for this code unit.\n@param name the name of the property.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "visitProperty",
      "comment": "Invokes the visit() method of the specified PropertyVisitor if the named\n property exists for this code unit.",
      "javadoc": "Invokes the visit() method of the specified PropertyVisitor if the named\n property exists for this code unit.\n@param visitor the class implementing the PropertyVisitor interface.\n@param propertyName the name of the property to be visited.",
      "static": false,
      "params": [
        {
          "name": "visitor",
          "type_long": "ghidra.util.prop.PropertyVisitor",
          "type_short": "PropertyVisitor",
          "comment": "the class implementing the PropertyVisitor interface."
        },
        {
          "name": "propertyName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the property to be visited."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLabel",
      "comment": "Get the label for this code unit.",
      "javadoc": "Get the label for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.\n@deprecated",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbols",
      "comment": "Get the symbols for this code unit.",
      "javadoc": "Get the symbols for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol[]",
        "type_short": "ghidra.program.model.symbol.Symbol[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimarySymbol",
      "comment": "Get the primary Symbol for this code unit.",
      "javadoc": "Get the primary Symbol for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMinAddress",
      "comment": "Get the starting address for this code unit.",
      "javadoc": "Get the starting address for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMaxAddress",
      "comment": "Get the ending address for this code unit.",
      "javadoc": "Get the ending address for this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNextCodeUnit",
      "comment": "Get the code unit after this code unit.",
      "javadoc": "Get the code unit after this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPreviousCodeUnit",
      "comment": "Get the code unit before this code unit.",
      "javadoc": "Get the code unit before this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.CodeUnit",
        "type_short": "CodeUnit",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isSuccessor",
      "comment": "Return true if the given CodeUnit follows directly after this code unit.",
      "javadoc": "Return true if the given CodeUnit follows directly after this code unit.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "codeUnit",
          "type_long": "ghidra.program.model.listing.CodeUnit",
          "type_short": "CodeUnit",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCommentAsArray",
      "comment": "Get the comment as an array where each element is a single line for the\n given type.",
      "javadoc": "Get the comment as an array where each element is a single line for the\n given type.\n@param commentType must be either EOL_COMMENT_TYPE, PRE_COMMENT_TYPE,\n            POST_COMMENT_TYPE, or PLATE_COMMENT_TYPE\n@throws IllegalArgumentException if type is not one of the three types of comments supported\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "must be either EOL_COMMENT_TYPE, PRE_COMMENT_TYPE,\n            POST_COMMENT_TYPE, or PLATE_COMMENT_TYPE"
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setCommentAsArray",
      "comment": "Set the comment for the given type.",
      "javadoc": "Set the comment for the given type.\n@param commentType must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT\n@param comment the lines that make up the comment\n@throws IllegalArgumentException if type is not one of the three types of comments supported\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "the lines that make up the comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setComment",
      "comment": "Set the comment for the given type.",
      "javadoc": "Set the comment for the given type.\n@param commentType must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT\n@param comment the comment\n@throws IllegalArgumentException if type is not one of the three types of comments supported\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "commentType",
          "type_long": "int",
          "type_short": "int",
          "comment": "must be either EOL_COMMENT, PRE_COMMENT, POST_COMMENT, or\n            PLATE_COMMENT"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the comment"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "contains",
      "comment": "Determines if this code unit contains the indicated address.",
      "javadoc": "Determines if this code unit contains the indicated address.\n@param testAddr the address to test\n@return true if address is contained in the range.\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "testAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to test"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if address is contained in the range."
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "Compares the given address to the address range of this node.",
      "javadoc": "Compares the given address to the address range of this node.\n@param a the address\n@return a negative integer if addr is greater than the maximum range\n         address zero if addr is in the range a positive integer if addr\n         is less than minimum range address\n@throws ConcurrentModificationException if this object is no longer valid.",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "a negative integer if addr is greater than the maximum range\n         address zero if addr is in the range a positive integer if addr\n         is less than minimum range address"
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "Get one byte from memory at the current position plus offset.",
      "javadoc": "Get one byte from memory at the current position plus offset.\n@param offset the displacement from the current position.\n@return the data at offset from the current position.\n@throws AddressOutOfBoundsException if offset exceeds address space\n@throws IndexOutOfBoundsException if offset is negative\n@throws MemoryAccessException if memory cannot be read",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": "the displacement from the current position."
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "the data at offset from the current position."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if memory cannot be read"
        }
      ]
    },
    {
      "name": "getAddress",
      "comment": "Get the Address which corresponds to the offset 0.",
      "javadoc": "Get the Address which corresponds to the offset 0.\n@return the current address of offset 0.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the current address of offset 0."
      },
      "throws": []
    },
    {
      "name": "getMemory",
      "comment": "Get the Memory object actually used by the MemBuffer.\n \n return the Memory used by this MemBuffer.",
      "javadoc": "Get the Memory object actually used by the MemBuffer.\n \n return the Memory used by this MemBuffer.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.mem.Memory",
        "type_short": "Memory",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addMnemonicReference",
      "comment": "Add a reference to the mnemonic for this code unit.",
      "javadoc": "Add a reference to the mnemonic for this code unit.\n@param refAddr address of reference to add\n@param refType type of reference being added",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "address of reference to add"
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": "type of reference being added"
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMnemonicReferences",
      "comment": "Get references for the mnemonic for this instruction.",
      "javadoc": "Get references for the mnemonic for this instruction.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeMnemonicReference",
      "comment": "Remove a reference to the mnemonic for this instruction.",
      "javadoc": "Remove a reference to the mnemonic for this instruction.",
      "static": false,
      "params": [
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addOperandReference",
      "comment": "Add a user defined reference to the operand at the given index.",
      "javadoc": "Add a user defined reference to the operand at the given index.\n@see CodeUnit#addOperandReference(int, Address, RefType, SourceType)",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": ""
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOperandReferences",
      "comment": "Get the references for the operand index. If the operand type is a\n register, then the user defined references are returned; otherwise an\n array with the address for the operand value is returned.",
      "javadoc": "Get the references for the operand index. If the operand type is a\n register, then the user defined references are returned; otherwise an\n array with the address for the operand value is returned.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeOperandReference",
      "comment": "Remove a user defined reference to the operand at opIndex.",
      "javadoc": "Remove a user defined reference to the operand at opIndex.",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferencesFrom",
      "comment": "Get ALL reference FROM this code unit.",
      "javadoc": "Get ALL reference FROM this code unit.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference[]",
        "type_short": "ghidra.program.model.symbol.Reference[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setExternalReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMemoryReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validateOpIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setStackReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRegisterReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "reg",
          "type_long": "ghidra.program.model.lang.Register",
          "type_short": "Register",
          "comment": ""
        },
        {
          "name": "sourceType",
          "type_long": "ghidra.program.model.symbol.SourceType",
          "type_short": "SourceType",
          "comment": ""
        },
        {
          "name": "refType",
          "type_long": "ghidra.program.model.symbol.RefType",
          "type_short": "RefType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPrimaryReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Reference",
        "type_short": "Reference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPrimaryMemoryReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "ref",
          "type_long": "ghidra.program.model.symbol.Reference",
          "type_short": "Reference",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStackReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.StackReference",
        "type_short": "StackReference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeStackReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.ExternalReference",
        "type_short": "ExternalReference",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeExternalReference",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "opIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getReferenceIteratorTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.symbol.ReferenceIterator",
        "type_short": "ReferenceIterator",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
