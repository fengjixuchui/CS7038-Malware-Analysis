{
  "name": "SymbolInspector",
  "comment": "Class for coloring symbols.",
  "javadoc": "Class for coloring symbols.",
  "static": false,
  "implements": [
    "ghidra.framework.options.OptionsChangeListener"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "repaintComp",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.awt.Component",
      "type_short": "Component",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "optionsObject",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.options.ToolOptions",
      "type_short": "ToolOptions",
      "constant_value": null
    },
    {
      "name": "listing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Listing",
      "type_short": "Listing",
      "constant_value": null
    },
    {
      "name": "memory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "cache",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new symbol inspector\n It uses the tool to get the CATEGORY_BROWSER_DISPLAY options",
      "javadoc": "Constructs a new symbol inspector\n It uses the tool to get the CATEGORY_BROWSER_DISPLAY options\n@param serviceProvider a service provider for getting services\n@param repaintComp the component to repaint when the options change",
      "static": false,
      "params": [
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "a service provider for getting services"
        },
        {
          "name": "repaintComp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to repaint when the options change"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new symbol inspector",
      "javadoc": "Constructs a new symbol inspector\n@param options the options from which to get colors\n@param repaintComp the component to repaint when the options change",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": "the options from which to get colors"
        },
        {
          "name": "repaintComp",
          "type_long": "java.awt.Component",
          "type_short": "Component",
          "comment": "the component to repaint when the options change"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "optionsChanged",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.framework.options.ToolOptions",
          "type_short": "ToolOptions",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "oldValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "newValue",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setProgram",
      "comment": "Associates a program with this symbol inspector",
      "javadoc": "Associates a program with this symbol inspector\n@param p the program for inspecting symbols",
      "static": false,
      "params": [
        {
          "name": "p",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for inspecting symbols"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getProgram",
      "comment": "Returns the program in use by this inspector; may be null;",
      "javadoc": "Returns the program in use by this inspector; may be null;\n@return the program in use by this inspector; may be null;",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "the program in use by this inspector; may be null;"
      },
      "throws": []
    },
    {
      "name": "dispose",
      "comment": "Call this when you are done with this inspector and will not use it again. \n Cleans up listeners, etc.",
      "javadoc": "Call this when you are done with this inspector and will not use it again. \n Cleans up listeners, etc.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isBadReferenceSymbol",
      "comment": "Returns true if symbol is at a non-existent address",
      "javadoc": "Returns true if symbol is at a non-existent address\n@param s the symbol to check\n@return boolean true if symbol is bad",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if symbol is bad"
      },
      "throws": []
    },
    {
      "name": "isDataSymbol",
      "comment": "Returns true if the symbol is on a data item.",
      "javadoc": "Returns true if the symbol is on a data item.\n@param s the symbol to check\n@return boolean true if s is a data symbol",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if s is a data symbol"
      },
      "throws": []
    },
    {
      "name": "isDeadCodeSymbol",
      "comment": "Returns true if the symbol is on \"dead\" code",
      "javadoc": "Returns true if the symbol is on \"dead\" code\n@param s the symbol to check\n@return boolean true if the symbol is on dead code",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is on dead code"
      },
      "throws": []
    },
    {
      "name": "isEntryPointSymbol",
      "comment": "Checks if the given symbol is at an external entry point",
      "javadoc": "Checks if the given symbol is at an external entry point\n@param s the symbol to check\n@return boolean true if the symbol is at an external entry point address.",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is at an external entry point address."
      },
      "throws": []
    },
    {
      "name": "isFunctionSymbol",
      "comment": "Checks if the symbol is at a function",
      "javadoc": "Checks if the symbol is at a function\n@param s the symbol to check.\n@return boolean true if there is a function at the symbol\u0027s address.",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if there is a function at the symbol\u0027s address."
      },
      "throws": []
    },
    {
      "name": "isVariableSymbol",
      "comment": "Checks if the symbol is a function variable",
      "javadoc": "Checks if the symbol is a function variable\n@param s the symbol to check\n@return true if s is a function variable symbol",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if s is a function variable symbol"
      },
      "throws": []
    },
    {
      "name": "isGlobalSymbol",
      "comment": "Checks if the symbol is global or local",
      "javadoc": "Checks if the symbol is global or local\n@param s the symbol to check\n@return boolean true if the symbol is global, false if the symbol is\n local.",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is global, false if the symbol is\n local."
      },
      "throws": []
    },
    {
      "name": "isInstructionSymbol",
      "comment": "Checks if the symbol is at or inside an instruction",
      "javadoc": "Checks if the symbol is at or inside an instruction\n@param s the symbol to check\n@return boolean true if the symbol is on an instruction",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is on an instruction"
      },
      "throws": []
    },
    {
      "name": "isLocalSymbol",
      "comment": "Checks if the symbol is local",
      "javadoc": "Checks if the symbol is local\n@param s the symbol to check\n@return boolean true if the symbol is local, false if it is global",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is local, false if it is global"
      },
      "throws": []
    },
    {
      "name": "isNonPrimarySymbol",
      "comment": "Checks if the symbol is not a primary symbol",
      "javadoc": "Checks if the symbol is not a primary symbol\n@param s the symbol to check.\n@return boolean true if the symbol is non-primary",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is non-primary"
      },
      "throws": []
    },
    {
      "name": "isOffcutSymbol",
      "comment": "Checks if the symbol is offcut",
      "javadoc": "Checks if the symbol is offcut\n@param s the symbol to check\n@return boolean true if the symbol is offcut",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is offcut"
      },
      "throws": []
    },
    {
      "name": "isPrimarySymbol",
      "comment": "returns true if the symbol is primary",
      "javadoc": "returns true if the symbol is primary\n@param s the symbol to check\n@return boolean true if the symbol is primary",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is primary"
      },
      "throws": []
    },
    {
      "name": "isSubroutineSymbol",
      "comment": "Checks if the symbol is at the beginning of a subroutine.",
      "javadoc": "Checks if the symbol is at the beginning of a subroutine.\n@param s the symbol to check\n@return boolean true if the symbol is at the beginning of a subroutine.",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol to check"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "boolean true if the symbol is at the beginning of a subroutine."
      },
      "throws": []
    },
    {
      "name": "isExternalSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColorAndStyle",
      "comment": "Gets the color and style used to render the given symbol.  Calling this method is \n faster than calling #getColor(Symbol) and #getStyle(Symbol) \n separately.",
      "javadoc": "Gets the color and style used to render the given symbol.  Calling this method is \n faster than calling {@link #getColor(Symbol)} and {@link #getStyle(Symbol)} \n separately.\n@param s the symbol\n@return the color and style",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "the symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.ColorAndStyle",
        "type_short": "ColorAndStyle",
        "comment": "the color and style"
      },
      "throws": []
    },
    {
      "name": "getColor",
      "comment": "Get the color used to render the given symbol.",
      "javadoc": "Get the color used to render the given symbol.\n@param s symbol to inspect\n@return Color for the symbol",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "symbol to inspect"
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": "Color for the symbol"
      },
      "throws": []
    },
    {
      "name": "getStyle",
      "comment": "Get the style used to render the given symbol",
      "javadoc": "Get the style used to render the given symbol\n@param s symbol to inspect\n@return the style for the symbol",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "symbol to inspect"
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the style for the symbol"
      },
      "throws": []
    },
    {
      "name": "getScreenElement",
      "comment": "Get the ScreenElement corresponding to the type of the symbol",
      "javadoc": "Get the ScreenElement corresponding to the type of the symbol\n@param s symbol to inspect\n@return the screen element",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "symbol to inspect"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.options.ScreenElement",
        "type_short": "ScreenElement",
        "comment": "the screen element"
      },
      "throws": []
    },
    {
      "name": "getOffcutSymbolColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOffcutSymbolStyle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalScreenElement",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.viewer.options.ScreenElement",
        "type_short": "ScreenElement",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getExternalName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOptions",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.framework.options.ToolOptions",
        "type_short": "ToolOptions",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getColor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "se",
          "type_long": "ghidra.app.util.viewer.options.ScreenElement",
          "type_short": "ScreenElement",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.awt.Color",
        "type_short": "Color",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getStyle",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "se",
          "type_long": "ghidra.app.util.viewer.options.ScreenElement",
          "type_short": "ScreenElement",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
