{
  "name": "Recognizer",
  "comment": "NOTE:  ALL Recognizer CLASSES MUST END IN \"Recognizer\".  If not,\n the ClassSearcher will not find them.",
  "javadoc": "NOTE:  ALL Recognizer CLASSES MUST END IN \"Recognizer\".  If not,\n the ClassSearcher will not find them.",
  "static": false,
  "implements": [
    "ghidra.util.classfinder.ExtensionPoint"
  ],
  "fields": [],
  "methods": [
    {
      "name": "numberOfBytesRequired",
      "comment": "How many bytes (maximum) does this recognizer need to recognize its\n format?",
      "javadoc": "How many bytes (maximum) does this recognizer need to recognize its\n format?\n@return the maximum number of bytes needed to send to this recognizer in\n         the recognize(...) method",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the maximum number of bytes needed to send to this recognizer in\n         the recognize(...) method"
      },
      "throws": []
    },
    {
      "name": "recognize",
      "comment": "Ask the recognizer to recognize some bytes. Return a description String\n if recognized; otherwise, null. DO NOT MUNGE THE BYTES. Right now for\n efficiency\u0027s sake the array of bytes is just passed to each recognizer in\n turn. Abuse this and we will need to create copies, and everyone loses.",
      "javadoc": "Ask the recognizer to recognize some bytes. Return a description String\n if recognized; otherwise, null. DO NOT MUNGE THE BYTES. Right now for\n efficiency\u0027s sake the array of bytes is just passed to each recognizer in\n turn. Abuse this and we will need to create copies, and everyone loses.\n@param bytes the bytes to recognize\n@return a String description of the recognition, or null if it is not\n         recognized",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "the bytes to recognize"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a String description of the recognition, or null if it is not\n         recognized"
      },
      "throws": []
    },
    {
      "name": "getPriority",
      "comment": "Return the recognizer priority; for instance, a GZIP/TAR recognizer\n should have higher priority than just the GZIP recognizer (because the\n GZIP/TAR will unzip part of the payload and then test against the TAR\n recognizer...so every GZIP/TAR match will also match GZIP). Note that\n higher is more specific, which is opposite the convention used with the\n Loader hierarchy.",
      "javadoc": "Return the recognizer priority; for instance, a GZIP/TAR recognizer\n should have higher priority than just the GZIP recognizer (because the\n GZIP/TAR will unzip part of the payload and then test against the TAR\n recognizer...so every GZIP/TAR match will also match GZIP). Note that\n higher is more specific, which is opposite the convention used with the\n Loader hierarchy.\n@return the recognizer priority",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the recognizer priority"
      },
      "throws": []
    }
  ]
}
