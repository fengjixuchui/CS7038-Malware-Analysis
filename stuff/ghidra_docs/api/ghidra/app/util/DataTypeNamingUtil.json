{
  "name": "DataTypeNamingUtil",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setMangledAnonymousFunctionName",
      "comment": "Generate a simple mangled function definition name and apply it to the specified functionDefinition.",
      "javadoc": "Generate a simple mangled function definition name and apply it to the specified functionDefinition.\n@param functionDefinition function definition whose name should be set\n@param namePrefix prefix to be applied to generated name.  An underscore will separate this prefix from the \n remainder of the mangled name.  If null specified a prefix of \"_function\" will be used.\n@return name applied to functionDefinition\n@throws IllegalArgumentException if generated name contains unsupported characters",
      "static": true,
      "params": [
        {
          "name": "functionDefinition",
          "type_long": "ghidra.program.model.data.FunctionDefinitionDataType",
          "type_short": "FunctionDefinitionDataType",
          "comment": "function definition whose name should be set"
        },
        {
          "name": "namePrefix",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "prefix to be applied to generated name.  An underscore will separate this prefix from the \n remainder of the mangled name.  If null specified a prefix of \"_function\" will be used."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "name applied to functionDefinition"
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if generated name contains unsupported characters"
        }
      ]
    },
    {
      "name": "mangleDTName",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "s",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
