{
  "name": "MachoProgramBuilder",
  "comment": "Builds up a Mach-O Program by parsing the Mach-O headers.",
  "javadoc": "Builds up a Mach-O {@link Program} by parsing the Mach-O headers.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "BLOCK_SOURCE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Mach-O Loader\""
    },
    {
      "name": "machoHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
      "type_short": "MachHeader",
      "constant_value": null
    },
    {
      "name": "program",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Program",
      "type_short": "Program",
      "constant_value": null
    },
    {
      "name": "provider",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.ByteProvider",
      "type_short": "ByteProvider",
      "constant_value": null
    },
    {
      "name": "fileBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.mem.FileBytes",
      "type_short": "FileBytes",
      "constant_value": null
    },
    {
      "name": "log",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.importer.MessageLog",
      "type_short": "MessageLog",
      "constant_value": null
    },
    {
      "name": "monitor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.task.TaskMonitor",
      "type_short": "TaskMonitor",
      "constant_value": null
    },
    {
      "name": "memory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "listing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Listing",
      "type_short": "Listing",
      "constant_value": null
    },
    {
      "name": "space",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new MachoProgramBuilder based on the given information.",
      "javadoc": "Creates a new {@link MachoProgramBuilder} based on the given information.\n@param program The {@link Program} to build up.\n@param provider The {@link ByteProvider} that contains the Mach-O\u0027s bytes.\n@param fileBytes Where the Mach-O\u0027s bytes came from.\n@param log The log.\n@param monitor A cancelable task monitor.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The Program to build up."
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The ByteProvider that contains the Mach-O\u0027s bytes."
        },
        {
          "name": "fileBytes",
          "type_long": "ghidra.program.database.mem.FileBytes",
          "type_short": "FileBytes",
          "comment": "Where the Mach-O\u0027s bytes came from."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildProgram",
      "comment": "Builds up a Mach-O Program.",
      "javadoc": "Builds up a Mach-O {@link Program}.\n@param program The {@link Program} to build up.\n@param provider The {@link ByteProvider} that contains the Mach-O\u0027s bytes.\n@param fileBytes Where the Mach-O\u0027s bytes came from.\n@param log The log.\n@param monitor A cancelable task monitor.\n@throws Exception if a problem occurs.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The Program to build up."
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The ByteProvider that contains the Mach-O\u0027s bytes."
        },
        {
          "name": "fileBytes",
          "type_long": "ghidra.program.database.mem.FileBytes",
          "type_short": "FileBytes",
          "comment": "Where the Mach-O\u0027s bytes came from."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if a problem occurs."
        }
      ]
    },
    {
      "name": "build",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "doRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "setImageBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processEncryption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processEntryPoint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processMemoryBlocks",
      "comment": "Creates memory blocks for the given header.",
      "javadoc": "Creates memory blocks for the given header.\n@param header The Mach-O header to process for memory block creation.\n@param source A name that represents where the memory blocks came from.\n@param processSections True to split segments into their sections.\n@param allowZeroAddr True if memory blocks at address 0 should be processed; otherwise, \n   false.\n@throws Exception If there was a problem processing the memory blocks.",
      "static": false,
      "params": [
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
          "type_short": "MachHeader",
          "comment": "The Mach-O header to process for memory block creation."
        },
        {
          "name": "source",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "A name that represents where the memory blocks came from."
        },
        {
          "name": "processSections",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True to split segments into their sections."
        },
        {
          "name": "allowZeroAddr",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if memory blocks at address 0 should be processed; otherwise, \n   false."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "If there was a problem processing the memory blocks."
        }
      ]
    },
    {
      "name": "createMemoryBlock",
      "comment": "Creates a memory with the provided attributes.  The block we wish to create may reside inside\n an already-created block. If this is the case, we split the outer block(s) that encompass our\n desired new block. This is the nature of Mach-O segments and sections (sections are\n contained in segments).",
      "javadoc": "Creates a memory with the provided attributes.  The block we wish to create may reside inside\n an already-created block. If this is the case, we split the outer block(s) that encompass our\n desired new block. This is the nature of Mach-O segments and sections (sections are\n contained in segments).\n@param name The name of the new block.\n@param start The starting address of the new block.\n@param dataOffset The provider offset of the new block.\n@param dataLength The length of the new block.\n@param comment A comment for the new block.\n@param source The source name of the new block.\n@param r True if the new block has read-permissions; otherwise, false.\n@param w True if the new block has write-permissions; otherwise, false.\n@param x True if the new block has execute-permissions; otherwise, false.\n@param zeroFill True if the new block is zero-filled; otherwise, false.  Newly created\n   zero-filled blocks will be uninitialized to safe space.\n@return The newly created (or split) memory block, or null if it failed to be created.\n@throws Exception If there was a problem creating the new memory block.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the new block."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The starting address of the new block."
        },
        {
          "name": "dataOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "The provider offset of the new block."
        },
        {
          "name": "dataLength",
          "type_long": "long",
          "type_short": "long",
          "comment": "The length of the new block."
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "A comment for the new block."
        },
        {
          "name": "source",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The source name of the new block."
        },
        {
          "name": "r",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the new block has read-permissions; otherwise, false."
        },
        {
          "name": "w",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the new block has write-permissions; otherwise, false."
        },
        {
          "name": "x",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the new block has execute-permissions; otherwise, false."
        },
        {
          "name": "zeroFill",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if the new block is zero-filled; otherwise, false.  Newly created\n   zero-filled blocks will be uninitialized to safe space."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": "The newly created (or split) memory block, or null if it failed to be created."
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "If there was a problem creating the new memory block."
        }
      ]
    },
    {
      "name": "processUnsupportedLoadCommands",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processSymbolTables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processIndirectSymbols",
      "comment": "The indirect symbols need to be applied across the IMPORT segment. The\n individual section do not really matter except the number of bytes\n between each symbol varies based on section.",
      "javadoc": "The indirect symbols need to be applied across the IMPORT segment. The\n individual section do not really matter except the number of bytes\n between each symbol varies based on section.\n@throws Exception if there is a problem",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if there is a problem"
        }
      ]
    },
    {
      "name": "setRelocatableProperty",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processLibraries",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processProgramDescription",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "renameObjMsgSendRtpSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processUndefinedSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processAbsoluteSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processDyldInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "doClassic",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupHeaders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "header",
          "type_long": "ghidra.app.util.bin.format.macho.MachHeader",
          "type_short": "MachHeader",
          "comment": ""
        },
        {
          "name": "headerAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "setupHeaderAddr",
      "comment": "Sets up the MachHeader in memory and returns its address.  If the header was not \n intended to reside in memory (like for Mach-O object files}, then this method will create an \n area in the \"OTHER\" address space for the header to live in.",
      "javadoc": "Sets up the {@link MachHeader} in memory and returns its address.  If the header was not \n intended to reside in memory (like for Mach-O object files}, then this method will create an \n area in the \"OTHER\" address space for the header to live in.\n@param segments A {@link Collection} of {@link SegmentCommand Mach-O segments}\n@return The {@link Address} of {@link MachHeader} in memory",
      "static": false,
      "params": [
        {
          "name": "segments",
          "type_long": "java.util.Collection\u003cghidra.app.util.bin.format.macho.commands.SegmentCommand\u003e",
          "type_short": "Collection",
          "comment": "A Collection of SegmentCommand"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "The Address of MachHeader in memory"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        }
      ]
    },
    {
      "name": "markupSections",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "processProgramVars",
      "comment": "See crt.c from opensource.apple.com",
      "javadoc": "See crt.c from opensource.apple.com",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadSectionRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleRelocationError",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadExternalRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadLocalRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getRelocationBaseAddress",
      "comment": "r_address is set to the offset from the vmaddr of the first LC_SEGMENT\n command. For MH_SPLIT_SEGS images, r_address is set to the the offset\n from the vmaddr of the first read-write LC_SEGMENT command.",
      "javadoc": "r_address is set to the offset from the vmaddr of the first LC_SEGMENT\n command. For MH_SPLIT_SEGS images, r_address is set to the the offset\n from the vmaddr of the first read-write LC_SEGMENT command.\n@return The relocation base address.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "The relocation base address."
      },
      "throws": []
    },
    {
      "name": "loadRelocation",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.macho.RelocationInfo",
          "type_short": "RelocationInfo",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addLibrary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "library",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMemoryBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.macho.Section",
          "type_short": "Section",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "block",
          "type_long": "ghidra.program.model.mem.MemoryBlock",
          "type_short": "MemoryBlock",
          "comment": ""
        },
        {
          "name": "datatype",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "fixupThumbPointers",
      "comment": "To indicate a pointer to THUMB code, the compiler generates an address\n that is 1 more than the actual destination. For example, a pointer to\n THUMB code at 0x1000 would be generated as 0x1001. We detect this case\n and correct the pointer reference so that Ghidra will disassemble\n correctly.\n\n We also need to set the TMode bit!",
      "javadoc": "To indicate a pointer to THUMB code, the compiler generates an address\n that is 1 more than the actual destination. For example, a pointer to\n THUMB code at 0x1000 would be generated as 0x1001. We detect this case\n and correct the pointer reference so that Ghidra will disassemble\n correctly.\n\n We also need to set the TMode bit!\n@param address the address\n@throws AddressOverflowException if there was a problem",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": "if there was a problem"
        }
      ]
    },
    {
      "name": "markAsThumb",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.listing.ContextChangeException",
          "type_short": "ContextChangeException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processLazyPointerSection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "set",
          "type_long": "ghidra.program.model.address.AddressSetView",
          "type_short": "AddressSetView",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNamespaceForSection",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.macho.Section",
          "type_short": "Section",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createNamespace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "namespaceName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Namespace",
        "type_short": "Namespace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateValidName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSectionsWithTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sectionTypes",
          "type_long": "int[]",
          "type_short": "int[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.Section\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createOneByteFunction",
      "comment": "create a one-byte function, so that when the code is analyzed,\n it will be disassembled, and the function created with the correct body.",
      "javadoc": "create a one-byte function, so that when the code is analyzed,\n it will be disassembled, and the function created with the correct body.\n@param name the name of the function\n@param address location to create the function",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the function"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "location to create the function"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getOriginalRelocationBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relocation",
          "type_long": "ghidra.app.util.bin.format.macho.RelocationInfo",
          "type_short": "RelocationInfo",
          "comment": ""
        },
        {
          "name": "relocationAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    }
  ]
}
