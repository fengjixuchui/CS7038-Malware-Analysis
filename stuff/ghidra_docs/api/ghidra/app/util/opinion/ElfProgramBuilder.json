{
  "name": "ElfProgramBuilder",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [
    "ghidra.app.util.bin.format.elf.ElfLoadHelper"
  ],
  "extends": "ghidra.app.util.opinion.MemorySectionResolver",
  "fields": [
    {
      "name": "BLOCK_SOURCE_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Elf Loader\""
    },
    {
      "name": "SEGMENT_NAME_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"segment_\""
    },
    {
      "name": "UNALLOCATED_NAME_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"unallocated_\""
    },
    {
      "name": "ELF_HEADER_BLOCK_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"_elfHeader\""
    },
    {
      "name": "ELF_PROGRAM_HEADERS_BLOCK_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"_elfProgramHeaders\""
    },
    {
      "name": "ELF_SECTION_HEADERS_BLOCK_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"_elfSectionHeaders\""
    },
    {
      "name": "DISCARDABLE_SEGMENT_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "255"
    },
    {
      "name": "options",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "dataImageBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Long",
      "type_short": "Long",
      "constant_value": null
    },
    {
      "name": "log",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.importer.MessageLog",
      "type_short": "MessageLog",
      "constant_value": null
    },
    {
      "name": "elf",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
      "type_short": "ElfHeader",
      "constant_value": null
    },
    {
      "name": "fileBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.database.mem.FileBytes",
      "type_short": "FileBytes",
      "constant_value": null
    },
    {
      "name": "listing",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.listing.Listing",
      "type_short": "Listing",
      "constant_value": null
    },
    {
      "name": "memory",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.mem.Memory",
      "type_short": "Memory",
      "constant_value": null
    },
    {
      "name": "symbolMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cghidra.app.util.bin.format.elf.ElfSymbol,ghidra.program.model.address.Address\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "AVAILABLE_MEMORY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.Integer",
      "type_short": "Integer",
      "constant_value": null
    },
    {
      "name": "ALLOCATED_MEMORY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.Integer",
      "type_short": "Integer",
      "constant_value": null
    },
    {
      "name": "allocatedRegions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSet",
      "type_short": "AddressSet",
      "constant_value": null
    },
    {
      "name": "externalBlockLimits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "lastExternalBlockEntryAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "nextExternalBlockEntryAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "elf",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getElfHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
        "type_short": "ElfHeader",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadElf",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "elf",
          "type_long": "ghidra.app.util.bin.format.elf.ElfHeader",
          "type_short": "ElfHeader",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "load",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "adjustSegmentAndSectionFileAllocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isZeroFilledFileRegion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "byteProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "isZeroedArray",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "bytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "len",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isDiscardableFillerSegment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "loadable",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": ""
        },
        {
          "name": "blockName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getLog",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.importer.MessageLog",
        "type_short": "MessageLog",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "log",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "msg",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "log",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "t",
          "type_long": "java.lang.Throwable",
          "type_short": "Throwable",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setImageBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getImageDataBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addProgramProperties",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMarkupMemoryRangeConstraint",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processGNU",
      "comment": "Processes the GNU version section.",
      "javadoc": "Processes the GNU version section.\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processGNU_readOnly",
      "comment": "Adjust GNU read-only segments following relocations (PT_GNU_RELRO).",
      "javadoc": "Adjust GNU read-only segments following relocations (PT_GNU_RELRO).",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processEntryPoints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createDynamicEntryPoints",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dynamicEntryType",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
          "type_short": "ElfDynamicType",
          "comment": ""
        },
        {
          "name": "entryArraySizeType",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamicType",
          "type_short": "ElfDynamicType",
          "comment": ""
        },
        {
          "name": "baseName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createEntryFunction",
      "comment": "Create an entry point function.\n Note: entries in the dynamic table appear to have any pre-link adjustment already applied.",
      "javadoc": "Create an entry point function.\n Note: entries in the dynamic table appear to have any pre-link adjustment already applied.\n@param name\n@param entryAddr function address (adjusted for pre-linking).\n@param monitor\n@return function address",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "entryAddr",
          "type_long": "long",
          "type_short": "long",
          "comment": "function address (adjusted for pre-linking)."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "function address"
      },
      "throws": []
    },
    {
      "name": "getMessage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "e",
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupInterpreter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processImports",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processRelocationTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relocationTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable",
          "type_short": "ElfRelocationTable",
          "comment": ""
        },
        {
          "name": "context",
          "type_long": "ghidra.app.util.bin.format.elf.relocation.ElfRelocationContext",
          "type_short": "ElfRelocationContext",
          "comment": ""
        },
        {
          "name": "relocationSpace",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        },
        {
          "name": "baseWordOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getOriginalValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "signExtend",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "addElfHeaderReferenceMarkup",
      "comment": "Add reference to previously applied header structure (assumes markupElfHeader previously called)",
      "javadoc": "Add reference to previously applied header structure (assumes markupElfHeader previously called)\n@param componentName\n@param refAddr",
      "static": false,
      "params": [
        {
          "name": "componentOrdinal",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "refAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupElfHeader",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupProgramHeaders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupSectionHeaders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupRelocationTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "relocTableAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "relocTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfRelocationTable",
          "type_short": "ElfRelocationTable",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultAddressSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDefaultDataSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getConstantSpace",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocateUndefinedSymbolData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataAllocationMap",
          "type_long": "java.util.HashMap\u003cghidra.program.model.address.Address,java.lang.Integer\u003e",
          "type_short": "HashMap",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocateLinkageBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "alignment",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "purpose",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNextExternalBlockEntryAddress",
      "comment": "Allocate the next EXTERNAL block entry location based upon the specified size.",
      "javadoc": "Allocate the next EXTERNAL block entry location based upon the specified size.\n@param entrySize entry size\n@return Address of EXTERNAL block entry or null if unable to allocate.",
      "static": false,
      "params": [
        {
          "name": "entrySize",
          "type_long": "int",
          "type_short": "int",
          "comment": "entry size"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "Address of EXTERNAL block entry or null if unable to allocate."
      },
      "throws": []
    },
    {
      "name": "createExternalBlock",
      "comment": "Create EXTERNAL memory block based upon #externalBlockLimits and\n #lastExternalBlockEntryAddress.",
      "javadoc": "Create EXTERNAL memory block based upon {@link #externalBlockLimits} and\n {@link #lastExternalBlockEntryAddress}.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processSymbolTables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbols",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
          "type_short": "ghidra.app.util.bin.format.elf.ElfSymbol[]",
          "comment": ""
        },
        {
          "name": "dataAllocationMap",
          "type_long": "java.util.HashMap\u003cghidra.program.model.address.Address,java.lang.Integer\u003e",
          "type_short": "HashMap",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "calculateSymbolAddress",
      "comment": "Calculate the load address associated with a specified elfSymbol.",
      "javadoc": "Calculate the load address associated with a specified elfSymbol.\n@param elfSymbol ELF symbol\n@return symbol address or null if symbol not supported and address not determined,\n or {@link Address#NO_ADDRESS} if symbol is external and should be allocated to the EXTERNAL block.",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "ELF symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "symbol address or null if symbol not supported and address not determined,\n or Address#NO_ADDRESS if symbol is external and should be allocated to the EXTERNAL block."
      },
      "throws": []
    },
    {
      "name": "findMemoryRegister",
      "comment": "Find memory register with matching name (ignoring leading and trailing underscore chars).",
      "javadoc": "Find memory register with matching name (ignoring leading and trailing underscore chars).\n@param elfSymbol ELF symbol\n@return register address if found or null",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "ELF symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "register address if found or null"
      },
      "throws": []
    },
    {
      "name": "getMemoryRegister",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "value",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "allocateExternalSymbol",
      "comment": "Allocate external symbol storage within what will become the EXTERNAL memory block.",
      "javadoc": "Allocate external symbol storage within what will become the EXTERNAL memory block.\n@param elfSymbol external ELF symbol\n@return assigned EXTERNAL block address\n@throws AddressOutOfBoundsException if unable to allocate EXTERNAL block entry",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "external ELF symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "assigned EXTERNAL block address"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": "if unable to allocate EXTERNAL block entry"
        }
      ]
    },
    {
      "name": "processDuplicateExternal",
      "comment": "Determine if an external ELF symbol has already been established with the\n same name and re-use it.",
      "javadoc": "Determine if an external ELF symbol has already been established with the\n same name and re-use it.\n@param elfSymbol external ELF symbol\n@return true if processed as a duplicate external symbol and no additional \n processing is required, else false",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "external ELF symbol"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if processed as a duplicate external symbol and no additional \n processing is required, else false"
      },
      "throws": []
    },
    {
      "name": "processVersionedExternal",
      "comment": "Process ELF symbol if it has a versioned name.  Attempt to establish as \n comment on associated external symbol.",
      "javadoc": "Process ELF symbol if it has a versioned name.  Attempt to establish as \n comment on associated external symbol.\n@param elfSymbol external ELF symbol\n@return true if processed and no additional processing is required, else false",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": "external ELF symbol"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if processed and no additional processing is required, else false"
      },
      "throws": []
    },
    {
      "name": "findExternalBlockSymbol",
      "comment": "Find a specific named symbol within the fake EXTERNAL block.\n NOTE: It is assumed that ELF will never produced duplicate names.",
      "javadoc": "Find a specific named symbol within the fake EXTERNAL block.\n NOTE: It is assumed that ELF will never produced duplicate names.\n@param name symbol name\n@param extMin EXTERNAL block minimum address\n@param extMax EXTERNAL block maximum address\n@return matching symbol or null if not found",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "symbol name"
        },
        {
          "name": "extMin",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "EXTERNAL block minimum address"
        },
        {
          "name": "extMax",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "EXTERNAL block maximum address"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "matching symbol or null if not found"
      },
      "throws": []
    },
    {
      "name": "isSymbolInRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "s",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": ""
        },
        {
          "name": "min",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "max",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "evaluateElfSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "isFakeExternal",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setElfSymbolAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getElfSymbolAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "elfSymbol",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbol",
          "type_short": "ElfSymbol",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markAsCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createOneByteFunction",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "isEntry",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createExternalFunctionLinkage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "functionAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "indirectPointerAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Function",
        "type_short": "Function",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "removeOldSymbol",
      "comment": "When transitioning to an external thunk, remove the old symbol on the linkage pointer/thunk\n if it is the only symbol at that address.",
      "javadoc": "When transitioning to an external thunk, remove the old symbol on the linkage pointer/thunk\n if it is the only symbol at that address.\n@param address symbol address\n@param name symbol name\n@return true if symbol removed, else false",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "symbol address"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "symbol name"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if symbol removed, else false"
      },
      "throws": []
    },
    {
      "name": "createUndefinedData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupGnuBuildId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupGnuDebugLink",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupHashTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupGnuHashTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupSymbolTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "symbolTableAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "symbolTable",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSymbolTable",
          "type_short": "ElfSymbolTable",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markupDynamicTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDynamicMemoryReference",
      "comment": "Add memory reference to dynamic table value and return the referenced address\n specified by the value",
      "javadoc": "Add memory reference to dynamic table value and return the referenced address\n specified by the value\n@param elfDynamic\n@param valueData\n@param definedMemoryOnly\n@param label\n@return referenced address specified by the value\n@throws InvalidInputException",
      "static": false,
      "params": [
        {
          "name": "elfDynamic",
          "type_long": "ghidra.app.util.bin.format.elf.ElfDynamic",
          "type_short": "ElfDynamic",
          "comment": ""
        },
        {
          "name": "valueData",
          "type_long": "ghidra.program.model.listing.Data",
          "type_short": "Data",
          "comment": ""
        },
        {
          "name": "definedMemoryOnly",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "label",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "referenced address specified by the value"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processStringTables",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "markupStringTable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "tableBytesLength",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.data.DataTypeConflictException",
          "type_short": "DataTypeConflictException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDefaultAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addressableWordOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSegmentAddressSpace",
      "comment": "Get the load address space for a program segment.\n Non-allocated segments may return the OTHER space.",
      "javadoc": "Get the load address space for a program segment.\n Non-allocated segments may return the OTHER space.\n@param elfProgramHeader elf program segment header\n@return preferred load address space",
      "static": false,
      "params": [
        {
          "name": "elfProgramHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": "elf program segment header"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "preferred load address space"
      },
      "throws": []
    },
    {
      "name": "getSegmentLoadAddress",
      "comment": "Determine segment preferred physical load address (not overlay address).\n While this method can produce the intended load address, there is no guarantee that\n the segment data did not get bumped into an overlay area due to a conflict with\n another segment or section.",
      "javadoc": "Determine segment preferred physical load address (not overlay address).\n While this method can produce the intended load address, there is no guarantee that\n the segment data did not get bumped into an overlay area due to a conflict with\n another segment or section.\n@param elfProgramHeader\n@return segment load address",
      "static": false,
      "params": [
        {
          "name": "elfProgramHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "segment load address"
      },
      "throws": []
    },
    {
      "name": "getSectionAddressSpace",
      "comment": "Determine preferred section load address address space prior to load.\n Non-allocated sections may return the OTHER space or an existing OTHER \n overlay established by a program header.",
      "javadoc": "Determine preferred section load address address space prior to load.\n Non-allocated sections may return the OTHER space or an existing OTHER \n overlay established by a program header.\n@param elfSectionHeader\n@return section load address space",
      "static": false,
      "params": [
        {
          "name": "elfSectionHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "section load address space"
      },
      "throws": []
    },
    {
      "name": "getSectionLoadAddress",
      "comment": "Determine section\u0027s load address.",
      "javadoc": "Determine section\u0027s load address.\n@param elfSectionHeader\n@return section load address",
      "static": false,
      "params": [
        {
          "name": "elfSectionHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "section load address"
      },
      "throws": []
    },
    {
      "name": "findLoadAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "section",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": ""
        },
        {
          "name": "byteOffsetWithinSection",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findLoadAddress",
      "comment": "Locate an Elf file header/structure within loaded memory based upon its file offset.\n Preference is given to an allocated section over segments.\n This method assumes filter loads will not be employed for the referenced file\n location (e.g., ELF data structures).\n TODO: This could be a problem for dynamic",
      "javadoc": "Locate an Elf file header/structure within loaded memory based upon its file offset.\n Preference is given to an allocated section over segments.\n This method assumes filter loads will not be employed for the referenced file\n location (e.g., ELF data structures).\n TODO: This could be a problem for dynamic\n@param fileOffset data offset within file\n@param headerSize number of bytes required (minimum value of 1)\n@return load address or null if not loaded or load was possibly fragmented.",
      "static": false,
      "params": [
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "data offset within file"
        },
        {
          "name": "headerSize",
          "type_long": "long",
          "type_short": "long",
          "comment": "number of bytes required (minimum value of 1)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "load address or null if not loaded or load was possibly fragmented."
      },
      "throws": []
    },
    {
      "name": "expandProgramHeaderBlocks",
      "comment": "Expand/create PT_LOAD program header block regions which are zeroed\n - to the extent possible.  This should only be done when section headers are\n not present.",
      "javadoc": "Expand/create PT_LOAD program header block regions which are zeroed\n - to the extent possible.  This should only be done when section headers are\n not present.\n@param monitor\n@throws CancelledException",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "joinProgramTreeFragments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "block1End",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "block2Start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "processProgramHeaders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processProgramHeader",
      "comment": "Process the specified program header by ensuring that it has a suitable memory address assigned\n and added to the memory resolver.",
      "javadoc": "Process the specified program header by ensuring that it has a suitable memory address assigned\n and added to the memory resolver.\n@param elfProgramHeader ELF program header to be processed\n@param segmentNumber program header index number\n@throws AddressOutOfBoundsException if an invalid memory address is encountered",
      "static": false,
      "params": [
        {
          "name": "elfProgramHeader",
          "type_long": "ghidra.app.util.bin.format.elf.ElfProgramHeader",
          "type_short": "ElfProgramHeader",
          "comment": "ELF program header to be processed"
        },
        {
          "name": "segmentNumber",
          "type_long": "int",
          "type_short": "int",
          "comment": "program header index number"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": "if an invalid memory address is encountered"
        }
      ]
    },
    {
      "name": "getSectionComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "byteSize",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "addressableUnitSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "description",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "loaded",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getImageBaseWordAdjustmentOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getGOTValue",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Long",
        "type_short": "Long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeRelocationStartAddress",
      "comment": "Identify start address of relocation area.  Skip any sections with a non-zero address.\n When an image is relocatable generally all sections will have a zero address.  It is only\n when special sections are present (e.g., __ksymtab) that we may encounter sections with\n a non-zero address.",
      "javadoc": "Identify start address of relocation area.  Skip any sections with a non-zero address.\n When an image is relocatable generally all sections will have a zero address.  It is only\n when special sections are present (e.g., __ksymtab) that we may encounter sections with\n a non-zero address.\n@param monitor task monitor\n@return start of relocation area\n@throws CancelledException task cancelled",
      "static": false,
      "params": [
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": ""
        },
        {
          "name": "baseOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": "start of relocation area"
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "task cancelled"
        }
      ]
    },
    {
      "name": "processSectionHeaders",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processSectionHeader",
      "comment": "Process the specified section header by ensuring that it has a suitable memory address assigned\n and added to the memory resolver.",
      "javadoc": "Process the specified section header by ensuring that it has a suitable memory address assigned\n and added to the memory resolver.\n@param elfSectionToLoad ELF section header to be processed\n@param relocatableImageBaseProvider section address provider for relocatable ELF binaries.\n@throws AddressOutOfBoundsException if an invalid memory address is encountered",
      "static": false,
      "params": [
        {
          "name": "elfSectionToLoad",
          "type_long": "ghidra.app.util.bin.format.elf.ElfSectionHeader",
          "type_short": "ElfSectionHeader",
          "comment": "ELF section header to be processed"
        },
        {
          "name": "relocatableImageBaseProvider",
          "type_long": "ghidra.app.util.opinion.ElfProgramBuilder.RelocatableImageBaseProvider",
          "type_short": "RelocatableImageBaseProvider",
          "comment": "section address provider for relocatable ELF binaries."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.address.AddressOutOfBoundsException",
          "type_short": "AddressOutOfBoundsException",
          "comment": "if an invalid memory address is encountered"
        }
      ]
    },
    {
      "name": "pad",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createUndefined",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Data",
        "type_short": "Data",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.util.CodeUnitInsertionException",
          "type_short": "CodeUnitInsertionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "isPrimary",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "pinAbsolute",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "namespace",
          "type_long": "ghidra.program.model.symbol.Namespace",
          "type_short": "Namespace",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "checkPrimary",
      "comment": "check if new symbol needs to grab the primary label.\n Elf sometimes has multiple symbols at a location marking the type of instruction of data at the location.",
      "javadoc": "check if new symbol needs to grab the primary label.\n Elf sometimes has multiple symbols at a location marking the type of instruction of data at the location.\n@param sym - new symbol to be made primary (some exclusions apply)\n@return revised symbol",
      "static": false,
      "params": [
        {
          "name": "sym",
          "type_long": "ghidra.program.model.symbol.Symbol",
          "type_short": "Symbol",
          "comment": "- new symbol to be made primary (some exclusions apply)"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.symbol.Symbol",
        "type_short": "Symbol",
        "comment": "revised symbol"
      },
      "throws": []
    },
    {
      "name": "getInitializedBlockInputStream",
      "comment": "Get a suitable input stream for loading a memory block defined by a specified loadable.",
      "javadoc": "Get a suitable input stream for loading a memory block defined by a specified loadable.\n@param loadable Corresponding ElfSectionHeader or ElfProgramHeader for the memory block to be created.\n@param start memory load address\n@param fileOffset byte provider offset\n@param dataLength the in-memory data length in bytes (actual bytes read from dataInput may be more)\n@return input stream for loading memory block\n@throws IOException",
      "static": false,
      "params": [
        {
          "name": "loadable",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": "Corresponding ElfSectionHeader or ElfProgramHeader for the memory block to be created."
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "memory load address"
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "byte provider offset"
        },
        {
          "name": "dataLength",
          "type_long": "long",
          "type_short": "long",
          "comment": "the in-memory data length in bytes (actual bytes read from dataInput may be more)"
        }
      ],
      "return": {
        "type_long": "java.io.InputStream",
        "type_short": "InputStream",
        "comment": "input stream for loading memory block"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "formatFloat",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "float",
          "type_short": "float",
          "comment": ""
        },
        {
          "name": "maxDecimalPlaces",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkBlockLimit",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sectionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "dataLength",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "initialized",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createInitializedBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "loadable",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": ""
        },
        {
          "name": "isOverlay",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "dataLength",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "r",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "w",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "x",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createUninitializedBlock",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "loadable",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": ""
        },
        {
          "name": "isOverlay",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "start",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "dataLength",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "r",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "w",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "x",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.mem.MemoryBlock",
        "type_short": "MemoryBlock",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.program.model.address.AddressOverflowException",
          "type_short": "AddressOverflowException",
          "comment": ""
        }
      ]
    }
  ]
}
