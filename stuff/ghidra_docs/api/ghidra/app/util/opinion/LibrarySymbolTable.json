{
  "name": "LibrarySymbolTable",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "TIMESTAMP_FORMAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.text.SimpleDateFormat",
      "type_short": "SimpleDateFormat",
      "constant_value": null
    },
    {
      "name": "NONE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "LIBRARY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "EXPORTS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "ORDINAL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "tableName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "path",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "date",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "version",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "tempPurge",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "fowardLibrary",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "fowardSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "symMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.String,ghidra.app.util.opinion.LibraryExportedSymbol\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "exportList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.opinion.LibraryExportedSymbol\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "ordMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.HashMap\u003cjava.lang.Integer,ghidra.app.util.opinion.LibraryExportedSymbol\u003e",
      "type_short": "HashMap",
      "constant_value": null
    },
    {
      "name": "forwards",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Set\u003cjava.lang.String\u003e",
      "type_short": "Set",
      "constant_value": null
    },
    {
      "name": "ERROR_HANDLER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "org.xml.sax.ErrorHandler",
      "type_short": "ErrorHandler",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct an empty library symbol table",
      "javadoc": "Construct an empty library symbol table\n@param tableName symbol table name (generally same as associated library name)\n@param size the architecture size of the DLL (e.g., 32 or 64).",
      "static": false,
      "params": [
        {
          "name": "tableName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "symbol table name (generally same as associated library name)"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the architecture size of the DLL (e.g., 32 or 64)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct library symbol table from an existing symbol exports file in XML format",
      "javadoc": "Construct library symbol table from an existing symbol exports file in XML format\n@param libraryFile existing symbol exports file\n@param size the architecture size of the DLL (e.g., 32 or 64).\n@throws IOException thrown if file IO error occurs",
      "static": false,
      "params": [
        {
          "name": "libraryFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "existing symbol exports file"
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": "the architecture size of the DLL (e.g., 32 or 64)."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "thrown if file IO error occurs"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a library symbol table based upon a specified library in the \n form of a Program object.",
      "javadoc": "Construct a library symbol table based upon a specified library in the \n form of a {@link Program} object.\n@param library library program\n@param monitor task monitor\n@throws CancelledException thrown if task cancelled",
      "static": false,
      "params": [
        {
          "name": "library",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "library program"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "thrown if task cancelled"
        }
      ]
    },
    {
      "name": "getCacheKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCacheKey",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dllName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "pseudoDisassemble",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "library",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "addr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "applyOrdinalFile",
      "comment": "Parse a ordinal exports file produced by Microsoft DUMPBIN /EXPORTS DLL\n It is expected to start parsing lines following the table header containing the \u0027ordinal\u0027 header.\n Each ordinal mapping line is expected to have the format, starting with ordinal number and\n ending with symbol name:\n   ordinal other-column-data name\n The name column contains the symbol name followed by an optional demangled form.  If the name starts with \n [NONAME] this will be stripped.",
      "javadoc": "Parse a ordinal exports file produced by Microsoft DUMPBIN /EXPORTS \u0026lt;DLL\u0026gt;\n It is expected to start parsing lines following the table header containing the \u0027ordinal\u0027 header.\n Each ordinal mapping line is expected to have the format, starting with ordinal number and\n ending with symbol name:\n   \u0026lt;ordinal\u0026gt; \u0026lt;other-column-data\u0026gt; \u0026lt;name\u0026gt;\n The name column contains the symbol name followed by an optional demangled form.  If the name starts with \n [NONAME] this will be stripped.\n@param ordinalExportsFile file path to ordinal mapping file produced by DUMPBIN /EXPORTS\n@param addMissingOrdinals if true new entries will be created for ordinal mappings\n not already existing within this symbol table, otherwise only those which already\n exist will be updated with a name if specified by mapping file.",
      "static": false,
      "params": [
        {
          "name": "ordinalExportsFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "file path to ordinal mapping file produced by DUMPBIN /EXPORTS"
        },
        {
          "name": "addMissingOrdinals",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true new entries will be created for ordinal mappings\n not already existing within this symbol table, otherwise only those which already\n exist will be updated with a name if specified by mapping file."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "stripComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getForwards",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "Returns the symbol for the specified ordinal.",
      "javadoc": "Returns the symbol for the specified ordinal.\n@param ordinal the ordinal value of the desired symbol\n@return the symbol for the specified ordinal, or null if one does not\n         exist.",
      "static": false,
      "params": [
        {
          "name": "ordinal",
          "type_long": "int",
          "type_short": "int",
          "comment": "the ordinal value of the desired symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.opinion.LibraryExportedSymbol",
        "type_short": "LibraryExportedSymbol",
        "comment": "the symbol for the specified ordinal, or null if one does not\n         exist."
      },
      "throws": []
    },
    {
      "name": "getSymbol",
      "comment": "Returns the symbol for the specified name",
      "javadoc": "Returns the symbol for the specified name\n@param symbol the name of the desired symbol\n@return symbol map entry or null if not found",
      "static": false,
      "params": [
        {
          "name": "symbol",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the desired symbol"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.opinion.LibraryExportedSymbol",
        "type_short": "LibraryExportedSymbol",
        "comment": "symbol map entry or null if not found"
      },
      "throws": []
    },
    {
      "name": "getVersion",
      "comment": "Returns a string describing the version of this library. For example,\n \"5.100.2566\".",
      "javadoc": "Returns a string describing the version of this library. For example,\n \"5.100.2566\".\n@return a string describing the version of this library",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a string describing the version of this library"
      },
      "throws": []
    },
    {
      "name": "getPath",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDate",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "read",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "file",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "write",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "output",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "input",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "lversion",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "setVersion",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "version",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hasFileAndPathAndTimeStampMatch",
      "comment": "Check an existing exports file to verify that it corresponds to the\n specified libraryFile.",
      "javadoc": "Check an existing exports file to verify that it corresponds to the\n specified libraryFile.\n@param exportsFile existing exports file\n@param libraryFile library file\n@return true if exports file corresponds to library file\n@throws ParseException if timestamp fails to parse\n@throws SAXException if exports file has XML failure\n@throws IOException if unable to read exports file",
      "static": true,
      "params": [
        {
          "name": "exportsFile",
          "type_long": "generic.jar.ResourceFile",
          "type_short": "ResourceFile",
          "comment": "existing exports file"
        },
        {
          "name": "libraryFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "library file"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if exports file corresponds to library file"
      },
      "throws": [
        {
          "type_long": "java.text.ParseException",
          "type_short": "ParseException",
          "comment": "if timestamp fails to parse"
        },
        {
          "type_long": "org.xml.sax.SAXException",
          "type_short": "SAXException",
          "comment": "if exports file has XML failure"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if unable to read exports file"
        }
      ]
    }
  ]
}
