{
  "name": "MapLoader",
  "comment": "A Loader for processing Microsoft MAP files.\n \n Sample .map file section we parse to extract symbol information:\n \n   ...\n   ...\n   ...\n\n   Address         Publics by Value              Rva+Base               Lib:Object\n   \n  0000:00000000       ___safe_se_handler_table   0000000000000000     absolute\n  0000:00000000       ___safe_se_handler_count   0000000000000000     absolute\n  0000:00000000       __ImageBase                0000000140000000     linker-defined\n  0001:00000040       foo                        0000000140001040 f   foo.obj\n  0001:000000c0       bar                        00000001400010c0 f   foo.obj\n  \n  ...\n  ...\n  ...\n  ",
  "javadoc": "A {@link Loader} for processing Microsoft MAP files.\n \u003cp\u003e\n Sample .map file section we parse to extract symbol information:\n \u003cpre\u003e\n   ...\n   ...\n   ...\n\n   Address         Publics by Value              Rva+Base               Lib:Object\n   \n  0000:00000000       ___safe_se_handler_table   0000000000000000     \u0026lt;absolute\u0026gt;\n  0000:00000000       ___safe_se_handler_count   0000000000000000     \u0026lt;absolute\u0026gt;\n  0000:00000000       __ImageBase                0000000140000000     \u0026lt;linker-defined\u0026gt;\n  0001:00000040       foo                        0000000140001040 f   foo.obj\n  0001:000000c0       bar                        00000001400010c0 f   foo.obj\n  \n  ...\n  ...\n  ...\n  \u003c/pre\u003e",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.opinion.AbstractLibrarySupportLoader",
  "fields": [
    {
      "name": "MAP_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Program Mapfile (MAP)\""
    },
    {
      "name": "NO_MAGIC",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"0\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseExports",
      "comment": "Parses exported symbol information from the MAP file represented by the given provider.",
      "javadoc": "Parses exported symbol information from the MAP file represented by the given provider.\n@param provider The bytes representing a MAP file\n@param log An optional log to write to (could be null)\n@return A {@link List} of {@link MapExport}s representing exported symbol information\n@throws IOException If there was a problem parsing",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The bytes representing a MAP file"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "An optional log to write to (could be null)"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.opinion.MapLoader.MapExport\u003e",
        "type_short": "List",
        "comment": "A List of MapExports representing exported symbol information"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "If there was a problem parsing"
        }
      ]
    },
    {
      "name": "findSupportedLoadSpecs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.util.opinion.LoadSpec\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "load",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "supportsLoadIntoProgram",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
