{
  "name": "MemorySection",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "key",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
      "type_short": "MemoryLoadable",
      "constant_value": null
    },
    {
      "name": "isInitialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "fileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "length",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    },
    {
      "name": "isFragmentationOK",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "physicalAddrRange",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressRange",
      "type_short": "AddressRange",
      "constant_value": null
    },
    {
      "name": "sectionName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "isReadable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isWritable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "isExecute",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "comment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Create memory \"section\" definition.  Those sections defined within the OTHER address\n space will be treated as non-loaded data.  Section is always defined with its\n physcal address range (i.e., not overlay address range).",
      "javadoc": "Create memory \"section\" definition.  Those sections defined within the OTHER address\n space will be treated as non-loaded data.  Section is always defined with its\n physcal address range (i.e., not overlay address range).\n@param key the loadable section key which corresponds to this memory \"section\"\n@param isInitialized true if \"section\" will be initialized from a data source\n@param fileOffset data source offset (required if isInitialized is true)\n@param length number of bytes within this \"section\"\n@param physicalAddrRange physical address range of \"section\" (i.e., not overlay addresses)\n@param sectionName section name\n@param isReadable true if \"section\" has read privilege\n@param isWritable true if \"section\" has write privilege\n@param isExecute true if \"section\" has execute privilege\n@param comment section comment (used as basis for block comment)\n@param isFragmentationOK if true this memory section may be fragmented due to \n conflict/overlap with other memory sections of higher precedence.",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
          "type_short": "MemoryLoadable",
          "comment": "the loadable section key which corresponds to this memory \"section\""
        },
        {
          "name": "isInitialized",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if \"section\" will be initialized from a data source"
        },
        {
          "name": "fileOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "data source offset (required if isInitialized is true)"
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": "number of bytes within this \"section\""
        },
        {
          "name": "physicalAddrRange",
          "type_long": "ghidra.program.model.address.AddressRange",
          "type_short": "AddressRange",
          "comment": "physical address range of \"section\" (i.e., not overlay addresses)"
        },
        {
          "name": "sectionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "section name"
        },
        {
          "name": "isReadable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if \"section\" has read privilege"
        },
        {
          "name": "isWritable",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if \"section\" has write privilege"
        },
        {
          "name": "isExecute",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if \"section\" has execute privilege"
        },
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "section comment (used as basis for block comment)"
        },
        {
          "name": "isFragmentationOK",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true this memory section may be fragmented due to \n conflict/overlap with other memory sections of higher precedence."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getKey",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.bin.format.MemoryLoadable",
        "type_short": "MemoryLoadable",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInitialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getFileOffset",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNumberOfBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getPhysicalAddressRange",
      "comment": "Get the physical address range of the section\n (i.e., not an overlay address range)",
      "javadoc": "Get the physical address range of the section\n (i.e., not an overlay address range)\n@return physical address range of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressRange",
        "type_short": "AddressRange",
        "comment": "physical address range of the section"
      },
      "throws": []
    },
    {
      "name": "getMinPhysicalAddress",
      "comment": "Get the minimum physical address of the section\n (i.e., not an overlay address)",
      "javadoc": "Get the minimum physical address of the section\n (i.e., not an overlay address)\n@return minimum physical address of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "minimum physical address of the section"
      },
      "throws": []
    },
    {
      "name": "getMaxPhysicalAddress",
      "comment": "Get the maximum physical address of the section\n (i.e., not an overlay address)",
      "javadoc": "Get the maximum physical address of the section\n (i.e., not an overlay address)\n@return maximum physical address of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "maximum physical address of the section"
      },
      "throws": []
    },
    {
      "name": "getPhysicalAddressSpace",
      "comment": "Get the physical address space of the section\n (i.e., not an overlay address space)",
      "javadoc": "Get the physical address space of the section\n (i.e., not an overlay address space)\n@return physical address space of the section",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "physical address space of the section"
      },
      "throws": []
    },
    {
      "name": "getSectionName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isLoaded",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isReadable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isWritable",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isExecute",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getComment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
