{
  "name": "AbstractProgramLoader",
  "comment": "An abstract Loader that provides a framework to conveniently load Programs.\n Subclasses are responsible for the actual load.\n \n This Loader provides a couple processor-related options, as all Programs will\n have a processor associated with them.",
  "javadoc": "An abstract {@link Loader} that provides a framework to conveniently load {@link Program}s.\n Subclasses are responsible for the actual load.\n \u003cp\u003e\n This {@link Loader} provides a couple processor-related options, as all {@link Program}s will\n have a processor associated with them.",
  "static": false,
  "implements": [
    "ghidra.app.util.opinion.Loader"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "APPLY_LABELS_OPTION_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Apply Processor Defined Labels\""
    },
    {
      "name": "ANCHOR_LABELS_OPTION_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Anchor Processor Defined Labels\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "loadProgram",
      "comment": "Loads program bytes in a particular format as a new Program. Multiple\n Programs may end up getting created, depending on the nature of the format.",
      "javadoc": "Loads program bytes in a particular format as a new {@link Program}. Multiple\n {@link Program}s may end up getting created, depending on the nature of the format.\n@param provider The bytes to load.\n@param programName The name of the {@link Program} that\u0027s being loaded.\n@param programFolder The {@link DomainFolder} where the loaded thing should be saved.  Could\n   be null if the thing should not be pre-saved.\n@param loadSpec The {@link LoadSpec} to use during load.\n@param options The load options.\n@param log The message log.\n@param consumer A consumer object for {@link Program}s generated.\n@param monitor A cancelable task monitor.\n@return A list of loaded {@link Program}s (element 0 corresponds to primary loaded\n   {@link Program}).\n@throws IOException if there was an IO-related problem loading.\n@throws CancelledException if the user cancelled the load.",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The bytes to load."
        },
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the Program that\u0027s being loaded."
        },
        {
          "name": "programFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "The DomainFolder where the loaded thing should be saved.  Could\n   be null if the thing should not be pre-saved."
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": "The LoadSpec to use during load."
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": "The load options."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The message log."
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "A consumer object for Programs generated."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.listing.Program\u003e",
        "type_short": "List",
        "comment": "A list of loaded Programs (element 0 corresponds to primary loaded\n   Program)."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related problem loading."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the load."
        }
      ]
    },
    {
      "name": "loadProgramInto",
      "comment": "Loads program bytes into the specified Program.  This method will not create any new\n Programs.  It is only for adding to an existing Program.\n \n NOTE: The loading that occurs in this method will automatically be done in a transaction.",
      "javadoc": "Loads program bytes into the specified {@link Program}.  This method will not create any new\n {@link Program}s.  It is only for adding to an existing {@link Program}.\n \u003cp\u003e\n NOTE: The loading that occurs in this method will automatically be done in a transaction.\n@param provider The bytes to load into the {@link Program}.\n@param loadSpec The {@link LoadSpec} to use during load.\n@param options The load options.\n@param messageLog The message log.\n@param program The {@link Program} to load into.\n@param monitor A cancelable task monitor.\n@return True if the file was successfully loaded; otherwise, false.\n@throws IOException if there was an IO-related problem loading.\n@throws CancelledException if the user cancelled the load.",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The bytes to load into the Program."
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": "The LoadSpec to use during load."
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": "The load options."
        },
        {
          "name": "messageLog",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The message log."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The Program to load into."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "True if the file was successfully loaded; otherwise, false."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related problem loading."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the load."
        }
      ]
    },
    {
      "name": "load",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "messageLog",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.framework.model.DomainObject\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.VersionException",
          "type_short": "VersionException",
          "comment": ""
        }
      ]
    },
    {
      "name": "loadInto",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "messageLog",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDefaultOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "domainObject",
          "type_long": "ghidra.framework.model.DomainObject",
          "type_short": "DomainObject",
          "comment": ""
        },
        {
          "name": "isLoadIntoProgram",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validateOptions",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "postLoadProgramFixups",
      "comment": "This gets called after the given list of Programs is finished loading.  It provides\n subclasses an opportunity to do follow-on actions to the load.",
      "javadoc": "This gets called after the given list of {@link Program}s is finished loading.  It provides\n subclasses an opportunity to do follow-on actions to the load.\n@param loadedPrograms The {@link Program}s that got loaded.\n@param folder The folder the programs were loaded to.\n@param options The load options.\n@param messageLog The message log.\n@param monitor A cancelable task monitor.\n@throws IOException if there was an IO-related problem loading.\n@throws CancelledException if the user cancelled the load.",
      "static": false,
      "params": [
        {
          "name": "loadedPrograms",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Program\u003e",
          "type_short": "List",
          "comment": "The Programs that got loaded."
        },
        {
          "name": "folder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": "The folder the programs were loaded to."
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": "The load options."
        },
        {
          "name": "messageLog",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The message log."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "if the user cancelled the load."
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related problem loading."
        }
      ]
    },
    {
      "name": "shouldApplyProcessorLabelsByDefault",
      "comment": "Returns whether or not processor labels should be applied by default.  Most loaders will\n not need to override this method because they will not want the labels applied by default.",
      "javadoc": "Returns whether or not processor labels should be applied by default.  Most loaders will\n not need to override this method because they will not want the labels applied by default.\n@return Whether or not processor labels should be applied by default.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "Whether or not processor labels should be applied by default."
      },
      "throws": []
    },
    {
      "name": "generateBlockName",
      "comment": "Generates a block name.",
      "javadoc": "Generates a block name.\n@param program The {@link Program} for the block.\n@param isOverlay true if the block is an overlay; use \"ov\" in the name.\n@param space The {@link AddressSpace} for the block.\n@return The generated block name.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The Program for the block."
        },
        {
          "name": "isOverlay",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if the block is an overlay; use \"ov\" in the name."
        },
        {
          "name": "space",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "The AddressSpace for the block."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "The generated block name."
      },
      "throws": []
    },
    {
      "name": "createProgram",
      "comment": "Creates a Program with the specified attributes.",
      "javadoc": "Creates a {@link Program} with the specified attributes.\n@param provider The bytes that will make up the {@link Program}.\n@param programName The name of the {@link Program}.\n@param imageBase The image base address of the {@link Program}.\n@param executableFormatName The file format name of the {@link Program}.  Typically this will\n   be the {@link Loader} name.\n@param language The {@link Language} of the {@link Program}.\n@param compilerSpec The {@link CompilerSpec} of the {@link Program}.\n@param consumer A consumer object for the {@link Program} generated.\n@return The newly created {@link Program}.\n@throws IOException if there was an IO-related problem with creating the {@link Program}.",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The bytes that will make up the Program."
        },
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The name of the Program."
        },
        {
          "name": "imageBase",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The image base address of the Program."
        },
        {
          "name": "executableFormatName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "The file format name of the Program.  Typically this will\n   be the Loader name."
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "The Language of the Program."
        },
        {
          "name": "compilerSpec",
          "type_long": "ghidra.program.model.lang.CompilerSpec",
          "type_short": "CompilerSpec",
          "comment": "The CompilerSpec of the Program."
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "A consumer object for the Program generated."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.listing.Program",
        "type_short": "Program",
        "comment": "The newly created Program."
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there was an IO-related problem with creating the Program."
        }
      ]
    },
    {
      "name": "createDefaultMemoryBlocks",
      "comment": "Creates default memory blocks for the given Program.",
      "javadoc": "Creates default memory blocks for the given {@link Program}.\n@param program The {@link Program} to create default memory blocks for.\n@param language The {@link Program}s {@link Language}.\n@param log The log to use during memory block creation.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The Program to create default memory blocks for."
        },
        {
          "name": "language",
          "type_long": "ghidra.program.model.lang.Language",
          "type_short": "Language",
          "comment": "The Programs Language."
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log to use during memory block creation."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "markAsFunction",
      "comment": "Mark this address as a function by creating a one byte function.  The single byte body\n function is picked up by the function analyzer, disassembled, and the body fixed.\n Marking the function this way keeps disassembly and follow on analysis out of the loaders.",
      "javadoc": "Mark this address as a function by creating a one byte function.  The single byte body\n function is picked up by the function analyzer, disassembled, and the body fixed.\n Marking the function this way keeps disassembly and follow on analysis out of the loaders.\n@param program the program\n@param name name of function, null if name not known\n@param funcStart starting address of the function",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name of function, null if name not known"
        },
        {
          "name": "funcStart",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "starting address of the function"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLanguageService",
      "comment": "Gets the Loader\u0027s language service.\n \n The default behavior of this method is to return the DefaultLanguageService.",
      "javadoc": "Gets the {@link Loader}\u0027s language service.\n \u003cp\u003e\n The default behavior of this method is to return the {@link DefaultLanguageService}.\n@return The {@link Loader}\u0027s language service.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.lang.LanguageService",
        "type_short": "LanguageService",
        "comment": "The Loader\u0027s language service."
      },
      "throws": []
    },
    {
      "name": "release",
      "comment": "Releases the given consumer from each of the provided DomainObjects.",
      "javadoc": "Releases the given consumer from each of the provided {@link DomainObject}s.\n@param domainObjects A list of {@link DomainObject}s which are no longer being used.\n@param consumer The consumer that was marking the {@link DomainObject}s as being used.",
      "static": false,
      "params": [
        {
          "name": "domainObjects",
          "type_long": "java.util.List\u003c? extends ghidra.framework.model.DomainObject\u003e",
          "type_short": "List",
          "comment": "A list of DomainObjects which are no longer being used."
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "The consumer that was marking the DomainObjects as being used."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createProgramFile",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "programFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        },
        {
          "name": "programName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "messageLog",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": ""
        }
      ]
    },
    {
      "name": "applyProcessorLabels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "info",
          "type_long": "ghidra.program.model.util.AddressLabelInfo",
          "type_short": "AddressLabelInfo",
          "comment": ""
        },
        {
          "name": "anchorSymbols",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "computeBinaryMD5",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "computeBinarySHA256",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "shouldSetImageBase",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "prog",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "imageBase",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shouldApplyProcessorLabels",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shouldAnchorSymbols",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
