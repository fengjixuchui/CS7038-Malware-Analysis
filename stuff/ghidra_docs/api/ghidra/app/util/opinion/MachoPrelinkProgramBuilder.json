{
  "name": "MachoPrelinkProgramBuilder",
  "comment": "Builds up a PRELINK Mach-O Program by parsing the Mach-O headers.",
  "javadoc": "Builds up a PRELINK Mach-O {@link Program} by parsing the Mach-O headers.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.opinion.MachoProgramBuilder",
  "fields": [
    {
      "name": "prelinkList",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.prelink.PrelinkMap\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "shouldAddRelocationEntries",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new MachoPrelinkProgramBuilder based on the given information.",
      "javadoc": "Creates a new {@link MachoPrelinkProgramBuilder} based on the given information.\n@param program The {@link Program} to build up.\n@param provider The {@link ByteProvider} that contains the Mach-O\u0027s bytes.\n@param fileBytes Where the Mach-O\u0027s bytes came from.\n@param prelinkList Parsed {@link PrelinkMap PRELINK} information.\n@param shouldAddRelocationEntries true if relocation records should be created\n@param log The log.\n@param monitor A cancelable task monitor.",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The Program to build up."
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The ByteProvider that contains the Mach-O\u0027s bytes."
        },
        {
          "name": "fileBytes",
          "type_long": "ghidra.program.database.mem.FileBytes",
          "type_short": "FileBytes",
          "comment": "Where the Mach-O\u0027s bytes came from."
        },
        {
          "name": "prelinkList",
          "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.prelink.PrelinkMap\u003e",
          "type_short": "List",
          "comment": "Parsed PrelinkMap information."
        },
        {
          "name": "shouldAddRelocationEntries",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if relocation records should be created"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildProgram",
      "comment": "Builds up a PRELINK Mach-O Program.",
      "javadoc": "Builds up a PRELINK Mach-O {@link Program}.\n@param program The {@link Program} to build up.\n@param provider The {@link ByteProvider} that contains the Mach-O\u0027s bytes.\n@param fileBytes Where the Mach-O\u0027s bytes came from.\n@param prelinkList Parsed {@link PrelinkMap PRELINK} information.\n@param addRelocationEntries true if relocation records should be added\n@param log The log.\n@param monitor A cancelable task monitor.\n@throws Exception if a problem occurs.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "The Program to build up."
        },
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The ByteProvider that contains the Mach-O\u0027s bytes."
        },
        {
          "name": "fileBytes",
          "type_long": "ghidra.program.database.mem.FileBytes",
          "type_short": "FileBytes",
          "comment": "Where the Mach-O\u0027s bytes came from."
        },
        {
          "name": "prelinkList",
          "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.prelink.PrelinkMap\u003e",
          "type_short": "List",
          "comment": "Parsed PrelinkMap information."
        },
        {
          "name": "addRelocationEntries",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true if relocation records should be added"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log."
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": "if a problem occurs."
        }
      ]
    },
    {
      "name": "build",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "doRelocations",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "fixPreLinkAddresses",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processPreLinkMachoInfo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.util.bin.format.macho.MachException",
          "type_short": "MachException",
          "comment": ""
        }
      ]
    },
    {
      "name": "renameObjMsgSendRtpSymbol",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.DuplicateNameException",
          "type_short": "DuplicateNameException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    },
    {
      "name": "fixupChainedPointers",
      "comment": "Fixes up any chained pointers.  Relies on the __thread_starts section being present.",
      "javadoc": "Fixes up any chained pointers.  Relies on the __thread_starts section being present.\n@return A list of addresses where pointer fixes were performed.\n@throws MemoryAccessException if there was a problem reading/writing memory.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": "A list of addresses where pointer fixes were performed."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if there was a problem reading/writing memory."
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processSegmentPointerChain",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "chainHeader",
          "type_long": "ghidra.app.util.bin.format.macho.commands.DyldChainedFixupHeader",
          "type_short": "DyldChainedFixupHeader",
          "comment": ""
        },
        {
          "name": "chainStart",
          "type_long": "ghidra.app.util.bin.format.macho.commands.DyldChainedStartsInSegment",
          "type_short": "DyldChainedStartsInSegment",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processPointerChain",
      "comment": "Fixes up any chained pointers, starting at the given address.",
      "javadoc": "Fixes up any chained pointers, starting at the given address.\n@param chainHeader fixup header chains\n@param unchainedLocList list of locations that were unchained\n@param pointerFormat format of pointers within this chain\n@param page within data pages that has pointers to be unchained\n@param nextOff offset within the page that is the chain start\n@param auth_value_add value to be added to each chain pointer\n@throws MemoryAccessException IO problem reading file\n@throws CancelledException user cancels",
      "static": false,
      "params": [
        {
          "name": "chainHeader",
          "type_long": "ghidra.app.util.bin.format.macho.commands.DyldChainedFixupHeader",
          "type_short": "DyldChainedFixupHeader",
          "comment": "fixup header chains"
        },
        {
          "name": "unchainedLocList",
          "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
          "type_short": "List",
          "comment": "list of locations that were unchained"
        },
        {
          "name": "pointerFormat",
          "type_long": "ghidra.app.util.bin.format.macho.dyld.DyldChainedPtr.DyldChainType",
          "type_short": "DyldChainType",
          "comment": "format of pointers within this chain"
        },
        {
          "name": "page",
          "type_long": "long",
          "type_short": "long",
          "comment": "within data pages that has pointers to be unchained"
        },
        {
          "name": "nextOff",
          "type_long": "long",
          "type_short": "long",
          "comment": "offset within the page that is the chain start"
        },
        {
          "name": "auth_value_add",
          "type_long": "long",
          "type_short": "long",
          "comment": "value to be added to each chain pointer"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "IO problem reading file"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "user cancels"
        }
      ]
    },
    {
      "name": "addRelocationTableEntry",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "chainLoc",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "type",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "chainValue",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "origBytes",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": ""
        }
      ]
    },
    {
      "name": "processPointerChain",
      "comment": "Fixes up any chained pointers, starting at the given address.",
      "javadoc": "Fixes up any chained pointers, starting at the given address.\n@param chainStart The starting of address of the pointer chain to fix.\n@param nextOffSize The size of the next offset.\n@return A list of addresses where pointer fixes were performed.\n@throws MemoryAccessException if there was a problem reading/writing memory.",
      "static": false,
      "params": [
        {
          "name": "chainStart",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The starting of address of the pointer chain to fix."
        },
        {
          "name": "nextOffSize",
          "type_long": "long",
          "type_short": "long",
          "comment": "The size of the next offset."
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.program.model.address.Address\u003e",
        "type_short": "List",
        "comment": "A list of addresses where pointer fixes were performed."
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if there was a problem reading/writing memory."
        }
      ]
    },
    {
      "name": "fixupPointer",
      "comment": "Fixes up the pointer at the given address.",
      "javadoc": "Fixes up the pointer at the given address.\n@param pointerAddr The address of the pointer to fix.\n@param pointerValue The value at the address of the pointer to fix.\n@throws MemoryAccessException if there was a problem reading/writing memory.",
      "static": false,
      "params": [
        {
          "name": "pointerAddr",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "The address of the pointer to fix."
        },
        {
          "name": "pointerValue",
          "type_long": "long",
          "type_short": "long",
          "comment": "The value at the address of the pointer to fix."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if there was a problem reading/writing memory."
        }
      ]
    }
  ]
}
