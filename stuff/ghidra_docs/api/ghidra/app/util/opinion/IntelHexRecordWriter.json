{
  "name": "IntelHexRecordWriter",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "maxBytesPerLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dropExtraBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "startAddress",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.Address",
      "type_short": "Address",
      "constant_value": null
    },
    {
      "name": "oldSegment",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Long",
      "type_short": "Long",
      "constant_value": null
    },
    {
      "name": "bytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cjava.lang.Byte\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "isSegmented",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.Boolean",
      "type_short": "Boolean",
      "constant_value": null
    },
    {
      "name": "results",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.ArrayList\u003cghidra.app.util.opinion.IntelHexRecord\u003e",
      "type_short": "ArrayList",
      "constant_value": null
    },
    {
      "name": "done",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor",
      "javadoc": "Constructor\n@param maxBytesPerLine the maximum number of bytes to write per line in the hex output\n@param dropExtraBytes if true, only lines matching {@link #maxBytesPerLine} will be output; \n remaining bytes will be left out",
      "static": false,
      "params": [
        {
          "name": "maxBytesPerLine",
          "type_long": "int",
          "type_short": "int",
          "comment": "the maximum number of bytes to write per line in the hex output"
        },
        {
          "name": "dropExtraBytes",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true, only lines matching #maxBytesPerLine will be output; \n remaining bytes will be left out"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "byte",
          "type_short": "byte",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "emitData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "finish",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "entryPoint",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.opinion.IntelHexRecord\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    }
  ]
}
