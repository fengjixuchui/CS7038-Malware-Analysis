{
  "name": "SplitDyldCache",
  "comment": "Class to store a \"split\" DYLD Cache, which is split across several files (base file, .1, .2,\n .symbols, etc).",
  "javadoc": "Class to store a \"split\" DYLD Cache, which is split across several files (base file, .1, .2,\n .symbols, etc).",
  "static": true,
  "implements": [
    "java.io.Closeable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "providers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.ByteProvider\u003e",
      "type_short": "List",
      "constant_value": null
    },
    {
      "name": "headers",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.List\u003cghidra.app.util.bin.format.macho.dyld.DyldCacheHeader\u003e",
      "type_short": "List",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a new SplitDyldCache",
      "javadoc": "Creates a new {@link SplitDyldCache}\n@param baseProvider The {@link ByteProvider} of the \"base\" DYLD Cache file\n@param shouldProcessSymbols True if symbols should be processed; otherwise, false\n@param shouldCombineSplitFiles True if split DYLD Cache files should be automatically\n@param log The log\n@param monitor A cancelable task monitor\n@throws IOException If there was an IO-related issue with processing the split DYLD Cache\n@throws CancelledException If the user canceled the operation",
      "static": false,
      "params": [
        {
          "name": "baseProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The ByteProvider of the \"base\" DYLD Cache file"
        },
        {
          "name": "shouldProcessSymbols",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if symbols should be processed; otherwise, false"
        },
        {
          "name": "shouldCombineSplitFiles",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if split DYLD Cache files should be automatically"
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": "The log"
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": "A cancelable task monitor"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "If there was an IO-related issue with processing the split DYLD Cache"
        },
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": "If the user canceled the operation"
        }
      ]
    },
    {
      "name": "getProvider",
      "comment": "Gets the i\u0027th ByteProvider in the split DYLD Cache",
      "javadoc": "Gets the i\u0027th {@link ByteProvider} in the split DYLD Cache\n@param i The index of the {@link ByteProvider} to get\n@return The i\u0027th {@link ByteProvider} in the split DYLD Cache",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index of the ByteProvider to get"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.ByteProvider",
        "type_short": "ByteProvider",
        "comment": "The i\u0027th ByteProvider in the split DYLD Cache"
      },
      "throws": []
    },
    {
      "name": "getDyldCacheHeader",
      "comment": "Gets the i\u0027th DyldCacheHeader in the split DYLD Cache",
      "javadoc": "Gets the i\u0027th {@link DyldCacheHeader} in the split DYLD Cache\n@param i The index of the {@link DyldCacheHeader} to get\n@return The i\u0027th {@link DyldCacheHeader} in the split DYLD Cache",
      "static": false,
      "params": [
        {
          "name": "i",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index of the DyldCacheHeader to get"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.bin.format.macho.dyld.DyldCacheHeader",
        "type_short": "DyldCacheHeader",
        "comment": "The i\u0027th DyldCacheHeader in the split DYLD Cache"
      },
      "throws": []
    },
    {
      "name": "size",
      "comment": "Gets the number of split DYLD Cache files",
      "javadoc": "Gets the number of split DYLD Cache files\n@return The number of split DYLD Cache files",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "The number of split DYLD Cache files"
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getSplitDyldCacheFiles",
      "comment": "Gets a List of extra split DYLD Cache files to load, sorted by name (base \n DYLD Cache file not included)",
      "javadoc": "Gets a {@link List} of extra split DYLD Cache files to load, sorted by name (base \n DYLD Cache file not included)\n@param baseProvider The base {@link ByteProvider} that contains the DYLD Cache bytes\n@param shouldCombineSplitFiles True if split DYLD Cache files should be automatically \n   combined into one DYLD Cache; false if only the base file should be processed\n@return A {@link List} of extra split DYLD Cache files to load, sorted by name (base \n   DYLD Cache file not included).",
      "static": false,
      "params": [
        {
          "name": "baseProvider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "The base ByteProvider that contains the DYLD Cache bytes"
        },
        {
          "name": "shouldCombineSplitFiles",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "True if split DYLD Cache files should be automatically \n   combined into one DYLD Cache; false if only the base file should be processed"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.io.File\u003e",
        "type_short": "List",
        "comment": "A List of extra split DYLD Cache files to load, sorted by name (base \n   DYLD Cache file not included)."
      },
      "throws": []
    }
  ]
}
