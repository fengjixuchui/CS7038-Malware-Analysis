{
  "name": "MachoLoader",
  "comment": "A Loader for Mach-O files.",
  "javadoc": "A {@link Loader} for Mach-O files.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.opinion.AbstractLibrarySupportLoader",
  "fields": [
    {
      "name": "MACH_O_NAME",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Mac OS X Mach-O\""
    },
    {
      "name": "MIN_BYTE_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "4"
    },
    {
      "name": "ADD_RELOCATION_ENTRIES_OPTION_NAME",
      "comment": "Loader option to add relocation entries for each fixed chain pointer",
      "javadoc": "Loader option to add relocation entries for each fixed chain pointer",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Add relocation entries for fixed chain pointers\""
    },
    {
      "name": "ADD_RELOCATION_ENTRIES_OPTION_DEFAULT",
      "comment": "Default value for loader option add relocation entries",
      "javadoc": "Default value for loader option add relocation entries",
      "static": true,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": "true"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "findSupportedLoadSpecs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.Collection\u003cghidra.app.util.opinion.LoadSpec\u003e",
        "type_short": "Collection",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "load",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "shouldAddRelocationEntries",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "importLibrary",
      "comment": "Overrides the default implementation to account for Universal Binary (UBI) files. \n These must be specially parsed to find the internal file matching the current architecture.\n \n FatHeader is used to parse the file to determine if it is a\n UBI. If so, each file within the archive is run through the import process until one is\n found that is successful (meaning it matches the correct architecture). Only one file\n in the UBI will ever be imported. If the provided file is NOT a UBI, default \n import method will be invoked.",
      "javadoc": "Overrides the default implementation to account for Universal Binary (UBI) files. \n These must be specially parsed to find the internal file matching the current architecture.\n \u003cp\u003e\n {@link FatHeader} is used to parse the file to determine if it is a\n UBI. If so, each file within the archive is run through the import process until one is\n found that is successful (meaning it matches the correct architecture). Only one file\n in the UBI will ever be imported. If the provided file is NOT a UBI, default \n import method will be invoked.",
      "static": false,
      "params": [
        {
          "name": "libName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "libFolder",
          "type_long": "ghidra.framework.model.DomainFolder",
          "type_short": "DomainFolder",
          "comment": ""
        },
        {
          "name": "libFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": ""
        },
        {
          "name": "loadSpec",
          "type_long": "ghidra.app.util.opinion.LoadSpec",
          "type_short": "LoadSpec",
          "comment": ""
        },
        {
          "name": "options",
          "type_long": "java.util.List\u003cghidra.app.util.Option\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "log",
          "type_long": "ghidra.app.util.importer.MessageLog",
          "type_short": "MessageLog",
          "comment": ""
        },
        {
          "name": "consumer",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        },
        {
          "name": "unprocessedLibs",
          "type_long": "java.util.Set\u003cjava.lang.String\u003e",
          "type_short": "Set",
          "comment": ""
        },
        {
          "name": "programList",
          "type_long": "java.util.List\u003cghidra.program.model.listing.Program\u003e",
          "type_short": "List",
          "comment": ""
        },
        {
          "name": "monitor",
          "type_long": "ghidra.util.task.TaskMonitor",
          "type_short": "TaskMonitor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.CancelledException",
          "type_short": "CancelledException",
          "comment": ""
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
