{
  "name": "Token",
  "comment": "Describes the input token stream.",
  "javadoc": "Describes the input token stream.",
  "static": false,
  "implements": [
    "java.io.Serializable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "The version identifier for this Serializable class.\n Increment only if the serialized form of the\n class changes.",
      "javadoc": "The version identifier for this Serializable class.\n Increment only if the \u003ci\u003eserialized\u003c/i\u003e form of the\n class changes.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "kind",
      "comment": "An integer that describes the kind of this token.  This numbering\n system is determined by JavaCCParser, and a table of these numbers is\n stored in the file ...Constants.java.",
      "javadoc": "An integer that describes the kind of this token.  This numbering\n system is determined by JavaCCParser, and a table of these numbers is\n stored in the file ...Constants.java.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "beginLine",
      "comment": "The line number of the first character of this Token.",
      "javadoc": "The line number of the first character of this Token.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "beginColumn",
      "comment": "The column number of the first character of this Token.",
      "javadoc": "The column number of the first character of this Token.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "endLine",
      "comment": "The line number of the last character of this Token.",
      "javadoc": "The line number of the last character of this Token.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "endColumn",
      "comment": "The column number of the last character of this Token.",
      "javadoc": "The column number of the last character of this Token.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "image",
      "comment": "The string image of the token.",
      "javadoc": "The string image of the token.",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "next",
      "comment": "A reference to the next regular (non-special) token from the input\n stream.  If this is the last token from the input stream, or if the\n token manager has not read tokens beyond this one, this field is\n set to null.  This is true only if this token is also a regular\n token.  Otherwise, see below for a description of the contents of\n this field.",
      "javadoc": "A reference to the next regular (non-special) token from the input\n stream.  If this is the last token from the input stream, or if the\n token manager has not read tokens beyond this one, this field is\n set to null.  This is true only if this token is also a regular\n token.  Otherwise, see below for a description of the contents of\n this field.",
      "static": false,
      "type_long": "ghidra.app.util.cparser.C.Token",
      "type_short": "Token",
      "constant_value": null
    },
    {
      "name": "specialToken",
      "comment": "This field is used to access special tokens that occur prior to this\n token, but after the immediately preceding regular (non-special) token.\n If there are no such special tokens, this field is set to null.\n When there are more than one such special token, this field refers\n to the last of these special tokens, which in turn refers to the next\n previous special token through its specialToken field, and so on\n until the first special token (whose specialToken field is null).\n The next fields of special tokens refer to other special tokens that\n immediately follow it (without an intervening regular token).  If there\n is no such token, this field is null.",
      "javadoc": "This field is used to access special tokens that occur prior to this\n token, but after the immediately preceding regular (non-special) token.\n If there are no such special tokens, this field is set to null.\n When there are more than one such special token, this field refers\n to the last of these special tokens, which in turn refers to the next\n previous special token through its specialToken field, and so on\n until the first special token (whose specialToken field is null).\n The next fields of special tokens refer to other special tokens that\n immediately follow it (without an intervening regular token).  If there\n is no such token, this field is null.",
      "static": false,
      "type_long": "ghidra.app.util.cparser.C.Token",
      "type_short": "Token",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getValue",
      "comment": "An optional attribute value of the Token.\n Tokens which are not used as syntactic sugar will often contain\n meaningful values that will be used later on by the compiler or\n interpreter. This attribute value is often different from the image.\n Any subclass of Token that actually wants to return a non-null value can\n override this method as appropriate.",
      "javadoc": "An optional attribute value of the Token.\n Tokens which are not used as syntactic sugar will often contain\n meaningful values that will be used later on by the compiler or\n interpreter. This attribute value is often different from the image.\n Any subclass of Token that actually wants to return a non-null value can\n override this method as appropriate.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "No-argument constructor",
      "javadoc": "No-argument constructor",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new token for the specified Image.",
      "javadoc": "Constructs a new token for the specified Image.",
      "static": false,
      "params": [
        {
          "name": "kind",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a new token for the specified Image and Kind.",
      "javadoc": "Constructs a new token for the specified Image and Kind.",
      "static": false,
      "params": [
        {
          "name": "kind",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "image",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "Returns the image.",
      "javadoc": "Returns the image.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newToken",
      "comment": "Returns a new Token object, by default. However, if you want, you\n can create and return subclass objects based on the value of ofKind.\n Simply add the cases to the switch for all those special cases.\n For example, if you have a subclass of Token called IDToken that\n you want to create if ofKind is ID, simply add something like :\n\n    case MyParserConstants.ID : return new IDToken(ofKind, image);\n\n to the following switch statement. Then you can cast matchedToken\n variable to the appropriate type and use sit in your lexical actions.",
      "javadoc": "Returns a new Token object, by default. However, if you want, you\n can create and return subclass objects based on the value of ofKind.\n Simply add the cases to the switch for all those special cases.\n For example, if you have a subclass of Token called IDToken that\n you want to create if ofKind is ID, simply add something like :\n\n    case MyParserConstants.ID : return new IDToken(ofKind, image);\n\n to the following switch statement. Then you can cast matchedToken\n variable to the appropriate type and use sit in your lexical actions.",
      "static": true,
      "params": [
        {
          "name": "ofKind",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "image",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.cparser.C.Token",
        "type_short": "Token",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "newToken",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ofKind",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.cparser.C.Token",
        "type_short": "Token",
        "comment": ""
      },
      "throws": []
    }
  ]
}
