{
  "name": "CParserUtils",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "parseSignature",
      "comment": "Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).",
      "javadoc": "Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).\n@param serviceProvider the service provider used to access DataTypeManagers\n@param program the program against which data types will be resolved\n@param signatureText the signature to parse\n@return the data type that is created as a result of parsing; null if there was a problem\n@see #parseSignature(DataTypeManagerService, Program, String)\n@see #parseSignature(DataTypeManagerService, Program, String, boolean)",
      "static": true,
      "params": [
        {
          "name": "serviceProvider",
          "type_long": "ghidra.framework.plugintool.ServiceProvider",
          "type_short": "ServiceProvider",
          "comment": "the service provider used to access DataTypeManagers"
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program against which data types will be resolved"
        },
        {
          "name": "signatureText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the signature to parse"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FunctionDefinitionDataType",
        "type_short": "FunctionDefinitionDataType",
        "comment": "the data type that is created as a result of parsing; null if there was a problem"
      },
      "throws": []
    },
    {
      "name": "parseSignature",
      "comment": "Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).",
      "javadoc": "Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).\n@param service the service used to access DataTypeManagers or null to use only the program\u0027s\n data type manager.\n@param program the program against which data types will be resolved\n@param signatureText the signature to parse\n@return the data type that is created as a result of parsing; null if there was a problem\n@see #parseSignature(DataTypeManagerService, Program, String, boolean)",
      "static": true,
      "params": [
        {
          "name": "service",
          "type_long": "ghidra.app.services.DataTypeManagerService",
          "type_short": "DataTypeManagerService",
          "comment": "the service used to access DataTypeManagers or null to use only the program\u0027s\n data type manager."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program against which data types will be resolved"
        },
        {
          "name": "signatureText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the signature to parse"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FunctionDefinitionDataType",
        "type_short": "FunctionDefinitionDataType",
        "comment": "the data type that is created as a result of parsing; null if there was a problem"
      },
      "throws": []
    },
    {
      "name": "splitFunctionSignature",
      "comment": "Split function signature into three parts:\n [0]\u003d part before function name\n [1]\u003d function name\n [2]\u003d parameter body after function name",
      "javadoc": "Split function signature into three parts:\n [0]\u003d part before function name\n [1]\u003d function name\n [2]\u003d parameter body after function name\n@param signature\n@return parts array or null if split failed",
      "static": true,
      "params": [
        {
          "name": "signature",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": "parts array or null if split failed"
      },
      "throws": []
    },
    {
      "name": "getTempName",
      "comment": "Get a temporary name of a specified length (tttt....)",
      "javadoc": "Get a temporary name of a specified length (tttt....)\n@param length\n@return temporary name string",
      "static": true,
      "params": [
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "temporary name string"
      },
      "throws": []
    },
    {
      "name": "parseSignature",
      "comment": "Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).",
      "javadoc": "Parse the given function signature text.  Any exceptions will be handled herein\n by showing an error dialog (null is returned in that case).\n@param service the service used to access DataTypeManagers or null to use only the program\u0027s\n data type manager.\n@param program the program against which data types will be resolved\n@param signatureText the signature to parse\n@param handleExceptions true signals that this method should deal with exceptions, \n        showing error messages as necessary; false signals to throw any encountered\n        parsing exceptions.  This allows clients to perform exception handling that\n        better matches their workflow.\n@return the data type that is created as a result of parsing; null if there was a problem",
      "static": true,
      "params": [
        {
          "name": "service",
          "type_long": "ghidra.app.services.DataTypeManagerService",
          "type_short": "DataTypeManagerService",
          "comment": "the service used to access DataTypeManagers or null to use only the program\u0027s\n data type manager."
        },
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program against which data types will be resolved"
        },
        {
          "name": "signatureText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the signature to parse"
        },
        {
          "name": "handleExceptions",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true signals that this method should deal with exceptions, \n        showing error messages as necessary; false signals to throw any encountered\n        parsing exceptions.  This allows clients to perform exception handling that\n        better matches their workflow."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.FunctionDefinitionDataType",
        "type_short": "FunctionDefinitionDataType",
        "comment": "the data type that is created as a result of parsing; null if there was a problem"
      },
      "throws": [
        {
          "type_long": "ghidra.app.util.cparser.C.ParseException",
          "type_short": "ParseException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getDataTypeManagers",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "service",
          "type_long": "ghidra.app.services.DataTypeManagerService",
          "type_short": "DataTypeManagerService",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager[]",
        "type_short": "ghidra.program.model.data.DataTypeManager[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "handleParseProblem",
      "comment": "Given a throwable, attempt pull out the significant error parts to generate a \n user-friendly error message.",
      "javadoc": "Given a throwable, attempt pull out the significant error parts to generate a \n user-friendly error message.\n@param t the throwable to examine, originating from the {@link CParser}.\n@param functionString the full function signature text that was parsed by the parser.\n@return a user-friendly error message, or null if this class did not know how to \n         handle the given exception.",
      "static": true,
      "params": [
        {
          "name": "t",
          "type_long": "java.lang.Throwable",
          "type_short": "Throwable",
          "comment": "the throwable to examine, originating from the CParser."
        },
        {
          "name": "functionString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the full function signature text that was parsed by the parser."
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a user-friendly error message, or null if this class did not know how to \n         handle the given exception."
      },
      "throws": []
    },
    {
      "name": "generateTokenErrorMessage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "e",
          "type_long": "ghidra.app.util.cparser.C.TokenMgrError",
          "type_short": "TokenMgrError",
          "comment": ""
        },
        {
          "name": "functionString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTokenMgrErrorIndexOfInvalidText",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "functionString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getTokenMgrErrorIndexUsingErrorColumn",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateParseExceptionMessage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "pe",
          "type_long": "ghidra.app.util.cparser.C.ParseException",
          "type_short": "ParseException",
          "comment": ""
        },
        {
          "name": "functionString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "generateParsingExceptionMessage",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "errorMessage",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "errorIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "functionString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
