{
  "name": "TokenMgrError",
  "comment": "Token Manager Error.",
  "javadoc": "Token Manager Error.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Error",
  "fields": [
    {
      "name": "serialVersionUID",
      "comment": "The version identifier for this Serializable class.\n Increment only if the serialized form of the\n class changes.",
      "javadoc": "The version identifier for this Serializable class.\n Increment only if the \u003ci\u003eserialized\u003c/i\u003e form of the\n class changes.",
      "static": true,
      "type_long": "long",
      "type_short": "long",
      "constant_value": "1"
    },
    {
      "name": "LEXICAL_ERROR",
      "comment": "Lexical error occurred.",
      "javadoc": "Lexical error occurred.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "0"
    },
    {
      "name": "STATIC_LEXER_ERROR",
      "comment": "An attempt was made to create a second instance of a static token manager.",
      "javadoc": "An attempt was made to create a second instance of a static token manager.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    },
    {
      "name": "INVALID_LEXICAL_STATE",
      "comment": "Tried to change to an invalid lexical state.",
      "javadoc": "Tried to change to an invalid lexical state.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "2"
    },
    {
      "name": "LOOP_DETECTED",
      "comment": "Detected (and bailed out of) an infinite loop in the token manager.",
      "javadoc": "Detected (and bailed out of) an infinite loop in the token manager.",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "3"
    },
    {
      "name": "errorCode",
      "comment": "Indicates the reason why the exception is thrown. It will have\n one of the above 4 values.",
      "javadoc": "Indicates the reason why the exception is thrown. It will have\n one of the above 4 values.",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "addEscapes",
      "comment": "Replaces unprintable characters by their escaped (or unicode escaped)\n equivalents in the given string",
      "javadoc": "Replaces unprintable characters by their escaped (or unicode escaped)\n equivalents in the given string",
      "static": true,
      "params": [
        {
          "name": "str",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "LexicalError",
      "comment": "Returns a detailed message for the Error when it is thrown by the\n token manager to indicate a lexical error.\n Parameters :\n    EOFSeen     : indicates if EOF caused the lexical error\n    curLexState : lexical state in which this error occurred\n    errorLine   : line number when the error occurred\n    errorColumn : column number when the error occurred\n    errorAfter  : prefix that was seen before this error occurred\n    curchar     : the offending character\n Note: You can customize the lexical error message by modifying this method.",
      "javadoc": "Returns a detailed message for the Error when it is thrown by the\n token manager to indicate a lexical error.\n Parameters :\n    EOFSeen     : indicates if EOF caused the lexical error\n    curLexState : lexical state in which this error occurred\n    errorLine   : line number when the error occurred\n    errorColumn : column number when the error occurred\n    errorAfter  : prefix that was seen before this error occurred\n    curchar     : the offending character\n Note: You can customize the lexical error message by modifying this method.",
      "static": true,
      "params": [
        {
          "name": "EOFSeen",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "lexState",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "errorLine",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "errorColumn",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "errorAfter",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "curChar",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMessage",
      "comment": "You can also modify the body of this method to customize your error messages.\n For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not\n of end-users concern, so you can return something like :\n\n     \"Internal Error : Please file a bug report .... \"\n\n from this method for such cases in the release version of your parser.",
      "javadoc": "You can also modify the body of this method to customize your error messages.\n For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not\n of end-users concern, so you can return something like :\n\n     \"Internal Error : Please file a bug report .... \"\n\n from this method for such cases in the release version of your parser.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "No arg constructor.",
      "javadoc": "No arg constructor.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructor with message and reason.",
      "javadoc": "Constructor with message and reason.",
      "static": false,
      "params": [
        {
          "name": "message",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "reason",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Full Constructor.",
      "javadoc": "Full Constructor.",
      "static": false,
      "params": [
        {
          "name": "EOFSeen",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "lexState",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "errorLine",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "errorColumn",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "errorAfter",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "curChar",
          "type_long": "char",
          "type_short": "char",
          "comment": ""
        },
        {
          "name": "reason",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
