{
  "name": "HTMLDataTypeRepresentation",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "EMPTY_TAG",
      "comment": "HACK: for some reason when opening the HTML document with \u0027\u0027, all text until the\n next HTML tag is not displayed.  So, we put in a dummy tag and all is well.\n Java 1.5.0_12",
      "javadoc": "HACK: for some reason when opening the HTML document with \u0027\u0026#47;\u0027, all text until the\n next HTML tag is not displayed.  So, we put in a dummy tag and all is well.\n Java 1.5.0_12",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cI\u003e\u003c/I\u003e\""
    },
    {
      "name": "MAX_COMPONENTS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "50"
    },
    {
      "name": "MAX_CHARACTER_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "80"
    },
    {
      "name": "MAX_LINE_LENGTH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "240"
    },
    {
      "name": "HTML_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cHTML\u003e\""
    },
    {
      "name": "HTML_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/HTML\u003e\""
    },
    {
      "name": "HTML_SPACE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026nbsp;\""
    },
    {
      "name": "CHARACTER_SPACE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\" \""
    },
    {
      "name": "TAB",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "BR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cBR\u003e\""
    },
    {
      "name": "TABLE_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cTABLE\u003e\""
    },
    {
      "name": "TABLE_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/TABLE\u003e\""
    },
    {
      "name": "TR_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cTR\u003e\""
    },
    {
      "name": "TR_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/TR\u003e\""
    },
    {
      "name": "TD_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cTD ALIGN\u003dLEFT VALIGN\u003dTOP\u003e\""
    },
    {
      "name": "TD_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/TD\u003e\""
    },
    {
      "name": "TT_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cTT\u003e\""
    },
    {
      "name": "TT_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/TT\u003e\""
    },
    {
      "name": "INDENT_OPEN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003cDIV STYLE\u003d\u0027margin-left: 10px;\u0027\u003e\""
    },
    {
      "name": "INDENT_CLOSE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u003c/DIV\u003e\""
    },
    {
      "name": "ELLIPSES",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"...\""
    },
    {
      "name": "LENGTH_PREFIX",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"Length: \""
    },
    {
      "name": "FORWARD_SLASH",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026#47;\""
    },
    {
      "name": "START_COMMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026#47;*\u003cBR\u003e\""
    },
    {
      "name": "MIDDLE_COMMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026nbsp;*\u0026nbsp;\""
    },
    {
      "name": "END_COMMENT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"\u0026nbsp;*\u0026#47;\u003cBR\u003e\""
    },
    {
      "name": "DIFF_COLOR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.awt.Color",
      "type_short": "Color",
      "constant_value": null
    },
    {
      "name": "originalHTMLData",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "createSpace",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "numberOfSpaces",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDataTypeLength",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dataTypeLengthString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.StringBuilder",
        "type_short": "StringBuilder",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "addDataTypeLength",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "buffer",
          "type_long": "java.lang.StringBuilder",
          "type_short": "StringBuilder",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.StringBuilder",
        "type_short": "StringBuilder",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeLengthString",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCommentForDataType",
      "comment": "Returns the plain-text value of the data type\u0027s description.\n \n If there were html tags in the string, they are escaped.",
      "javadoc": "Returns the plain-text value of the data type\u0027s description.\n \u003cp\u003e\n If there were html tags in the string, they are escaped.\n@param dataType the type to get the description / comment for\n@return plain-text string, w/html escaped",
      "static": true,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the type to get the description / comment for"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "plain-text string, w/html escaped"
      },
      "throws": []
    },
    {
      "name": "truncateAsNecessary",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "truncateAsNecessary",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "breakCommentAsNecessary",
      "comment": "Formats a multi-line plain-text comment string into a HTML string where the text has been\n wrapped at MAX_LINE_LENGTH.",
      "javadoc": "Formats a multi-line plain-text comment string into a HTML string where the text has been\n wrapped at MAX_LINE_LENGTH.\n@param string plain-text string\n@return list of html strings",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "plain-text string"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": "list of html strings"
      },
      "throws": []
    },
    {
      "name": "breakLongLineAtWordBoundaries",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "lineStr",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "maxLineLen",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cjava.lang.String\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "wrapStringInColor",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "string",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "color",
          "type_long": "java.awt.Color",
          "type_short": "Color",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createCommentLines",
      "comment": "Formats a multi-line plain-text comment as a list of HTML marked-up lines.",
      "javadoc": "Formats a multi-line plain-text comment as a list of HTML marked-up lines.\n@param comment multi-line plain-text string\n@param maxLines max number of formatted lines to return\n@return list of html marked-up {@link TextLine}s",
      "static": true,
      "params": [
        {
          "name": "comment",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "multi-line plain-text string"
        },
        {
          "name": "maxLines",
          "type_long": "int",
          "type_short": "int",
          "comment": "max number of formatted lines to return"
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.html.TextLine\u003e",
        "type_short": "List",
        "comment": "list of html marked-up TextLines"
      },
      "throws": []
    },
    {
      "name": "getLocatableDataType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "type",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Default constructor for those who promise to later set the HTML text",
      "javadoc": "Default constructor for those who promise to later set the HTML text",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "htmlText",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHTMLString",
      "comment": "Returns an HTML string for this data representation object.  The HTML returned will be\n truncated if it is too long.   To get the full HTML, call #getFullHTMLString().",
      "javadoc": "Returns an HTML string for this data representation object.  The HTML returned will be\n truncated if it is too long.   To get the full HTML, call {@link #getFullHTMLString()}.\n@return the html\n@see #getFullHTMLString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the html"
      },
      "throws": []
    },
    {
      "name": "getFullHTMLString",
      "comment": "Returns an HTML string for this data representation object",
      "javadoc": "Returns an HTML string for this data representation object\n@return the html\n@see #getHTMLString()",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the html"
      },
      "throws": []
    },
    {
      "name": "getHTMLContentString",
      "comment": "This is like #getHTMLString(), but does not put HTML tags around the data",
      "javadoc": "This is like {@link #getHTMLString()}, but does not put HTML tags around the data\n@return the content",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the content"
      },
      "throws": []
    },
    {
      "name": "getFullHTMLContentString",
      "comment": "This is like #getHTMLString(), but does not put HTML tags around the data",
      "javadoc": "This is like {@link #getHTMLString()}, but does not put HTML tags around the data\n@return the content",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "the content"
      },
      "throws": []
    },
    {
      "name": "diff",
      "comment": "Compares this representation and the given representation creates a diff string for both\n representations.",
      "javadoc": "Compares this representation and the given representation creates a diff string for both\n representations.\n@param otherRepresentation the other representation to diff against.\n@return An array of two strings: the first is this object\u0027s diff value, the second is the\n         given objects diff value.",
      "static": false,
      "params": [
        {
          "name": "otherRepresentation",
          "type_long": "ghidra.app.util.html.HTMLDataTypeRepresentation",
          "type_short": "HTMLDataTypeRepresentation",
          "comment": "the other representation to diff against."
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.html.HTMLDataTypeRepresentation[]",
        "type_short": "ghidra.app.util.html.HTMLDataTypeRepresentation[]",
        "comment": "An array of two strings: the first is this object\u0027s diff value, the second is the\n         given objects diff value."
      },
      "throws": []
    },
    {
      "name": "buildHeaderText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.html.ValidatableLine\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildFooterText",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.html.TextLine",
        "type_short": "TextLine",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDiffInput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "line",
          "type_long": "ghidra.app.util.html.ValidatableLine",
          "type_short": "ValidatableLine",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.html.HTMLDataTypeRepresentationDiffInput",
        "type_short": "HTMLDataTypeRepresentationDiffInput",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDiffInput",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "lines",
          "type_long": "java.util.List\u003cghidra.app.util.html.ValidatableLine\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.html.HTMLDataTypeRepresentationDiffInput",
        "type_short": "HTMLDataTypeRepresentationDiffInput",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "completelyDifferentDiff",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.app.util.html.HTMLDataTypeRepresentation",
          "type_short": "HTMLDataTypeRepresentation",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.html.HTMLDataTypeRepresentation[]",
        "type_short": "ghidra.app.util.html.HTMLDataTypeRepresentation[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "copyLines",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "lines",
          "type_long": "java.util.List\u003cghidra.app.util.html.ValidatableLine\u003e",
          "type_short": "List",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.util.List\u003cghidra.app.util.html.ValidatableLine\u003e",
        "type_short": "List",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "diffTextLine",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "textLine",
          "type_long": "ghidra.app.util.html.TextLine",
          "type_short": "TextLine",
          "comment": ""
        },
        {
          "name": "otherTextLine",
          "type_long": "ghidra.app.util.html.TextLine",
          "type_short": "TextLine",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createPlaceHolderLine",
      "comment": "Extension point for adding empty lines.  Subclasses that do not wish to use the default\n empty text line can override this method.",
      "javadoc": "Extension point for adding empty lines.  Subclasses that do not wish to use the default\n empty text line can override this method.\n@param oppositeLine the line that will go along with the newly created placeholder line\n@return the placeholder line",
      "static": false,
      "params": [
        {
          "name": "oppositeLine",
          "type_long": "ghidra.app.util.html.ValidatableLine",
          "type_short": "ValidatableLine",
          "comment": "the line that will go along with the newly created placeholder line"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.html.PlaceHolderLine",
        "type_short": "PlaceHolderLine",
        "comment": "the placeholder line"
      },
      "throws": []
    }
  ]
}
