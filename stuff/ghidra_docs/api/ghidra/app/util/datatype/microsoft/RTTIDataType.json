{
  "name": "RTTIDataType",
  "comment": "An abstract class that each RTTI data type should extend to get common functionality.",
  "javadoc": "An abstract class that each RTTI data type should extend to get common functionality.",
  "static": false,
  "implements": [],
  "extends": "ghidra.program.model.data.DynamicDataType",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates an RTTI data type.",
      "javadoc": "Creates an RTTI data type.\n@param name the name of the data type.\n@param dtm the data type manager for this data type.",
      "static": false,
      "params": [
        {
          "name": "name",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the name of the data type."
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager for this data type."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "Determines if the data type is valid for placing at the indicated address in the program.",
      "javadoc": "Determines if the data type is valid for placing at the indicated address in the program.\n@param program the program\n@param startAddress the start address\n@param overwriteInstructions true indicates that existing instructions can be overwritten \n by this data type.\n@param overwriteDefinedData true indicates that existing defined data can be overwritten \n by this data type.\n@return true if this data type can be laid down at the specified address.\n@see #isValid(Program program, Address address, DataValidationOptions validationOptions)",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "startAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address"
        },
        {
          "name": "overwriteInstructions",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates that existing instructions can be overwritten \n by this data type."
        },
        {
          "name": "overwriteDefinedData",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates that existing defined data can be overwritten \n by this data type."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this data type can be laid down at the specified address."
      },
      "throws": []
    },
    {
      "name": "convertValidationOptions",
      "comment": "Creates a DataValidationOptions object with the indicated settings for instructions \n and defined data. Other validation options will be set to the default values.",
      "javadoc": "Creates a DataValidationOptions object with the indicated settings for instructions \n and defined data. Other validation options will be set to the default values.\n@param overwriteInstructions true indicates it is valid to overwrite instructions\n@param overwriteDefinedData true indicates it is valid to overwrite defined data\n@return the DataValidationOptions object",
      "static": false,
      "params": [
        {
          "name": "overwriteInstructions",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates it is valid to overwrite instructions"
        },
        {
          "name": "overwriteDefinedData",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true indicates it is valid to overwrite defined data"
        }
      ],
      "return": {
        "type_long": "ghidra.app.util.datatype.microsoft.DataValidationOptions",
        "type_short": "DataValidationOptions",
        "comment": "the DataValidationOptions object"
      },
      "throws": []
    },
    {
      "name": "isValid",
      "comment": "Determines if the data type is valid for placing at the indicated address in the program.",
      "javadoc": "Determines if the data type is valid for placing at the indicated address in the program.\n@param program the program\n@param address the address where the validated data type will be used to create data\n@param validationOptions options indicating how to perform the validation\n@return true if this data type can be laid down at the specified address",
      "static": false,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address where the validated data type will be used to create data"
        },
        {
          "name": "validationOptions",
          "type_long": "ghidra.app.util.datatype.microsoft.DataValidationOptions",
          "type_short": "DataValidationOptions",
          "comment": "options indicating how to perform the validation"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if this data type can be laid down at the specified address"
      },
      "throws": []
    },
    {
      "name": "containsDefinedData",
      "comment": "Determines if data is already defined between the start and end address.",
      "javadoc": "Determines if data is already defined between the start and end address.\n@param listing the program listing where the data type is to be placed.\n@param startAddress the start address of the range to check.\n@param endAddress the end address of the range to check.\n@return true if there is already defined data in the range from the start to end address.",
      "static": false,
      "params": [
        {
          "name": "listing",
          "type_long": "ghidra.program.model.listing.Listing",
          "type_short": "Listing",
          "comment": "the program listing where the data type is to be placed."
        },
        {
          "name": "startAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the range to check."
        },
        {
          "name": "endAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address of the range to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is already defined data in the range from the start to end address."
      },
      "throws": []
    },
    {
      "name": "containsInstruction",
      "comment": "Determines if an instruction is already defined between the start and end address.",
      "javadoc": "Determines if an instruction is already defined between the start and end address.\n@param listing the program listing where the data type is to be placed.\n@param startAddress the start address of the range to check.\n@param endAddress the end address of the range to check.\n@return true if there is already an instruction in the range from the start to end address.",
      "static": false,
      "params": [
        {
          "name": "listing",
          "type_long": "ghidra.program.model.listing.Listing",
          "type_short": "Listing",
          "comment": "the program listing where the data type is to be placed."
        },
        {
          "name": "startAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the start address of the range to check."
        },
        {
          "name": "endAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the end address of the range to check."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if there is already an instruction in the range from the start to end address."
      },
      "throws": []
    }
  ]
}
