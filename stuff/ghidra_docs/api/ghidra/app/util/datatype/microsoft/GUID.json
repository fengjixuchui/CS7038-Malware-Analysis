{
  "name": "GUID",
  "comment": "GUIDs identify objects such as interfaces, manager entry-point vectors (EPVs), \n and class objects. A GUID is a 128-bit value consisting of one group \n of 8 hexadecimal digits, followed by three groups of 4 hexadecimal \n digits each, followed by one group of 12 hexadecimal digits. The \n following example shows the groupings of hexadecimal digits in a GUID.\n \n 6B29FC40-CA47-1067-B31D-00DD010662DA\n \n \n typedef struct _GUID {\n \t\tDWORD Data1;\n \t\tWORD Data2;\n \t\tWORD Data3;\n \t\tBYTE Data4[8];\n } GUID;\n \n Data1 - Specifies the first 8 hexadecimal digits of the GUID. \n Data2 - Specifies the first group of 4 hexadecimal digits.\n Data3 - Specifies the second group of 4 hexadecimal digits.\n Data4 - Array of 8 bytes.\n         The first 2 bytes contain the third group of 4 hexadecimal digits.\n         The remaining 6 bytes contain the final 12 hexadecimal digits.",
  "javadoc": "GUIDs identify objects such as interfaces, manager entry-point vectors (EPVs), \n and class objects. A GUID is a 128-bit value consisting of one group \n of 8 hexadecimal digits, followed by three groups of 4 hexadecimal \n digits each, followed by one group of 12 hexadecimal digits. The \n following example shows the groupings of hexadecimal digits in a GUID.\n \u003cbr\u003e\n \u003ccode\u003e6B29FC40-CA47-1067-B31D-00DD010662DA\u003c/code\u003e\n \u003cbr\u003e\n \u003cpre\u003e\n typedef struct _GUID {\n \t\tDWORD Data1;\n \t\tWORD Data2;\n \t\tWORD Data3;\n \t\tBYTE Data4[8];\n } GUID;\n \u003c/pre\u003e\n Data1 - Specifies the first 8 hexadecimal digits of the GUID.\u003cbr\u003e \n Data2 - Specifies the first group of 4 hexadecimal digits.\u003cbr\u003e\n Data3 - Specifies the second group of 4 hexadecimal digits.\u003cbr\u003e\n Data4 - Array of 8 bytes.\n         The first 2 bytes contain the third group of 4 hexadecimal digits.\n         The remaining 6 bytes contain the final 12 hexadecimal digits.\u003cbr\u003e",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "SIZEOF",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "16"
    },
    {
      "name": "data1",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "data2",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "data3",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "short",
      "type_short": "short",
      "constant_value": null
    },
    {
      "name": "data4",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte[]",
      "type_short": "byte[]",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a GUID object using the GUID string form.",
      "javadoc": "Creates a GUID object using the GUID string form.\n@param guidString - either with or without dashes between parts - \n \"6B29FC40-CA47-1067-B31D-00DD010662DA\", or \"6B29FC40CA471067B31D00DD010662DA\", and\n with or without leading and trailing \"{\" \"}\" characters\n@throws IllegalArgumentException if string does not represent a valid GUID",
      "static": false,
      "params": [
        {
          "name": "guidString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "- either with or without dashes between parts - \n \"6B29FC40-CA47-1067-B31D-00DD010662DA\", or \"6B29FC40CA471067B31D00DD010662DA\", and\n with or without leading and trailing \"{\" \"}\" characters"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if string does not represent a valid GUID"
        }
      ]
    },
    {
      "name": "getGUIDParts",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "guidString",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": ""
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a GUID using the constitute pieces.",
      "javadoc": "Constructs a GUID using the constitute pieces.",
      "static": false,
      "params": [
        {
          "name": "data1",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "data2",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        },
        {
          "name": "data3",
          "type_long": "short",
          "type_short": "short",
          "comment": ""
        },
        {
          "name": "data4",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Reads a GUID from the given binary reader.",
      "javadoc": "Reads a GUID from the given binary reader.\n@param reader the binary reader to read the GUID\n@throws IOException if an I/O error occurs while reading the GUID",
      "static": false,
      "params": [
        {
          "name": "reader",
          "type_long": "ghidra.app.util.bin.BinaryReader",
          "type_short": "BinaryReader",
          "comment": "the binary reader to read the GUID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if an I/O error occurs while reading the GUID"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Reads a GUID from the given memory buffer.",
      "javadoc": "Reads a GUID from the given memory buffer.\n@param buf the memory buffer to read the GUID\n@throws MemoryAccessException if an error occurs while reading the GUID",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": "the memory buffer to read the GUID"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.mem.MemoryAccessException",
          "type_short": "MemoryAccessException",
          "comment": "if an error occurs while reading the GUID"
        }
      ]
    },
    {
      "name": "getDataConverter",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "buf",
          "type_long": "ghidra.program.model.mem.MemBuffer",
          "type_short": "MemBuffer",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.util.DataConverter",
        "type_short": "DataConverter",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getData1",
      "comment": "Specifies the first 8 hexadecimal digits of the GUID.",
      "javadoc": "Specifies the first 8 hexadecimal digits of the GUID.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getData2",
      "comment": "Specifies the first group of 4 hexadecimal digits.",
      "javadoc": "Specifies the first group of 4 hexadecimal digits.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getData3",
      "comment": "Specifies the second group of 4 hexadecimal digits.",
      "javadoc": "Specifies the second group of 4 hexadecimal digits.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "short",
        "type_short": "short",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getData4",
      "comment": "Array of 8 bytes.\n The first 2 bytes contain the third group of 4 hexadecimal digits.\n The remaining 6 bytes contain the final 12 hexadecimal digits.",
      "javadoc": "Array of 8 bytes.\n The first 2 bytes contain the third group of 4 hexadecimal digits.\n The remaining 6 bytes contain the final 12 hexadecimal digits.\n@return ",
      "static": false,
      "params": [],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    }
  ]
}
