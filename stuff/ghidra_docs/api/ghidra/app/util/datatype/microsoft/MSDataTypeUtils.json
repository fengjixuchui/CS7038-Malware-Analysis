{
  "name": "MSDataTypeUtils",
  "comment": "An abstract class containing static utility methods for creating structure data types.",
  "javadoc": "An abstract class containing static utility methods for creating structure data types.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "is64Bit",
      "comment": "Determines if the indicated program appears to be 64 bit (has 64 bit pointers).",
      "javadoc": "Determines if the indicated program appears to be 64 bit (has 64 bit pointers).\n@param program the program\n@return true if 64 bit.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if 64 bit."
      },
      "throws": []
    },
    {
      "name": "getAlignedPack8Structure",
      "comment": "Gets an empty aligned structure with a packing value of 8 that can be use to create the \n model\u0027s data type.",
      "javadoc": "Gets an empty aligned structure with a packing value of 8 that can be use to create the \n model\u0027s data type.\n@param dataTypeManager the data type manager to associate with the structure.\n@param categoryPath the structure\u0027s category path.\n@param structureName the structure\u0027s name.\n@return the aligned pack(8) structure.",
      "static": true,
      "params": [
        {
          "name": "dataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager to associate with the structure."
        },
        {
          "name": "categoryPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the structure\u0027s category path."
        },
        {
          "name": "structureName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the structure\u0027s name."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StructureDataType",
        "type_short": "StructureDataType",
        "comment": "the aligned pack(8) structure."
      },
      "throws": []
    },
    {
      "name": "getAlignedPack4Structure",
      "comment": "Gets an empty aligned structure with a packing value of 4 that can be use to create the \n model\u0027s data type.",
      "javadoc": "Gets an empty aligned structure with a packing value of 4 that can be use to create the \n model\u0027s data type.\n@param dataTypeManager the data type manager to associate with the structure.\n@param categoryPath the structure\u0027s category path.\n@param structureName the structure\u0027s name.\n@return the aligned pack(4) structure.",
      "static": true,
      "params": [
        {
          "name": "dataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager to associate with the structure."
        },
        {
          "name": "categoryPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the structure\u0027s category path."
        },
        {
          "name": "structureName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the structure\u0027s name."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StructureDataType",
        "type_short": "StructureDataType",
        "comment": "the aligned pack(4) structure."
      },
      "throws": []
    },
    {
      "name": "getAlignedPackedStructure",
      "comment": "Gets an empty aligned structure with the indicated packing value that can be use to create the \n model\u0027s data type.",
      "javadoc": "Gets an empty aligned structure with the indicated packing value that can be use to create the \n model\u0027s data type.\n@param dataTypeManager the data type manager to associate with the structure.\n@param categoryPath the structure\u0027s category path.\n@param structureName the structure\u0027s name.\n@param packValue the packing value or 0 NOT_PACKING\n@return the aligned packed structure.",
      "static": true,
      "params": [
        {
          "name": "dataTypeManager",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": "the data type manager to associate with the structure."
        },
        {
          "name": "categoryPath",
          "type_long": "ghidra.program.model.data.CategoryPath",
          "type_short": "CategoryPath",
          "comment": "the structure\u0027s category path."
        },
        {
          "name": "structureName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the structure\u0027s name."
        },
        {
          "name": "packValue",
          "type_long": "int",
          "type_short": "int",
          "comment": "the packing value or 0 NOT_PACKING"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.StructureDataType",
        "type_short": "StructureDataType",
        "comment": "the aligned packed structure."
      },
      "throws": []
    },
    {
      "name": "getEHStateDataType",
      "comment": "Gets an exception handling state data type.",
      "javadoc": "Gets an exception handling state data type.\n@param program the program for the data type.\n@return the exception handling state data type.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the data type."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the exception handling state data type."
      },
      "throws": []
    },
    {
      "name": "getPointerDisplacementDataType",
      "comment": "Gets a pointer displacement data type.",
      "javadoc": "Gets a pointer displacement data type.\n@param program the program for the data type.\n@return the pointer displacement data type.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the data type."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the pointer displacement data type."
      },
      "throws": []
    },
    {
      "name": "getPMDDataType",
      "comment": "Gets a PMD displacement structure data type.",
      "javadoc": "Gets a PMD displacement structure data type.\n@param program the program for the data type.\n@return the PMD data type or null.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the data type."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.Structure",
        "type_short": "Structure",
        "comment": "the PMD data type or null."
      },
      "throws": []
    },
    {
      "name": "getWinDTM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "ghidra.app.plugin.core.datamgr.archive.DuplicateIdException",
          "type_short": "DuplicateIdException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getMatchingDataType",
      "comment": "Gets the named data type from the program or the windows data type archive. If neither \n the program or data type archive has an equivalent data type then the original data type \n is returned.",
      "javadoc": "Gets the named data type from the program or the windows data type archive. If neither \n the program or data type archive has an equivalent data type then the original data type \n is returned.\n@param program the program for the data type.\n@param comparisonDt the data type it should match\n@return the matching data type",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program for the data type."
        },
        {
          "name": "comparisonDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type it should match"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the matching data type"
      },
      "throws": []
    },
    {
      "name": "findMatchingDataType",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "comparisonDt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": ""
        },
        {
          "name": "programDTM",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getAbsoluteAddress",
      "comment": "Extracts an absolute address from the bytes in memory at the indicated address in memory.",
      "javadoc": "Extracts an absolute address from the bytes in memory at the indicated address in memory.\n@param program the program containing the bytes\n@param address the address in memory where the address bytes should be obtained.\n@return the absolute address or null if the address isn\u0027t in the program\u0027s memory.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program containing the bytes"
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address in memory where the address bytes should be obtained."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the absolute address or null if the address isn\u0027t in the program\u0027s memory."
      },
      "throws": []
    },
    {
      "name": "getReferencedAddress",
      "comment": "Gets the referred to address from the bytes in the program at the indicated address.\n If the program has 64 bit pointers, then a 32 bit image base offset value is expected to \n be found at the indicated address. \n If the program has 32 bit pointers, then a 32 bit absolute pointer value is expected at the\n indicated address.",
      "javadoc": "Gets the referred to address from the bytes in the program at the indicated address.\n If the program has 64 bit pointers, then a 32 bit image base offset value is expected to \n be found at the indicated address. \n If the program has 32 bit pointers, then a 32 bit absolute pointer value is expected at the\n indicated address.\n@param program the program whose memory is to be read.\n@param address the address to start reading the bytes for the referenced address.\n@return the referred to address or null.",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program whose memory is to be read."
        },
        {
          "name": "address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to start reading the bytes for the referenced address."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.address.Address",
        "type_short": "Address",
        "comment": "the referred to address or null."
      },
      "throws": []
    },
    {
      "name": "getBytes",
      "comment": "Gets bytes from memory at the indicated startAddress. \n The length indicates the number of bytes that must be read \n from memory.",
      "javadoc": "Gets bytes from \u003ccode\u003ememory\u003c/code\u003e at the indicated \u003ccode\u003estartAddress\u003c/code\u003e. \n The \u003ccode\u003elength\u003c/code\u003e indicates the number of bytes that must be read \n from memory.\n@param memory the program memory for obtaining the bytes\n@param startAddress the address to begin reading bytes\n@param length the number of bytes to read\n@return the bytes\n@throws InvalidDataTypeException if the \u003ccode\u003elength\u003c/code\u003e number of bytes couldn\u0027t \n be read starting at the \u003ccode\u003estartAddress\u003c/code\u003e in \u003ccode\u003ememory\u003c/code\u003e.",
      "static": true,
      "params": [
        {
          "name": "memory",
          "type_long": "ghidra.program.model.mem.Memory",
          "type_short": "Memory",
          "comment": "the program memory for obtaining the bytes"
        },
        {
          "name": "startAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "the address to begin reading bytes"
        },
        {
          "name": "length",
          "type_long": "int",
          "type_short": "int",
          "comment": "the number of bytes to read"
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": "the bytes"
      },
      "throws": [
        {
          "type_long": "ghidra.program.model.data.InvalidDataTypeException",
          "type_short": "InvalidDataTypeException",
          "comment": "if the length number of bytes couldn\u0027t \n be read starting at the startAddress in memory."
        }
      ]
    },
    {
      "name": "getReferenceDataType",
      "comment": "Gets the appropriate reference data type. If program is 64 bit, then a 32-bit image \n base offset data type will be returned. Otherwise, a default pointer to the \n referredToDataType will be returned.",
      "javadoc": "Gets the appropriate reference data type. If program is 64 bit, then a 32-bit image \n base offset data type will be returned. Otherwise, a default pointer to the \n referredToDataType will be returned.\n@param program the program that will contain the returned data type\n@param referredToDataType the data type that is at the address being referred to by the \n pointer or image base offset. Otherwise, null.\n@return the image base offset or pointer reference data type",
      "static": true,
      "params": [
        {
          "name": "program",
          "type_long": "ghidra.program.model.listing.Program",
          "type_short": "Program",
          "comment": "the program that will contain the returned data type"
        },
        {
          "name": "referredToDataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type that is at the address being referred to by the \n pointer or image base offset. Otherwise, null."
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the image base offset or pointer reference data type"
      },
      "throws": []
    }
  ]
}
