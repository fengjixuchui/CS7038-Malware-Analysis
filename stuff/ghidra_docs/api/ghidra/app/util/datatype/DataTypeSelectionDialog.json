{
  "name": "DataTypeSelectionDialog",
  "comment": "A dialog that allows the user to choose from available data types or create new ones.",
  "javadoc": "A dialog that allows the user to choose from available data types or create new ones.",
  "static": false,
  "implements": [],
  "extends": "docking.DialogComponentProvider",
  "fields": [
    {
      "name": "editor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.datatype.DataTypeSelectionEditor",
      "type_short": "DataTypeSelectionEditor",
      "constant_value": null
    },
    {
      "name": "pluginTool",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.framework.plugintool.PluginTool",
      "type_short": "PluginTool",
      "constant_value": null
    },
    {
      "name": "userChoice",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataType",
      "type_short": "DataType",
      "constant_value": null
    },
    {
      "name": "maxSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "dtm",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.data.DataTypeManager",
      "type_short": "DataTypeManager",
      "constant_value": null
    },
    {
      "name": "allowedTypes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.data.DataTypeParser.AllowedDataTypes",
      "type_short": "AllowedDataTypes",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "pluginTool",
          "type_long": "ghidra.framework.plugintool.PluginTool",
          "type_short": "PluginTool",
          "comment": ""
        },
        {
          "name": "dtm",
          "type_long": "ghidra.program.model.data.DataTypeManager",
          "type_short": "DataTypeManager",
          "comment": ""
        },
        {
          "name": "maxSize",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "allowedTypes",
          "type_long": "ghidra.util.data.DataTypeParser.AllowedDataTypes",
          "type_short": "AllowedDataTypes",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "init",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "buildEditor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "createEditorPanel",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "dtEditor",
          "type_long": "ghidra.app.util.datatype.DataTypeSelectionEditor",
          "type_short": "DataTypeSelectionEditor",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "javax.swing.JComponent",
        "type_short": "JComponent",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "dialogShown",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "cancelCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "okCallback",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "close",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setTabCommitsEdit",
      "comment": "If true then a Tab key press will work the same as pressing the Enter key.  If false, then\n a Tab key press will trigger navigation, as is normally done in Java.  \n \n This method is useful for widgets that have embedded editors that launch this dialog.  For\n these editors, like tables, it is nice to be able to tab through various editors.  This\n method allows these editors to keep this functionality, even though a new dialog was shown.",
      "javadoc": "If true then a Tab key press will work the same as pressing the Enter key.  If false, then\n a Tab key press will trigger navigation, as is normally done in Java.  \n \u003cp\u003e\n This method is useful for widgets that have embedded editors that launch this dialog.  For\n these editors, like tables, it is nice to be able to tab through various editors.  This\n method allows these editors to keep this functionality, even though a new dialog was shown.\n@param doesCommit true commits edits on Tab press",
      "static": false,
      "params": [
        {
          "name": "doesCommit",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true commits edits on Tab press"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInitialDataType",
      "comment": "Sets the value that this dialog will display in it\u0027s editor when initially shown.",
      "javadoc": "Sets the value that this dialog will display in it\u0027s editor when initially shown.\n@param dataType The initial data type to use for editing.",
      "static": false,
      "params": [
        {
          "name": "dataType",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "The initial data type to use for editing."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "clearUserChosenDataType",
      "comment": "Clears the last user selection.  This is useful if this dialog is reused and the call\n wants to make sure that old selections do not appear later.",
      "javadoc": "Clears the last user selection.  This is useful if this dialog is reused and the call\n wants to make sure that old selections do not appear later.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getUserChosenDataType",
      "comment": "The data type choice of the user or null if the dialog was cancelled.",
      "javadoc": "The data type choice of the user or null if the dialog was cancelled.\n@return The data type choice of the user or null if the dialog was cancelled.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "The data type choice of the user or null if the dialog was cancelled."
      },
      "throws": []
    },
    {
      "name": "getEditor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.datatype.DataTypeSelectionEditor",
        "type_short": "DataTypeSelectionEditor",
        "comment": ""
      },
      "throws": []
    }
  ]
}
