{
  "name": "DataTypeUrl",
  "comment": "A class to produce and parse URLs of the form:\n \n where the first number is the ID of the DataTypeManager and the second number is \n the DataType ID.",
  "javadoc": "A class to produce and parse URLs of the form:\n \u003cpre\u003e{@literal\n \tdatatype:/12345678?uid\u003d12345678\u0026name\u003dBob\n }\u003c/pre\u003e\n where the first number is the ID of the {@link DataTypeManager} and the second number is \n the {@link DataType} ID.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PROTOCOL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    },
    {
      "name": "URL_PATTERN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.util.regex.Pattern",
      "type_short": "Pattern",
      "constant_value": null
    },
    {
      "name": "dataTypeManagerId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.UniversalID",
      "type_short": "UniversalID",
      "constant_value": null
    },
    {
      "name": "dataTypeId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.util.UniversalID",
      "type_short": "UniversalID",
      "constant_value": null
    },
    {
      "name": "dataTypeName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a url from the given data type",
      "javadoc": "Constructs a url from the given data type\n@param dt the data type; cannot be null",
      "static": false,
      "params": [
        {
          "name": "dt",
          "type_long": "ghidra.program.model.data.DataType",
          "type_short": "DataType",
          "comment": "the data type; cannot be null"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a url from the given url string",
      "javadoc": "Constructs a url from the given url string\n@param url the url\n@throws IllegalArgumentException if the url does not match the expected {@link #URL_PATTERN}\n         or if there is an issue parsing the id within the given url",
      "static": false,
      "params": [
        {
          "name": "url",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the url"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.IllegalArgumentException",
          "type_short": "IllegalArgumentException",
          "comment": "if the url does not match the expected #URL_PATTERN\n         or if there is an issue parsing the id within the given url"
        }
      ]
    },
    {
      "name": "getDataTypeManagerId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeId",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.util.UniversalID",
        "type_short": "UniversalID",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataTypeName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getDataType",
      "comment": "Uses the given service and its DataTypeManagers to find the data type \n represented by this url",
      "javadoc": "Uses the given service and its {@link DataTypeManager}s to find the data type \n represented by this url\n@param service the service\n@return the data type; null if there was an error restoring the type, such as if the\n         parent {@link DataTypeManager} has been closed",
      "static": false,
      "params": [
        {
          "name": "service",
          "type_long": "ghidra.app.services.DataTypeManagerService",
          "type_short": "DataTypeManagerService",
          "comment": "the service"
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataType",
        "type_short": "DataType",
        "comment": "the data type; null if there was an error restoring the type, such as if the\n         parent DataTypeManager has been closed"
      },
      "throws": []
    },
    {
      "name": "findManager",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "service",
          "type_long": "ghidra.app.services.DataTypeManagerService",
          "type_short": "DataTypeManagerService",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getManagerById",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "service",
          "type_long": "ghidra.app.services.DataTypeManagerService",
          "type_short": "DataTypeManagerService",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.program.model.data.DataTypeManager",
        "type_short": "DataTypeManager",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
