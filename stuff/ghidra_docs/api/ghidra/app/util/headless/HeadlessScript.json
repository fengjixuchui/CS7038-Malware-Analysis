{
  "name": "HeadlessScript",
  "comment": "This class is analogous to GhidraScript, except that is only meant to be used with\n the HeadlessAnalyzer.  That is, if a user writes a script that extends HeadlessScript,\n it should only be run in the Headless environment.",
  "javadoc": "This class is analogous to GhidraScript, except that is only meant to be used with\n the HeadlessAnalyzer.  That is, if a user writes a script that extends HeadlessScript,\n it should only be run in the Headless environment.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.script.GhidraScript",
  "fields": [
    {
      "name": "headless",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.headless.HeadlessAnalyzer",
      "type_short": "HeadlessAnalyzer",
      "constant_value": null
    },
    {
      "name": "currentOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.headless.HeadlessScript.HeadlessContinuationOption",
      "type_short": "HeadlessContinuationOption",
      "constant_value": null
    },
    {
      "name": "scriptSetOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.app.util.headless.HeadlessScript.HeadlessContinuationOption",
      "type_short": "HeadlessContinuationOption",
      "constant_value": null
    },
    {
      "name": "runningInnerScript",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setRunningInnerScript",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setHeadlessInstance",
      "comment": "Sets the current headless instance -- doing so gives the user the ability to manipulate \n headless analyzer-specific parameters.\n \n This method is declared with no access modifier to only allow package-level (no subclass) \n access. This method is meant to only be used by the HeadlessAnalyzer class.",
      "javadoc": "Sets the current headless instance -- doing so gives the user the ability to manipulate \n headless analyzer-specific parameters.\n \u003cp\u003e\n This method is declared with no access modifier to only allow package-level (no subclass) \n access. This method is meant to only be used by the HeadlessAnalyzer class.\n@param ha HeadlessAnalyzer instance",
      "static": false,
      "params": [
        {
          "name": "ha",
          "type_long": "ghidra.app.util.headless.HeadlessAnalyzer",
          "type_short": "HeadlessAnalyzer",
          "comment": "HeadlessAnalyzer instance"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInitialContinuationOption",
      "comment": "Sets the \"beginning-of-script\" continuation status.\n \n This method is declare with no access modifier to only allow package-level (no\n subclass) access. This method is meant to only be used by the HeadlessAnalyzer class.",
      "javadoc": "Sets the \"beginning-of-script\" continuation status.\n \u003cp\u003e\n This method is declare with no access modifier to only allow package-level (no\n subclass) access. This method is meant to only be used by the HeadlessAnalyzer class.\n@param option initial continuation option for this script",
      "static": false,
      "params": [
        {
          "name": "option",
          "type_long": "ghidra.app.util.headless.HeadlessScript.HeadlessContinuationOption",
          "type_short": "HeadlessContinuationOption",
          "comment": "initial continuation option for this script"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getContinuationOption",
      "comment": "Returns the final resolved continuation option (after script processing is done).\n \n The continuation option specifies whether to continue or abort follow-on processing,\n and whether to delete or keep the current program.\n \n This method is declared with no access modifier to only allow package-level (no\n subclass) access. This method is meant to only be used by the HeadlessAnalyzer class.",
      "javadoc": "Returns the final resolved continuation option (after script processing is done).\n \u003cp\u003e\n The continuation option specifies whether to continue or abort follow-on processing,\n and whether to delete or keep the current program.\n \u003cp\u003e\n This method is declared with no access modifier to only allow package-level (no\n subclass) access. This method is meant to only be used by the HeadlessAnalyzer class.\n@return the script\u0027s final HeadlessContinuationOption",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.headless.HeadlessScript.HeadlessContinuationOption",
        "type_short": "HeadlessContinuationOption",
        "comment": "the script\u0027s final HeadlessContinuationOption"
      },
      "throws": []
    },
    {
      "name": "checkHeadlessStatus",
      "comment": "Checks to see if this script is running in headless mode (it should be!).\n \n This method should be called at the beginning of every public method in HeadlessScript\n that accesses HeadlessAnalyzer methods (for instance, \u0027headless.isAnalysisEnabled()\u0027).\n The call to this method can not be placed in the constructor, because \u0027setHeadlessInstance\u0027, \n which connects the script with the current headless instance, is not called until after the \n call to the constructor.",
      "javadoc": "Checks to see if this script is running in headless mode (it should be!).\n \u003cp\u003e\n This method should be called at the beginning of every public method in HeadlessScript\n that accesses HeadlessAnalyzer methods (for instance, \u0027headless.isAnalysisEnabled()\u0027).\n The call to this method can not be placed in the constructor, because \u0027setHeadlessInstance\u0027, \n which connects the script with the current headless instance, is not called until after the \n call to the constructor.\n@throws ImproperUseException if not in headless mode or headless instance not set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "storeHeadlessValue",
      "comment": "Stores a key/value pair in the HeadlessAnalyzer instance for later use.\n \n This method, along with the \u0027getStoredHeadlessValue\u0027 method, is useful for debugging and \n testing the Headless Analyzer (when the user has directly instantiated the HeadlessAnalyzer\n instead of running it from analyzeHeadless.sh or analyzeHeadless.bat). This method is\n intended to allow a HeadlessScript to store variables that reflect the current state of \n processing (at the time the script is being run). Storing variables in the HeadlessAnalyzer\n instance may be the only way to access the state of processing during cases when the user \n is forced to run in -readOnly mode, or if there is a value that is only accessible at the \n scripts stage.",
      "javadoc": "Stores a key/value pair in the HeadlessAnalyzer instance for later use.\n \u003cp\u003e\n This method, along with the \u0027getStoredHeadlessValue\u0027 method, is useful for debugging and \n testing the Headless Analyzer (when the user has directly instantiated the HeadlessAnalyzer\n instead of running it from analyzeHeadless.sh or analyzeHeadless.bat). This method is\n intended to allow a HeadlessScript to store variables that reflect the current state of \n processing (at the time the script is being run). Storing variables in the HeadlessAnalyzer\n instance may be the only way to access the state of processing during cases when the user \n is forced to run in -readOnly mode, or if there is a value that is only accessible at the \n scripts stage.\n@param key storage key in String form\n@param value value to store\n@throws ImproperUseException if not in headless mode or headless instance not set\n@see #getStoredHeadlessValue(String)\n@see #headlessStorageContainsKey(String)",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "storage key in String form"
        },
        {
          "name": "value",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": "value to store"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "getStoredHeadlessValue",
      "comment": "Get stored value by key from the HeadlessAnalyzer instance.\n \n This method, along with the \u0027storedHeadlessValue\u0027 method, is useful for debugging and \n testing the Headless Analyzer (when the user has directly instantiated the HeadlessAnalyzer\n instead of running it from analyzeHeadless.sh or analyzeHeadless.bat). This method is\n intended to allow a HeadlessScript to store variables that reflect the current state of \n processing (at the time the script is being run). Storing variables in the HeadlessAnalyzer\n instance may be the only way to access the state of processing during cases when the user \n is forced to run in -readOnly mode, or if there is a value that is only accessible at the \n scripts stage.",
      "javadoc": "Get stored value by key from the HeadlessAnalyzer instance.\n \u003cp\u003e\n This method, along with the \u0027storedHeadlessValue\u0027 method, is useful for debugging and \n testing the Headless Analyzer (when the user has directly instantiated the HeadlessAnalyzer\n instead of running it from analyzeHeadless.sh or analyzeHeadless.bat). This method is\n intended to allow a HeadlessScript to store variables that reflect the current state of \n processing (at the time the script is being run). Storing variables in the HeadlessAnalyzer\n instance may be the only way to access the state of processing during cases when the user \n is forced to run in -readOnly mode, or if there is a value that is only accessible at the \n scripts stage.\n@param key key to retrieve the desired stored value\n@return stored Object, or null if none exists for that key\n@throws ImproperUseException if not in headless mode or headless instance not set\n@see #storeHeadlessValue(String, Object)\n@see #headlessStorageContainsKey(String)",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "key to retrieve the desired stored value"
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": "stored Object, or null if none exists for that key"
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "headlessStorageContainsKey",
      "comment": "Returns whether the specified key was stored in the HeadlessAnalyzer instance.",
      "javadoc": "Returns whether the specified key was stored in the HeadlessAnalyzer instance.\n@param key value of key to check for in Headless Analyzer instance\n@return true if the specified key exists\n@throws ImproperUseException if not in headless mode or headless instance not set\n@see #storeHeadlessValue(String, Object)\n@see #getStoredHeadlessValue(String)",
      "static": false,
      "params": [
        {
          "name": "key",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "value of key to check for in Headless Analyzer instance"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if the specified key exists"
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "setHeadlessContinuationOption",
      "comment": "Sets the continuation option for this script\n \n The continuation option specifies whether to continue or abort follow-on processing,\n and whether to delete or keep the current program.",
      "javadoc": "Sets the continuation option for this script\n \u003cp\u003e\n The continuation option specifies whether to continue or abort follow-on processing,\n and whether to delete or keep the current program.\n@param option HeadlessContinuationOption set by this script\n@see #getHeadlessContinuationOption()",
      "static": false,
      "params": [
        {
          "name": "option",
          "type_long": "ghidra.app.util.headless.HeadlessScript.HeadlessContinuationOption",
          "type_short": "HeadlessContinuationOption",
          "comment": "HeadlessContinuationOption set by this script"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHeadlessContinuationOption",
      "comment": "Returns the continuation option for the current script (if one has not been set in this\n script, the option defaults to CONTINUE).\n \n The continuation option specifies whether to continue or abort follow-on processing,\n and whether to delete or keep the current program.",
      "javadoc": "Returns the continuation option for the current script (if one has not been set in this\n script, the option defaults to CONTINUE).\n \u003cp\u003e\n The continuation option specifies whether to continue or abort follow-on processing,\n and whether to delete or keep the current program.\n@return the current HeadlessContinuationOption\n@see #setHeadlessContinuationOption(HeadlessContinuationOption)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.app.util.headless.HeadlessScript.HeadlessContinuationOption",
        "type_short": "HeadlessContinuationOption",
        "comment": "the current HeadlessContinuationOption"
      },
      "throws": []
    },
    {
      "name": "enableHeadlessAnalysis",
      "comment": "Enables or disables analysis according to the passed-in boolean value.\n \n A script that calls this method should run as a \u0027preScript\u0027, since preScripts\n execute before analysis would typically run. Running the script as a \u0027postScript\u0027\n is ineffective, since the stage at which analysis would have happened has already \n passed.\n \n This change will persist throughout the current HeadlessAnalyzer session, unless\n changed again (in other words, once analysis is enabled via script for one program,\n it will also be enabled for future programs in the current session, unless changed).",
      "javadoc": "Enables or disables analysis according to the passed-in boolean value.\n \u003cp\u003e\n A script that calls this method should run as a \u0027preScript\u0027, since preScripts\n execute before analysis would typically run. Running the script as a \u0027postScript\u0027\n is ineffective, since the stage at which analysis would have happened has already \n passed.\n \u003cp\u003e\n This change will persist throughout the current HeadlessAnalyzer session, unless\n changed again (in other words, once analysis is enabled via script for one program,\n it will also be enabled for future programs in the current session, unless changed).\n@param b true to enable analysis, false to disable analysis\n@throws ImproperUseException if not in headless mode or headless instance not set\n@see #isHeadlessAnalysisEnabled()",
      "static": false,
      "params": [
        {
          "name": "b",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "true to enable analysis, false to disable analysis"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "isHeadlessAnalysisEnabled",
      "comment": "Returns whether analysis is currently enabled or disabled in the HeadlessAnalyzer.",
      "javadoc": "Returns whether analysis is currently enabled or disabled in the HeadlessAnalyzer.\n@return whether analysis has been enabled or not\n@throws ImproperUseException if not in headless mode or headless instance not set\n@see #enableHeadlessAnalysis(boolean)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether analysis has been enabled or not"
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "isImporting",
      "comment": "Returns whether the headless analyzer is currently set to -import mode or not (if not,\n it is in -process mode). The use of -import mode implies that binaries are actively being\n imported into the project (with optional scripts/analysis). The use of -process mode implies\n that existing project files are being processed (using scripts and/or analysis).",
      "javadoc": "Returns whether the headless analyzer is currently set to -import mode or not (if not,\n it is in -process mode). The use of -import mode implies that binaries are actively being\n imported into the project (with optional scripts/analysis). The use of -process mode implies\n that existing project files are being processed (using scripts and/or analysis).\n@return whether we are in -import mode or not\n@throws ImproperUseException if not in headless mode or headless instance not set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether we are in -import mode or not"
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "setHeadlessImportDirectory",
      "comment": "Changes the path in the Ghidra project where imported files are saved. \n The passed-in path is assumed to be relative to the project root. For example,\n if the directory structure for the Ghidra project looks like this:\n \n \n \t\tMyGhidraProject:\n \t\t  /dir1\n \t\t    /innerDir1\n \t\t    /innerDir2\n \n \n Then the following usage would ensure that any files imported after this call would\n be saved in the MyGhidraProject:/dir1/innerDir2 folder.\n \n \t\tsetHeadlessImportDirectory(\"dir1/innerDir2\");\n \n In contrast, the following usages would add new folders to the Ghidra project and save\n the imported files into the newly-created path:\n \n \t\tsetHeadlessImportDirectory(\"innerDir2/my/folder\");\n \n changes the directory structure to:\n \n \t\tMyGhidraProject:\n \t\t  /dir1\n \t\t    /innerDir1\n \t\t    /innerDir2\n \t\t      /my\n \t\t        /folder\n \n and:\n \n \t\tsetHeadlessImportDirectory(\"newDir/saveHere\");\n \n changes the directory structure to:\n \n \t\tMyGhidraProject:\n \t\t  /dir1\n \t\t    /innerDir1\n \t\t\t/innerDir2\n\t\t  /newDir\n \t\t    /saveHere\n \n As in the examples above, if the desired folder does not already exist, it is created.\n \n A change in the import save folder will persist throughout the current HeadlessAnalyzer \n session, unless changed again (in other words, once the import directory has been changed, \n it will remain the \u0027save\u0027 directory for import files in the current session, unless changed).\n \n To revert back to the default import location (that which was specified via command line),\n pass the null object as the argument to this method, as below:\n \n \t\tsetHeadlessImportDirectory(null);\t// Sets import save directory to default\n \n If a file with the same name already exists in the desired location, it will only be \n overwritten if \"-overwrite\" is true.\n \n This method is only applicable when using the HeadlessAnalyzer -import mode and \n is ineffective in -process mode.",
      "javadoc": "Changes the path \u003ci\u003ein the Ghidra project\u003c/i\u003e where imported files are saved. \n The passed-in path is assumed to be relative to the project root. For example,\n if the directory structure for the Ghidra project looks like this:\n \n \u003cpre\u003e\n \t\tMyGhidraProject:\n \t\t  /dir1\n \t\t    /innerDir1\n \t\t    /innerDir2\n \u003c/pre\u003e\n \n Then the following usage would ensure that any files imported after this call would\n be saved in the \u003ccode\u003eMyGhidraProject:/dir1/innerDir2\u003c/code\u003e folder.\n \u003cpre\u003e\n \t\tsetHeadlessImportDirectory(\"dir1/innerDir2\");\n \u003c/pre\u003e\n In contrast, the following usages would add new folders to the Ghidra project and save\n the imported files into the newly-created path:\n \u003cpre\u003e\n \t\tsetHeadlessImportDirectory(\"innerDir2/my/folder\");\n \u003c/pre\u003e\n changes the directory structure to:\n \u003cpre\u003e\n \t\tMyGhidraProject:\n \t\t  /dir1\n \t\t    /innerDir1\n \t\t    /innerDir2\n \t\t      /my\n \t\t        /folder\n \u003c/pre\u003e\n and:\n \u003cpre\u003e\n \t\tsetHeadlessImportDirectory(\"newDir/saveHere\");\n \u003c/pre\u003e\n changes the directory structure to:\n \u003cpre\u003e\n \t\tMyGhidraProject:\n \t\t  /dir1\n \t\t    /innerDir1\n \t\t\t/innerDir2\n\t\t  /newDir\n \t\t    /saveHere\n \u003c/pre\u003e\n As in the examples above, if the desired folder does not already exist, it is created.\n \u003cp\u003e\n A change in the import save folder will persist throughout the current HeadlessAnalyzer \n session, unless changed again (in other words, once the import directory has been changed, \n it will remain the \u0027save\u0027 directory for import files in the current session, unless changed).\n \u003cp\u003e\n To revert back to the default import location (that which was specified via command line),\n pass the null object as the argument to this method, as below:\n \u003cpre\u003e\n \t\tsetHeadlessImportDirectory(null);\t// Sets import save directory to default\n \u003c/pre\u003e\n If a file with the same name already exists in the desired location, it will only be \n overwritten if \"-overwrite\" is true.\n \u003cp\u003e\n This method is only applicable when using the HeadlessAnalyzer \u003ccode\u003e-import\u003c/code\u003e mode and \n is ineffective in \u003ccode\u003e-process\u003c/code\u003e mode.\n@param importDir the absolute path (relative to root) where inputs will be saved\n@throws ImproperUseException if not in headless mode or headless instance not set\n@throws IOException if there are issues creating the folder\n@throws InvalidNameException if folder name is invalid",
      "static": false,
      "params": [
        {
          "name": "importDir",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the absolute path (relative to root) where inputs will be saved"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        },
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if there are issues creating the folder"
        },
        {
          "type_long": "ghidra.util.InvalidNameException",
          "type_short": "InvalidNameException",
          "comment": "if folder name is invalid"
        }
      ]
    },
    {
      "name": "analysisTimeoutOccurred",
      "comment": "Returns whether analysis for the current program has timed out.\n \n Analysis will time out only in the case where:\n \n \t\tthe users has set an analysis timeout period using the -analysisTimeoutPerFile\n \tparameter\n \t\tanalysis is enabled and has completed\n \t\tthe current script is being run as a postScript (since postScripts run after\n analysis)\n ",
      "javadoc": "Returns whether analysis for the current program has timed out.\n \u003cp\u003e\n Analysis will time out only in the case where:\n \u003col\u003e\n \t\t\u003cli\u003ethe users has set an analysis timeout period using the \u003ccode\u003e-analysisTimeoutPerFile\u003c/code\u003e\n \tparameter\u003c/li\u003e\n \t\t\u003cli\u003eanalysis is enabled and has completed\u003c/li\u003e\n \t\t\u003cli\u003ethe current script is being run as a postScript (since postScripts run after\n analysis)\u003c/li\u003e\n \u003c/ol\u003e\n@return whether analysis timeout occurred\n@throws ImproperUseException if not in headless mode or headless instance not set",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "whether analysis timeout occurred"
      },
      "throws": [
        {
          "type_long": "ghidra.app.script.ImproperUseException",
          "type_short": "ImproperUseException",
          "comment": "if not in headless mode or headless instance not set"
        }
      ]
    },
    {
      "name": "runScript",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "scriptName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "scriptArguments",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        },
        {
          "name": "scriptState",
          "type_long": "ghidra.app.script.GhidraState",
          "type_short": "GhidraState",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "cleanup",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "success",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveContinuationOption",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "resolveContinuationOptionWith",
      "comment": "Resolve continuation options according to the table in \u0027analyzeHeadlessREADME.html\u0027.\n (See \"Multiple Scripts\" section).",
      "javadoc": "Resolve continuation options according to the table in \u0027analyzeHeadlessREADME.html\u0027.\n (See \"Multiple Scripts\" section).\n@param opt continuation option to combine with current continuation option",
      "static": false,
      "params": [
        {
          "name": "opt",
          "type_long": "ghidra.app.util.headless.HeadlessScript.HeadlessContinuationOption",
          "type_short": "HeadlessContinuationOption",
          "comment": "continuation option to combine with current continuation option"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
