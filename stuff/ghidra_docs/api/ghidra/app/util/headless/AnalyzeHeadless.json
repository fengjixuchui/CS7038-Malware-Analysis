{
  "name": "AnalyzeHeadless",
  "comment": "Launcher entry point for running headless Ghidra.",
  "javadoc": "Launcher entry point for running headless Ghidra.",
  "static": false,
  "implements": [
    "ghidra.GhidraLaunchable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "EXIT_CODE_ERROR",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "1"
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "launch",
      "comment": "The entry point of \u0027analyzeHeadless.bat\u0027. Parses the command line arguments to the script\n and takes the appropriate headless actions.",
      "javadoc": "The entry point of \u0027analyzeHeadless.bat\u0027. Parses the command line arguments to the script\n and takes the appropriate headless actions.\n@param args Detailed list of arguments is in \u0027analyzeHeadlessREADME.html\u0027",
      "static": false,
      "params": [
        {
          "name": "layout",
          "type_long": "ghidra.GhidraApplicationLayout",
          "type_short": "GhidraApplicationLayout",
          "comment": ""
        },
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "Detailed list of arguments is in \u0027analyzeHeadlessREADME.html\u0027"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.lang.Exception",
          "type_short": "Exception",
          "comment": ""
        }
      ]
    },
    {
      "name": "parseOptions",
      "comment": "Parses the command line arguments and uses them to set the headless options.",
      "javadoc": "Parses the command line arguments and uses them to set the headless options.\n@param options The headless options to set.\n@param args The command line arguments to parse.\n@param startIndex The index into the args array of where to start parsing.\n@param ghidraURL The ghidra server url to connect to, or null if not using a url.\n@param filesToImport A list to put files to import into.\n@throws InvalidInputException if an error occurred parsing the arguments or setting\n         the options.",
      "static": false,
      "params": [
        {
          "name": "options",
          "type_long": "ghidra.app.util.headless.HeadlessOptions",
          "type_short": "HeadlessOptions",
          "comment": "The headless options to set."
        },
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": "The command line arguments to parse."
        },
        {
          "name": "startIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "The index into the args array of where to start parsing."
        },
        {
          "name": "ghidraURL",
          "type_long": "java.net.URL",
          "type_short": "URL",
          "comment": "The ghidra server url to connect to, or null if not using a url."
        },
        {
          "name": "filesToImport",
          "type_long": "java.util.List\u003cjava.io.File\u003e",
          "type_short": "List",
          "comment": "A list to put files to import into."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": "if an error occurred parsing the arguments or setting\n         the options."
        }
      ]
    },
    {
      "name": "usage",
      "comment": "Prints out the usage details and exits the Java application with an exit code that\n indicates error.",
      "javadoc": "Prints out the usage details and exits the Java application with an exit code that\n indicates error.\n@param execCmd the command used to run the headless analyzer from the calling method.",
      "static": true,
      "params": [
        {
          "name": "execCmd",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "the command used to run the headless analyzer from the calling method."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "usage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSubArguments",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        },
        {
          "name": "argi",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.String[]",
        "type_short": "java.lang.String[]",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "checkArgument",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "optionName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "args",
          "type_long": "java.lang.String[]",
          "type_short": "java.lang.String[]",
          "comment": ""
        },
        {
          "name": "argi",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.util.exception.InvalidInputException",
          "type_short": "InvalidInputException",
          "comment": ""
        }
      ]
    }
  ]
}
