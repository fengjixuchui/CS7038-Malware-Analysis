{
  "name": "FloatFormat",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "INFINITE_SCALE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "-65536"
    },
    {
      "name": "BIG_NaN",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.math.BigDecimal",
      "type_short": "BigDecimal",
      "constant_value": null
    },
    {
      "name": "BIG_POSITIVE_INFINITY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.math.BigDecimal",
      "type_short": "BigDecimal",
      "constant_value": null
    },
    {
      "name": "BIG_NEGATIVE_INFINITY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.math.BigDecimal",
      "type_short": "BigDecimal",
      "constant_value": null
    },
    {
      "name": "JAVA_FLOAT_FORMAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.pcode.floatformat.FloatFormat",
      "type_short": "FloatFormat",
      "constant_value": null
    },
    {
      "name": "JAVA_DOUBLE_FORMAT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "ghidra.pcode.floatformat.FloatFormat",
      "type_short": "FloatFormat",
      "constant_value": null
    },
    {
      "name": "size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "signbit_pos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "frac_pos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "frac_size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "exp_pos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "exp_size",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "bias",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxexponent",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "jbitimplied",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "maxValue",
      "comment": "A constant holding the largest positive finite value",
      "javadoc": "A constant holding the largest positive finite value",
      "static": false,
      "type_long": "ghidra.pcode.floatformat.BigFloat",
      "type_short": "BigFloat",
      "constant_value": null
    },
    {
      "name": "minValue",
      "comment": "A constant holding the smallest positive normal value",
      "javadoc": "A constant holding the smallest positive normal value",
      "static": false,
      "type_long": "ghidra.pcode.floatformat.BigFloat",
      "type_short": "BigFloat",
      "constant_value": null
    },
    {
      "name": "displayContext",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.math.MathContext",
      "type_short": "MathContext",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "getSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "round",
      "comment": "Round  using this format\u0027s displayContext.",
      "javadoc": "Round {@code bigFloat} using this format\u0027s displayContext.\n@param bigFloat any BigFloat\n@return a BigDecimal rounded according to this format\u0027s displayContext",
      "static": false,
      "params": [
        {
          "name": "bigFloat",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "any BigFloat"
        }
      ],
      "return": {
        "type_long": "java.math.BigDecimal",
        "type_short": "BigDecimal",
        "comment": "a BigDecimal rounded according to this format\u0027s displayContext"
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sz",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.pcode.floatformat.UnsupportedFloatFormatException",
          "type_short": "UnsupportedFloatFormatException",
          "comment": ""
        }
      ]
    },
    {
      "name": "createFloat",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "mantissa",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "scale",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractKind",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "l",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.FloatKind",
        "type_short": "FloatKind",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractFractionalCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractFractionalCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractSign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractSign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractExponentCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "extractExponentCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "sign",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setSign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "x",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "sign",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getZeroEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getInfinityEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigZeroEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigZero",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.lang.Object",
        "type_short": "Object",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigInfinityEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigInfinity",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getNaNEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigNaNEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigNaN",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "sgn",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigFloat",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "f",
          "type_long": "float",
          "type_short": "float",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigFloat",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "d",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getBigFloat",
      "comment": "Decode  to a BigFloat using this format.\n \n NB: this method should not be used if #size8",
      "javadoc": "Decode {@code encoding} to a BigFloat using this format.\n \n NB: this method should not be used if {@link #size}\u0026gt;8\n@param encoding the encoding\n@return the decoded value as a BigFloat",
      "static": false,
      "params": [
        {
          "name": "encoding",
          "type_long": "long",
          "type_short": "long",
          "comment": "the encoding"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "the decoded value as a BigFloat"
      },
      "throws": []
    },
    {
      "name": "getSmallFloatData",
      "comment": "Decode  to a SmallFloatData using this format.\n \n NB: this method should not be used if #size8",
      "javadoc": "Decode {@code encoding} to a SmallFloatData using this format.\n \n NB: this method should not be used if {@link #size}\u003e8\n@param encoding the encoding\n@return the decoded value as a SmallFloatData",
      "static": false,
      "params": [
        {
          "name": "encoding",
          "type_long": "long",
          "type_short": "long",
          "comment": "the encoding"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.FloatFormat.SmallFloatData",
        "type_short": "SmallFloatData",
        "comment": "the decoded value as a SmallFloatData"
      },
      "throws": []
    },
    {
      "name": "getHostFloat",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "encoding",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "double",
        "type_short": "double",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getHostFloat",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "encoding",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "host",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getEncoding",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "value",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBinaryString",
      "comment": "Convert an encoded value to a binary floating point representation.\n \n NB: this method should not be used if #size8",
      "javadoc": "Convert an encoded value to a binary floating point representation.\n \n NB: this method should not be used if {@link #size}\u0026gt;8\n@param encoding the encoding of a floating point value in this format\n@return a binary string representation of the encoded floating point {@code encoding}",
      "static": false,
      "params": [
        {
          "name": "encoding",
          "type_long": "long",
          "type_short": "long",
          "comment": "the encoding of a floating point value in this format"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "a binary string representation of the encoded floating point "
      },
      "throws": []
    },
    {
      "name": "toBigFloat",
      "comment": "",
      "javadoc": "@param f a float\n@return BigFloat equal to {@code f}",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "float",
          "type_short": "float",
          "comment": "a float"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "BigFloat equal to "
      },
      "throws": []
    },
    {
      "name": "toBigFloat",
      "comment": "",
      "javadoc": "@param d a double\n@return BigFloat equal to {@code f}",
      "static": true,
      "params": [
        {
          "name": "d",
          "type_long": "double",
          "type_short": "double",
          "comment": "a double"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "BigFloat equal to "
      },
      "throws": []
    },
    {
      "name": "getSmallFloatData",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "d",
          "type_long": "double",
          "type_short": "double",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.FloatFormat.SmallFloatData",
        "type_short": "SmallFloatData",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBinaryString",
      "comment": "",
      "javadoc": "@param f a float\n@return binary representation of {@code f}",
      "static": true,
      "params": [
        {
          "name": "f",
          "type_long": "float",
          "type_short": "float",
          "comment": "a float"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "binary representation of "
      },
      "throws": []
    },
    {
      "name": "toBinaryString",
      "comment": "",
      "javadoc": "@param d a double\n@return binary representation of {@code f}",
      "static": true,
      "params": [
        {
          "name": "d",
          "type_long": "double",
          "type_short": "double",
          "comment": "a double"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "binary representation of "
      },
      "throws": []
    },
    {
      "name": "leadBit",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "i",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "leadBit",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "l",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "roundToLeadBit",
      "comment": "right shift and round to nearest even or left shift to an integer with lead bit at newLeadBit.\n \n The final round up might cause a carry that propagates up, so this must be followed by a test.",
      "javadoc": "right shift and round to nearest even or left shift to an integer with lead bit at newLeadBit.\n \n The final round up might cause a carry that propagates up, so this must be followed by a test.\n@param i integer representation of mantissa 1.xxxxx\n@param newLeadBit the bit position we want as a new lead bit\n@return integer representing 1.yyyy with a new lead bit position",
      "static": true,
      "params": [
        {
          "name": "i",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "integer representation of mantissa 1.xxxxx"
        },
        {
          "name": "newLeadBit",
          "type_long": "int",
          "type_short": "int",
          "comment": "the bit position we want as a new lead bit"
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "integer representing 1.yyyy with a new lead bit position"
      },
      "throws": []
    },
    {
      "name": "roundToLeadBit",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "i",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "newLeadBit",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opNotEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opNotEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opLess",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opLess",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opLessEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opLessEqual",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opNan",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opNan",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opAdd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opAdd",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opSub",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opSub",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opDiv",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opDiv",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opMult",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opMult",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "b",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opNeg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opNeg",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opAbs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opAbs",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opSqrt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opSqrt",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opInt2Float",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "sizein",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opInt2Float",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "sizein",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "signed",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opFloat2Float",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "outformat",
          "type_long": "ghidra.pcode.floatformat.FloatFormat",
          "type_short": "FloatFormat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opFloat2Float",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "outformat",
          "type_long": "ghidra.pcode.floatformat.FloatFormat",
          "type_short": "FloatFormat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opTrunc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "sizeout",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opTrunc",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        },
        {
          "name": "sizeout",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opCeil",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opCeil",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opFloor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opFloor",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opRound",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "opRound",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "a",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": ""
      },
      "throws": []
    }
  ]
}
