{
  "name": "BigFloat",
  "comment": "An IEEE 754 floating point class.\n\n Values represented:\n \n      QUIET_NAN, SIGNALED_NAN\n      -INF, +INF\n      value \u003d sign * unscaled * 2 ^ (scale-fracbits)\n \n sign \u003d -1 or +1, unscaled has at most fracbits+1 bits, and scale is at most expbits bits.\n      \n Operations compute exact result then round to nearest even.",
  "javadoc": "An IEEE 754 floating point class.\n\n \u003cp\u003eValues represented:\n \u003cul\u003e\n      \u003cli\u003eQUIET_NAN, SIGNALED_NAN\u003c/li\u003e\n      \u003cli\u003e-INF, +INF\u003c/li\u003e\n      \u003cli\u003evalue \u003d sign * unscaled * 2 ^ (scale-fracbits)\u003c/li\u003e\n \u003c/ul\u003e\n sign \u003d -1 or +1, unscaled has at most fracbits+1 bits, and scale is at most expbits bits.\n      \n \u003cp\u003eOperations compute exact result then round to nearest even.",
  "static": false,
  "implements": [
    "java.lang.Comparable"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "fracbits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "expbits",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "maxScale",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "minScale",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "kind",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.pcode.floatformat.FloatKind",
      "type_short": "FloatKind",
      "constant_value": null
    },
    {
      "name": "sign",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "unscaled",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.math.BigInteger",
      "type_short": "BigInteger",
      "constant_value": null
    },
    {
      "name": "scale",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Construct a BigFloat.  If kind is FINITE, the value is sign*unscaled*2^(scale-fracbits)",
      "javadoc": "Construct a BigFloat.  If kind is FINITE, the value is \u003ccode\u003esign*unscaled*2^(scale-fracbits)\u003c/code\u003e\n@param fracbits number of fractional bits\n@param expbits maximum number of bits in exponent\n@param kind the Kind, FINITE, INFINITE, ...\n@param sign +1 or -1\n@param unscaled the value\u0027s mantissa\n@param scale value\u0027s scale",
      "static": false,
      "params": [
        {
          "name": "fracbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of fractional bits"
        },
        {
          "name": "expbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "maximum number of bits in exponent"
        },
        {
          "name": "kind",
          "type_long": "ghidra.pcode.floatformat.FloatKind",
          "type_short": "FloatKind",
          "comment": "the Kind, FINITE, INFINITE, ..."
        },
        {
          "name": "sign",
          "type_long": "int",
          "type_short": "int",
          "comment": "+1 or -1"
        },
        {
          "name": "unscaled",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "the value\u0027s mantissa"
        },
        {
          "name": "scale",
          "type_long": "int",
          "type_short": "int",
          "comment": "value\u0027s scale"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "equals",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "obj",
          "type_long": "java.lang.Object",
          "type_short": "Object",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "valueOf",
      "comment": "Return the BigFloat with the given number of bits representing the given BigInteger.",
      "javadoc": "Return the BigFloat with the given number of bits representing the given BigInteger.\n@param fracbits number of fractional bits\n@param expbits number of bits in the exponent\n@param i an integer\n@return a BigFloat representing i",
      "static": true,
      "params": [
        {
          "name": "fracbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of fractional bits"
        },
        {
          "name": "expbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits in the exponent"
        },
        {
          "name": "i",
          "type_long": "java.math.BigInteger",
          "type_short": "BigInteger",
          "comment": "an integer"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "a BigFloat representing i"
      },
      "throws": []
    },
    {
      "name": "zero",
      "comment": "Return the BigFloat with the given number of bits representing zero.",
      "javadoc": "Return the BigFloat with the given number of bits representing zero.\n@param fracbits number of fractional bits\n@param expbits number of bits in the exponent\n@param sign +1 or -1\n@return a BigFloat representing +zero or -zero",
      "static": true,
      "params": [
        {
          "name": "fracbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of fractional bits"
        },
        {
          "name": "expbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits in the exponent"
        },
        {
          "name": "sign",
          "type_long": "int",
          "type_short": "int",
          "comment": "+1 or -1"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "a BigFloat representing +zero or -zero"
      },
      "throws": []
    },
    {
      "name": "zero",
      "comment": "Return the BigFloat with the given number of bits representing (positive) zero.",
      "javadoc": "Return the BigFloat with the given number of bits representing (positive) zero.\n@param fracbits number of fractional bits\n@param expbits number of bits in the exponent\n@return a BigFloat representing +zero",
      "static": true,
      "params": [
        {
          "name": "fracbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of fractional bits"
        },
        {
          "name": "expbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits in the exponent"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "a BigFloat representing +zero"
      },
      "throws": []
    },
    {
      "name": "infinity",
      "comment": "",
      "javadoc": "@param fracbits number of fractional bits\n@param expbits number of bits in the exponent\n@param sign +1 or -1\n@return +inf or -inf",
      "static": true,
      "params": [
        {
          "name": "fracbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of fractional bits"
        },
        {
          "name": "expbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits in the exponent"
        },
        {
          "name": "sign",
          "type_long": "int",
          "type_short": "int",
          "comment": "+1 or -1"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "+inf or -inf"
      },
      "throws": []
    },
    {
      "name": "quietNaN",
      "comment": "Return the BigFloat with the given number of bits representing (quiet) NaN.",
      "javadoc": "Return the BigFloat with the given number of bits representing (quiet) NaN.\n@param fracbits number of fractional bits\n@param expbits number of bits in the exponent\n@param sign +1 or -1\n@return a BigFloat representing (quiet) NaN",
      "static": true,
      "params": [
        {
          "name": "fracbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of fractional bits"
        },
        {
          "name": "expbits",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of bits in the exponent"
        },
        {
          "name": "sign",
          "type_long": "int",
          "type_short": "int",
          "comment": "+1 or -1"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "a BigFloat representing (quiet) NaN"
      },
      "throws": []
    },
    {
      "name": "upscale",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "nbits",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "scaleUpTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "newLength",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNormal",
      "comment": "",
      "javadoc": "@return {@code true} if this BigFloat is FINITE and normal",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if this BigFloat is FINITE and normal"
      },
      "throws": []
    },
    {
      "name": "internalRound",
      "comment": "This function is used internally to round after a computation.\n \n Assume that the true value is\n    sign * (unscaled + eps) * 2 ^ (scale-fracbits)\n and\n   unscaled.bitLength()  fracbits+1 \n\n (or the value is subnormal with at least 1 bit of extra precision)\n ",
      "javadoc": "This function is used internally to round after a computation.\n \n \u003cp\u003eAssume that the true value is\n \u003cpre\u003e   sign * (unscaled + eps) * 2 ^ (scale-fracbits)\n and\n   unscaled.bitLength() \u0026gt; fracbits+1 \n\n (or the value is subnormal with at least 1 bit of extra precision)\n \u003c/pre\u003e\n@param eps \u0026lt; 1",
      "static": false,
      "params": [
        {
          "name": "eps",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": " 1"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getLeadBitPos",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBigDecimal",
      "comment": "If finite, the returned BigDecimal is exactly equal to this.  If not finite, one of the\n FloatFormat.BIG_* constants is returned.",
      "javadoc": "If finite, the returned BigDecimal is exactly equal to this.  If not finite, one of the\n FloatFormat.BIG_* constants is returned.\n@return a BigDecimal",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigDecimal",
        "type_short": "BigDecimal",
        "comment": "a BigDecimal"
      },
      "throws": []
    },
    {
      "name": "toBinaryString",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeSignalingNaN",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeQuietNaN",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isNaN",
      "comment": "",
      "javadoc": "@return {@code true} if this BigFloat is NaN",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if this BigFloat is NaN"
      },
      "throws": []
    },
    {
      "name": "makeZero",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isInfinite",
      "comment": "",
      "javadoc": "@return {@code true} if this BigFloat is infinite",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if this BigFloat is infinite"
      },
      "throws": []
    },
    {
      "name": "isZero",
      "comment": "",
      "javadoc": "@return {@code true} if this BigFloat is zero",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": " if this BigFloat is zero"
      },
      "throws": []
    },
    {
      "name": "copy",
      "comment": "",
      "javadoc": "@return a copy of this BigFloat",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "a copy of this BigFloat"
      },
      "throws": []
    },
    {
      "name": "copyFrom",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "div",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@param b a BigFloat\n@return {@code a/b}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        },
        {
          "name": "b",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "div",
      "comment": "",
      "javadoc": "{@code this/\u003dother}\n@param other a BigFloat",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mul",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@param b a BigFloat\n@return {@code a*b}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        },
        {
          "name": "b",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "mul",
      "comment": "",
      "javadoc": "{@code this*\u003dother}\n@param other a BigFloat",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@param b a BigFloat\n@return {@code a+b}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        },
        {
          "name": "b",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add",
      "comment": "",
      "javadoc": "{@code this+\u003dother}\n@param other a BigFloat",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sub",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@param b a BigFloat\n@return {@code a-b}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        },
        {
          "name": "b",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sub",
      "comment": "",
      "javadoc": "{@code this-\u003dother}\n@param other a BigFloat",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "add0",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sub0",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "sqrt",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@return the square root of {@code a}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": "the square root of "
      },
      "throws": []
    },
    {
      "name": "sqrt",
      "comment": "\n \n\tSquare root by abacus algorithm, Martin Guy @ UKC, June 1985.\n\tFrom a book on programming abaci by Mr C. Woo.\n\tArgument is a positive integer, as is result.\n\n  adapted from http://medialab.freaknet.org/martin/src/sqrt/sqrt.c",
      "javadoc": "{@code this\u003dsqrt(this)}\n \n\t\u003cp\u003eSquare root by abacus algorithm, Martin Guy @ UKC, June 1985.\n\tFrom a book on programming abaci by Mr C. Woo.\n\tArgument is a positive integer, as is result.\n\n  \u003cp\u003eadapted from http://medialab.freaknet.org/martin/src/sqrt/sqrt.c",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "floor0",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "makeOne",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ceil0",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "floor",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@return {@code floor(a)}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "floor",
      "comment": "",
      "javadoc": "{@code this\u003dfloor(this)}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ceil",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@return {@code ceil(a)}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "ceil",
      "comment": "",
      "javadoc": "{@code this\u003dceil(this)}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "trunc",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@return {@code trunc(a)} (round toward zero)",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": " (round toward zero)"
      },
      "throws": []
    },
    {
      "name": "trunc",
      "comment": " (round toward zero)",
      "javadoc": "{@code this\u003dtrunc(this)} (round toward zero)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "negate",
      "comment": "",
      "javadoc": "{@code this*\u003d-1}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "negate",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@return {@code -a}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "abs",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@return {@code abs(a)}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "abs",
      "comment": "",
      "javadoc": "{@code this\u003dabs(this)}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "toBigInteger",
      "comment": "",
      "javadoc": "@return the truncated integer form of this BigFloat",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.math.BigInteger",
        "type_short": "BigInteger",
        "comment": "the truncated integer form of this BigFloat"
      },
      "throws": []
    },
    {
      "name": "round",
      "comment": "",
      "javadoc": "@param a a BigFloat\n@return {@code round(a)}",
      "static": true,
      "params": [
        {
          "name": "a",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": "a BigFloat"
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.floatformat.BigFloat",
        "type_short": "BigFloat",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "round",
      "comment": "",
      "javadoc": "{@code this\u003dround(this)}",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "compareTo",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "other",
          "type_long": "ghidra.pcode.floatformat.BigFloat",
          "type_short": "BigFloat",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    }
  ]
}
