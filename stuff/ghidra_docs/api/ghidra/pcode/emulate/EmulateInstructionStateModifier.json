{
  "name": "EmulateInstructionStateModifier",
  "comment": "EmulateInstructionStateModifier defines a language specific \n handler to assist emulation with adjusting the current execution state,\n providing support for custom pcodeop\u0027s (i.e., CALLOTHER).\n The implementation of this interface must provide a public constructor which \n takes a single Emulate argument.",
  "javadoc": "\u003ccode\u003eEmulateInstructionStateModifier\u003c/code\u003e defines a language specific \n handler to assist emulation with adjusting the current execution state,\n providing support for custom pcodeop\u0027s (i.e., CALLOTHER).\n The implementation of this interface must provide a public constructor which \n takes a single Emulate argument.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "emu",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.pcode.emulate.Emulate",
      "type_short": "Emulate",
      "constant_value": null
    },
    {
      "name": "language",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.lang.Language",
      "type_short": "Language",
      "constant_value": null
    },
    {
      "name": "pcodeOpMap",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "java.util.Map\u003cjava.lang.Integer,ghidra.pcode.emulate.callother.OpBehaviorOther\u003e",
      "type_short": "Map",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "emu",
          "type_long": "ghidra.pcode.emulate.Emulate",
          "type_short": "Emulate",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "registerPcodeOpBehavior",
      "comment": "Register a pcodeop behavior corresponding to a CALLOTHER opcode.",
      "javadoc": "Register a pcodeop behavior corresponding to a CALLOTHER opcode.\n@param opName name as defined within language via \"define pcodeop\"\n@param pcodeOpBehavior",
      "static": false,
      "params": [
        {
          "name": "opName",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "name as defined within language via \"define pcodeop\""
        },
        {
          "name": "pcodeOpBehavior",
          "type_long": "ghidra.pcode.emulate.callother.OpBehaviorOther",
          "type_short": "OpBehaviorOther",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "executeCallOther",
      "comment": "Execute a CALLOTHER op",
      "javadoc": "Execute a CALLOTHER op\n@param op\n@return true if corresponding pcodeop was registered and emulation support is\n performed, or false if corresponding pcodeop is not supported by this class.\n@throws LowlevelError",
      "static": false,
      "params": [
        {
          "name": "op",
          "type_long": "ghidra.program.model.pcode.PcodeOp",
          "type_short": "PcodeOp",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if corresponding pcodeop was registered and emulation support is\n performed, or false if corresponding pcodeop is not supported by this class."
      },
      "throws": [
        {
          "type_long": "ghidra.pcode.error.LowlevelError",
          "type_short": "LowlevelError",
          "comment": ""
        }
      ]
    },
    {
      "name": "initialExecuteCallback",
      "comment": "Emulation callback immediately before the first instruction is executed.\n This callback permits any language specific initializations to be performed.",
      "javadoc": "Emulation callback immediately before the first instruction is executed.\n This callback permits any language specific initializations to be performed.\n@param emulate\n@param current_address intial execute address\n@param contextRegisterValue initial context value or null if not applicable or unknown\n@throws LowlevelError",
      "static": false,
      "params": [
        {
          "name": "emulate",
          "type_long": "ghidra.pcode.emulate.Emulate",
          "type_short": "Emulate",
          "comment": ""
        },
        {
          "name": "current_address",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": "intial execute address"
        },
        {
          "name": "contextRegisterValue",
          "type_long": "ghidra.program.model.lang.RegisterValue",
          "type_short": "RegisterValue",
          "comment": "initial context value or null if not applicable or unknown"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.pcode.error.LowlevelError",
          "type_short": "LowlevelError",
          "comment": ""
        }
      ]
    },
    {
      "name": "postExecuteCallback",
      "comment": "Emulation callback immediately following execution of the lastExecuteAddress.\n One use of this callback is to modify the flowing/future context state.",
      "javadoc": "Emulation callback immediately following execution of the lastExecuteAddress.\n One use of this callback is to modify the flowing/future context state.\n@param emulate\n@param lastExecuteAddress\n@param lastExecutePcode\n@param lastPcodeIndex pcode index of last op or -1 if no pcode or fall-through occurred.\n@param currentAddress\n@throws LowlevelError",
      "static": false,
      "params": [
        {
          "name": "emulate",
          "type_long": "ghidra.pcode.emulate.Emulate",
          "type_short": "Emulate",
          "comment": ""
        },
        {
          "name": "lastExecuteAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        },
        {
          "name": "lastExecutePcode",
          "type_long": "ghidra.program.model.pcode.PcodeOp[]",
          "type_short": "ghidra.program.model.pcode.PcodeOp[]",
          "comment": ""
        },
        {
          "name": "lastPcodeIndex",
          "type_long": "int",
          "type_short": "int",
          "comment": "pcode index of last op or -1 if no pcode or fall-through occurred."
        },
        {
          "name": "currentAddress",
          "type_long": "ghidra.program.model.address.Address",
          "type_short": "Address",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "ghidra.pcode.error.LowlevelError",
          "type_short": "LowlevelError",
          "comment": ""
        }
      ]
    }
  ]
}
