{
  "name": "WordInfo",
  "comment": "A simple class representing a byte-addressable word of memory.  Each\n byte can be either initialized to a byte value or uninitialized.\n It is an error to attempt to read an uninitialized byte.",
  "javadoc": "A simple class representing a byte-addressable word of memory.  Each\n byte can be either initialized to a byte value or uninitialized.\n It is an error to attempt to read an uninitialized byte.",
  "static": true,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "initialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "byte",
      "type_short": "byte",
      "constant_value": null
    },
    {
      "name": "word",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "long",
      "type_short": "long",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a WordInfo object with all bytes uninitialized.",
      "javadoc": "Constructs a {@link WordInfo} object with all bytes uninitialized.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setByte",
      "comment": "Initializes the byte at  and sets its value to \n ",
      "javadoc": "Initializes the byte at {@code index} and sets its value to \n {@code val}\n@param val new value\n@param index index\n@throws LowlevelError if the index is invalid",
      "static": false,
      "params": [
        {
          "name": "val",
          "type_long": "byte",
          "type_short": "byte",
          "comment": "new value"
        },
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getByte",
      "comment": "Returns the byte at the given index",
      "javadoc": "Returns the byte at the given index\n@param index index\n@return corresponding byte value\n@throws LowlevelError if the index is invalid or the requested byte\n is not initialized.",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": "index"
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": "corresponding byte value"
      },
      "throws": []
    },
    {
      "name": "getWord",
      "comment": "Writes an entire word into ",
      "javadoc": "Writes an entire word into {@code buffer}\n@param buffer buffer to write a single word to.  Must have\n length 8.\n@throws LowlevelError if the entire word is not initialized",
      "static": false,
      "params": [
        {
          "name": "buffer",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "buffer to write a single word to.  Must have\n length 8."
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isEntireWordInitialized",
      "comment": "Returns true precisely when the entire word is initialized.",
      "javadoc": "Returns true precisely when the entire word is initialized.\n@return true if entire work initialized",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if entire work initialized"
      },
      "throws": []
    },
    {
      "name": "checkInitialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "validateIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
