{
  "name": "MemoryBank",
  "comment": "",
  "javadoc": "",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "pagesize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "space",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.program.model.address.AddressSpace",
      "type_short": "AddressSpace",
      "constant_value": null
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "boolean",
      "type_short": "boolean",
      "constant_value": null
    },
    {
      "name": "initializedMaskSize",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "int",
      "type_short": "int",
      "constant_value": null
    },
    {
      "name": "faultHandler",
      "comment": "",
      "javadoc": "",
      "static": false,
      "type_long": "ghidra.pcode.memstate.MemoryFaultHandler",
      "type_short": "MemoryFaultHandler",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "A MemoryBank must be associated with a specific address space, have a preferred or natural\n pagesize.  The pagesize must be a power of 2.",
      "javadoc": "A MemoryBank must be associated with a specific address space, have a preferred or natural\n pagesize.  The pagesize must be a power of 2.\n@param spc is the associated address space\n@param isBigEndian memory endianess\n@param ps ps is the number of bytes in a page (must be a power of 2)\n@param faultHandler memory fault handler",
      "static": false,
      "params": [
        {
          "name": "spc",
          "type_long": "ghidra.program.model.address.AddressSpace",
          "type_short": "AddressSpace",
          "comment": "is the associated address space"
        },
        {
          "name": "isBigEndian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "memory endianess"
        },
        {
          "name": "ps",
          "type_long": "int",
          "type_short": "int",
          "comment": "ps is the number of bytes in a page (must be a power of 2)"
        },
        {
          "name": "faultHandler",
          "type_long": "ghidra.pcode.memstate.MemoryFaultHandler",
          "type_short": "MemoryFaultHandler",
          "comment": "memory fault handler"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getMemoryFaultHandler",
      "comment": "",
      "javadoc": "@return memory fault handler (may be null)",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.pcode.memstate.MemoryFaultHandler",
        "type_short": "MemoryFaultHandler",
        "comment": "memory fault handler (may be null)"
      },
      "throws": []
    },
    {
      "name": "isBigEndian",
      "comment": "",
      "javadoc": "@return true if memory bank is big endian",
      "static": false,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if memory bank is big endian"
      },
      "throws": []
    },
    {
      "name": "getPageSize",
      "comment": "A MemoryBank is instantiated with a \\e natural page size. Requests for large chunks of data\n may be broken down into units of this size.",
      "javadoc": "A MemoryBank is instantiated with a \\e natural page size. Requests for large chunks of data\n may be broken down into units of this size.\n@return the number of bytes in a page.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the number of bytes in a page."
      },
      "throws": []
    },
    {
      "name": "getInitializedMaskSize",
      "comment": "",
      "javadoc": "@return the size of a page initialized mask in bytes.  Each bit within the\n mask corresponds to a data byte within a page.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": "the size of a page initialized mask in bytes.  Each bit within the\n mask corresponds to a data byte within a page."
      },
      "throws": []
    },
    {
      "name": "getSpace",
      "comment": "",
      "javadoc": "@return the AddressSpace associated with this bank.",
      "static": false,
      "params": [],
      "return": {
        "type_long": "ghidra.program.model.address.AddressSpace",
        "type_short": "AddressSpace",
        "comment": "the AddressSpace associated with this bank."
      },
      "throws": []
    },
    {
      "name": "getPage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "ghidra.pcode.memstate.MemoryPage",
        "type_short": "MemoryPage",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPage",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "skip",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bufOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setPageInitialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addr",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "initialized",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        },
        {
          "name": "skip",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bufOffset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setChunk",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "setInitialized",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "offset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "initialized",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getChunk",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "addrOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "res",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "stopOnUnintialized",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "int",
        "type_short": "int",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "constructValue",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ptr",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bigendian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "long",
        "type_short": "long",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "deconstructValue",
      "comment": "",
      "javadoc": "",
      "static": true,
      "params": [
        {
          "name": "ptr",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": ""
        },
        {
          "name": "offset",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "val",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "size",
          "type_long": "int",
          "type_short": "int",
          "comment": ""
        },
        {
          "name": "bigendian",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
