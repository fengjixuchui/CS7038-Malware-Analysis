{
  "name": "SSLContextInitializer",
  "comment": "Initialize the default SSLContext for use by all SSL connections (e.g., https).\n It is the responsibility of the Application to properly invoke this initializer \n to ensure that the default SSLContext is properly established. While HTTPS URL connections\n will make use of this default SSLContext, other SSL connections may need to \n specify the ApplicationSSLSocketFactory to leverage the applications\n default SSLContext.\n \n The property jdk.tls.client.protocols should be set to restrict secure\n client connections to a specific set of enabled TLS protocols (e.g., TLSv1.2,TLSv1.3).\n See JDK and JRE Cryptographic Algorithms \n for details.",
  "javadoc": "Initialize the default SSLContext for use by all SSL connections (e.g., https).\n It is the responsibility of the Application to properly invoke this initializer \n to ensure that the default SSLContext is properly established. While HTTPS URL connections\n will make use of this default SSLContext, other SSL connections may need to \n specify the {@link ApplicationSSLSocketFactory} to leverage the applications\n default SSLContext.\n \u003cp\u003e\n The property \u003ccode\u003ejdk.tls.client.protocols\u003c/code\u003e should be set to restrict secure\n client connections to a specific set of enabled TLS protocols (e.g., TLSv1.2,TLSv1.3).\n See \u003cA href\u003d\"https://java.com/en/configure_crypto.html\"\u003eJDK and JRE Cryptographic Algorithms\u003c/A\u003e \n for details.\n@see ApplicationTrustManagerFactory\n@see ApplicationKeyManagerFactory\n@see ApplicationKeyManagerUtils",
  "static": false,
  "implements": [
    "ghidra.framework.ModuleInitializer"
  ],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "DEFAULT_SSL_PROTOCOL",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"TLS\""
    },
    {
      "name": "sslContext",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.net.ssl.SSLContext",
      "type_short": "SSLContext",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "Initialize default SSLContext with optional reset.\n This method is primarily intended for testing.",
      "javadoc": "Initialize default SSLContext with optional reset.\n This method is primarily intended for testing.\n@param reset if true a complete reset will be done to force use of\n any new certificate or keystores previously used.\n@return true if successful, else false (see logged error)",
      "static": true,
      "params": [
        {
          "name": "reset",
          "type_long": "boolean",
          "type_short": "boolean",
          "comment": "if true a complete reset will be done to force use of\n any new certificate or keystores previously used."
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if successful, else false (see logged error)"
      },
      "throws": []
    },
    {
      "name": "initialize",
      "comment": "Initialize default SSLContext",
      "javadoc": "Initialize default SSLContext\n@return true if successful, else false (see logged error)",
      "static": true,
      "params": [],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if successful, else false (see logged error)"
      },
      "throws": []
    },
    {
      "name": "run",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getName",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": ""
      },
      "throws": []
    }
  ]
}
