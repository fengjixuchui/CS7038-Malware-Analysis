{
  "name": "ApplicationKeyStore",
  "comment": "ApplicationKeyStore provides the ability to read X.509 certificates and \n keystores in various formats. Certificate files (e.g., cacerts) may be in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form, while keystores \n for client/server may be in a PKCS12 form (*.p12, *.pks, *.pfx) or Java JKS (*.jks) form.",
  "javadoc": "\u003ccode\u003eApplicationKeyStore\u003c/code\u003e provides the ability to read X.509 certificates and \n keystores in various formats. Certificate files (e.g., cacerts) may be in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form, while keystores \n for client/server may be in a PKCS12 form (*.p12, *.pks, *.pfx) or Java JKS (*.jks) form.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "PKCS_FILE_EXTENSIONS",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String[]",
      "type_short": "java.lang.String[]",
      "constant_value": null
    },
    {
      "name": "PKCS_FILENAME_FILTER",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "javax.swing.filechooser.FileNameExtensionFilter",
      "type_short": "FileNameExtensionFilter",
      "constant_value": null
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getCertificateStoreInstance",
      "comment": "Load the specified X.509 certificate authority store in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form.",
      "javadoc": "Load the specified X.509 certificate authority store in a standard\n X.509 form (*.pem, *.crt, *.cer, *.der) or Java JKS (*.jks) form.\n@param cacertsPath certificate store file path\n@return KeyStore containing ingested certificates\n@throws IOException\n@throws KeyStoreException\n@throws NoSuchAlgorithmException\n@throws CertificateException",
      "static": true,
      "params": [
        {
          "name": "cacertsPath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "certificate store file path"
        }
      ],
      "return": {
        "type_long": "java.security.KeyStore",
        "type_short": "KeyStore",
        "comment": "KeyStore containing ingested certificates"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.security.KeyStoreException",
          "type_short": "KeyStoreException",
          "comment": ""
        },
        {
          "type_long": "java.security.NoSuchAlgorithmException",
          "type_short": "NoSuchAlgorithmException",
          "comment": ""
        },
        {
          "type_long": "java.security.cert.CertificateException",
          "type_short": "CertificateException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getKeyStoreInstance",
      "comment": "Attempt to load a client/server keystore in a PKCS12 form (*.p12, *.pks, *.pfx) or \n Java JKS (*.jks) form.",
      "javadoc": "Attempt to load a client/server keystore in a PKCS12 form (*.p12, *.pks, *.pfx) or \n Java JKS (*.jks) form.\n@param path keystore file path\n@param pwd keystore password\n@return keystore instance\n@throws IOException\n@throws KeyStoreException\n@throws NoSuchAlgorithmException\n@throws CertificateException",
      "static": true,
      "params": [
        {
          "name": "keystorePath",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": ""
        },
        {
          "name": "pwd",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "keystore password"
        }
      ],
      "return": {
        "type_long": "java.security.KeyStore",
        "type_short": "KeyStore",
        "comment": "keystore instance"
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        },
        {
          "type_long": "java.security.KeyStoreException",
          "type_short": "KeyStoreException",
          "comment": ""
        },
        {
          "type_long": "java.security.NoSuchAlgorithmException",
          "type_short": "NoSuchAlgorithmException",
          "comment": ""
        },
        {
          "type_long": "java.security.cert.CertificateException",
          "type_short": "CertificateException",
          "comment": ""
        }
      ]
    },
    {
      "name": "getCommonName",
      "comment": "Extract Common Name (CN) from specified principal subject Distinguished Name (DN)",
      "javadoc": "Extract Common Name (CN) from specified principal subject Distinguished Name (DN)\n@param subject X.509 certificate subject\n@return Common Name or full subject name if unable to extract CN from DN",
      "static": true,
      "params": [
        {
          "name": "subject",
          "type_long": "java.security.Principal",
          "type_short": "Principal",
          "comment": "X.509 certificate subject"
        }
      ],
      "return": {
        "type_long": "java.lang.String",
        "type_short": "String",
        "comment": "Common Name or full subject name if unable to extract CN from DN"
      },
      "throws": []
    },
    {
      "name": "logCerts",
      "comment": "Log all X509 certificates contained within keystore",
      "javadoc": "Log all X509 certificates contained within keystore\n@param keyStore certificate keystore",
      "static": true,
      "params": [
        {
          "name": "keyStore",
          "type_long": "java.security.KeyStore",
          "type_short": "KeyStore",
          "comment": "certificate keystore"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "logCerts",
      "comment": "Log all X509 certificates contained within array",
      "javadoc": "Log all X509 certificates contained within array\n@param x509Certs array of certificates",
      "static": true,
      "params": [
        {
          "name": "x509Certs",
          "type_long": "java.security.cert.X509Certificate[]",
          "type_short": "java.security.cert.X509Certificate[]",
          "comment": "array of certificates"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "logCert",
      "comment": "Log specified X509 certificate details",
      "javadoc": "Log specified X509 certificate details\n@param alias certificate alias or null if not applicable\n@param x509Cert X509 certificate",
      "static": true,
      "params": [
        {
          "name": "alias",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "certificate alias or null if not applicable"
        },
        {
          "name": "x509Cert",
          "type_long": "java.security.cert.X509Certificate",
          "type_short": "X509Certificate",
          "comment": "X509 certificate"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    }
  ]
}
