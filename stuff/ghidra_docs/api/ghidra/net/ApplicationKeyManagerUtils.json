{
  "name": "ApplicationKeyManagerUtils",
  "comment": "ApplicationKeyManagerUtils provides public methods for utilizing\n the application PKI key management, including access to trusted issuers\n (i.e., CA certificates), token signing and validation, and the ability to\n generate keystores for testing or when a self-signed certificate will\n suffice.",
  "javadoc": "\u003ccode\u003eApplicationKeyManagerUtils\u003c/code\u003e provides public methods for utilizing\n the application PKI key management, including access to trusted issuers\n (i.e., CA certificates), token signing and validation, and the ability to\n generate keystores for testing or when a self-signed certificate will\n suffice.",
  "static": false,
  "implements": [],
  "extends": "java.lang.Object",
  "fields": [
    {
      "name": "RSA_TYPE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"RSA\""
    },
    {
      "name": "KEY_SIZE",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "4096"
    },
    {
      "name": "SIGNING_ALGORITHM",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"SHA512withRSA\""
    },
    {
      "name": "MILLISECONDS_PER_DAY",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "int",
      "type_short": "int",
      "constant_value": "86400000"
    },
    {
      "name": "BEGIN_CERT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"-----BEGIN CERTIFICATE-----\""
    },
    {
      "name": "END_CERT",
      "comment": "",
      "javadoc": "",
      "static": true,
      "type_long": "java.lang.String",
      "type_short": "String",
      "constant_value": "\"-----END CERTIFICATE-----\""
    }
  ],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "getSignedToken",
      "comment": "Sign the supplied token byte array using an installed certificate from\n one of the specified authorities",
      "javadoc": "Sign the supplied token byte array using an installed certificate from\n one of the specified authorities\n@param authorities trusted certificate authorities\n@param token token byte array\n@return signed token object\n@throws NoSuchAlgorithmException algorithym associated within signing certificate not found\n@throws SignatureException failed to generate SignedToken\n@throws CertificateException error associated with signing certificate",
      "static": true,
      "params": [
        {
          "name": "authorities",
          "type_long": "java.security.Principal[]",
          "type_short": "java.security.Principal[]",
          "comment": "trusted certificate authorities"
        },
        {
          "name": "token",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "token byte array"
        }
      ],
      "return": {
        "type_long": "ghidra.net.SignedToken",
        "type_short": "SignedToken",
        "comment": "signed token object"
      },
      "throws": [
        {
          "type_long": "java.security.NoSuchAlgorithmException",
          "type_short": "NoSuchAlgorithmException",
          "comment": "algorithym associated within signing certificate not found"
        },
        {
          "type_long": "java.security.SignatureException",
          "type_short": "SignatureException",
          "comment": "failed to generate SignedToken"
        },
        {
          "type_long": "java.security.cert.CertificateException",
          "type_short": "CertificateException",
          "comment": "error associated with signing certificate"
        }
      ]
    },
    {
      "name": "isMySignature",
      "comment": "Verify that the specified sigBytes reflect my signature of the specified\n token.",
      "javadoc": "Verify that the specified sigBytes reflect my signature of the specified\n token.\n@param authorities trusted certificate authorities\n@param token byte array token\n@param signature token signature\n@return true if signature is my signature\n@throws NoSuchAlgorithmException algorithym associated within signing certificate not found\n@throws SignatureException failed to generate SignedToken\n@throws CertificateException error associated with signing certificate",
      "static": true,
      "params": [
        {
          "name": "authorities",
          "type_long": "java.security.Principal[]",
          "type_short": "java.security.Principal[]",
          "comment": "trusted certificate authorities"
        },
        {
          "name": "token",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "byte array token"
        },
        {
          "name": "signature",
          "type_long": "byte[]",
          "type_short": "byte[]",
          "comment": "token signature"
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": "true if signature is my signature"
      },
      "throws": [
        {
          "type_long": "java.security.NoSuchAlgorithmException",
          "type_short": "NoSuchAlgorithmException",
          "comment": "algorithym associated within signing certificate not found"
        },
        {
          "type_long": "java.security.SignatureException",
          "type_short": "SignatureException",
          "comment": "failed to generate SignedToken"
        },
        {
          "type_long": "java.security.cert.CertificateException",
          "type_short": "CertificateException",
          "comment": "error associated with signing certificate"
        }
      ]
    },
    {
      "name": "getTrustedIssuers",
      "comment": "Returns a list of trusted issuers (i.e., CA certificates) as established\n by the ApplicationTrustManagerFactory.",
      "javadoc": "Returns a list of trusted issuers (i.e., CA certificates) as established\n by the {@link ApplicationTrustManagerFactory}.\n@return array of trusted Certificate Authorities\n@throws CertificateException if failed to properly initialize trust manager\n due to CA certificate error(s).",
      "static": true,
      "params": [],
      "return": {
        "type_long": "javax.security.auth.x500.X500Principal[]",
        "type_short": "javax.security.auth.x500.X500Principal[]",
        "comment": "array of trusted Certificate Authorities"
      },
      "throws": [
        {
          "type_long": "java.security.cert.CertificateException",
          "type_short": "CertificateException",
          "comment": "if failed to properly initialize trust manager\n due to CA certificate error(s)."
        }
      ]
    },
    {
      "name": "validateClient",
      "comment": "Validate a client certificate ensuring that it is not expired and is\n trusted based upon the active trust managers.",
      "javadoc": "Validate a client certificate ensuring that it is not expired and is\n trusted based upon the active trust managers.\n@param certChain X509 certificate chain\n@param authType authentication type (i.e., \"RSA\")\n@throws CertificateException if certificate validation fails",
      "static": true,
      "params": [
        {
          "name": "certChain",
          "type_long": "java.security.cert.X509Certificate[]",
          "type_short": "java.security.cert.X509Certificate[]",
          "comment": "X509 certificate chain"
        },
        {
          "name": "authType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "authentication type (i.e., \"RSA\")"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.security.cert.CertificateException",
          "type_short": "CertificateException",
          "comment": "if certificate validation fails"
        }
      ]
    },
    {
      "name": "makeCertificateChain",
      "comment": "Pack ordered list of certs to create a certificate chain array",
      "javadoc": "Pack ordered list of certs to create a certificate chain array\n@param cert primary certificate\n@param caCerts CA certificate chain.\n@return ordered certificate chain",
      "static": true,
      "params": [
        {
          "name": "cert",
          "type_long": "java.security.cert.Certificate",
          "type_short": "Certificate",
          "comment": "primary certificate"
        },
        {
          "name": "caCerts",
          "type_long": "java.security.cert.Certificate[]",
          "type_short": "java.security.cert.Certificate[]",
          "comment": "CA certificate chain."
        }
      ],
      "return": {
        "type_long": "java.security.cert.Certificate[]",
        "type_short": "java.security.cert.Certificate[]",
        "comment": "ordered certificate chain"
      },
      "throws": []
    },
    {
      "name": "exportX509Certificates",
      "comment": "Export X.509 certificates to the specified outFile.",
      "javadoc": "Export X.509 certificates to the specified outFile.\n@param certificates certificates to be stored\n@param outFile output file\n@throws IOException if error occurs writing to outFile\n@throws CertificateEncodingException if error occurs while encoding certificate data",
      "static": true,
      "params": [
        {
          "name": "certificates",
          "type_long": "java.security.cert.Certificate[]",
          "type_short": "java.security.cert.Certificate[]",
          "comment": "certificates to be stored"
        },
        {
          "name": "outFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "output file"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error occurs writing to outFile"
        },
        {
          "type_long": "java.security.cert.CertificateEncodingException",
          "type_short": "CertificateEncodingException",
          "comment": "if error occurs while encoding certificate data"
        }
      ]
    },
    {
      "name": "createKeyStore",
      "comment": "Generate a new X509Certificate with RSA KeyPair and create/update a KeyStore\n optionally backed by a keyFile.",
      "javadoc": "Generate a new {@link X509Certificate} with RSA {@link KeyPair} and create/update a {@link KeyStore}\n optionally backed by a keyFile.\n@param alias entry alias with keystore\n@param dn distinguished name (e.g., \"CN\u003dGhidra Test, O\u003dGhidra, OU\u003dTest, C\u003dUS\" )\n@param durationDays number of days which generated certificate should remain valid\n@param caEntry optional CA private key entry.  If null, a self-signed CA certificate will be generated.\n@param keyFile optional file to load/store resulting {@link KeyStore} (may be null)\n@param keystoreType support keystore type (e.g., \"JKS\", \"PKCS12\")\n@param protectedPassphrase key and keystore protection password\n@return keystore containing newly generated certification with key pair\n@throws KeyStoreException if error occurs while updating keystore",
      "static": true,
      "params": [
        {
          "name": "alias",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "entry alias with keystore"
        },
        {
          "name": "dn",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "distinguished name (e.g., \"CN\u003dGhidra Test, O\u003dGhidra, OU\u003dTest, C\u003dUS\" )"
        },
        {
          "name": "durationDays",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of days which generated certificate should remain valid"
        },
        {
          "name": "caEntry",
          "type_long": "java.security.KeyStore.PrivateKeyEntry",
          "type_short": "PrivateKeyEntry",
          "comment": "optional CA private key entry.  If null, a self-signed CA certificate will be generated."
        },
        {
          "name": "keyFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "optional file to load/store resulting KeyStore (may be null)"
        },
        {
          "name": "keystoreType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "support keystore type (e.g., \"JKS\", \"PKCS12\")"
        },
        {
          "name": "protectedPassphrase",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "key and keystore protection password"
        }
      ],
      "return": {
        "type_long": "java.security.KeyStore",
        "type_short": "KeyStore",
        "comment": "keystore containing newly generated certification with key pair"
      },
      "throws": [
        {
          "type_long": "java.security.KeyStoreException",
          "type_short": "KeyStoreException",
          "comment": "if error occurs while updating keystore"
        }
      ]
    },
    {
      "name": "createKeyEntry",
      "comment": "Generate a new X509Certificate with RSA KeyPair and create/update a KeyStore\n optionally backed by a keyFile.",
      "javadoc": "Generate a new {@link X509Certificate} with RSA {@link KeyPair} and create/update a {@link KeyStore}\n optionally backed by a keyFile.\n@param alias entry alias with keystore\n@param dn distinguished name (e.g., \"CN\u003dGhidra Test, O\u003dGhidra, OU\u003dTest, C\u003dUS\" )\n@param durationDays number of days which generated certificate should remain valid\n@param caEntry optional CA private key entry.  If null, a self-signed CA certificate will be generated.\n@param keyFile optional file to load/store resulting {@link KeyStore} (may be null)\n@param keystoreType support keystore type (e.g., \"JKS\", \"PKCS12\")\n@param protectedPassphrase key and keystore protection password\n@return newly generated keystore entry with key pair\n@throws KeyStoreException if error occurs while updating keystore",
      "static": true,
      "params": [
        {
          "name": "alias",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "entry alias with keystore"
        },
        {
          "name": "dn",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "distinguished name (e.g., \"CN\u003dGhidra Test, O\u003dGhidra, OU\u003dTest, C\u003dUS\" )"
        },
        {
          "name": "durationDays",
          "type_long": "int",
          "type_short": "int",
          "comment": "number of days which generated certificate should remain valid"
        },
        {
          "name": "caEntry",
          "type_long": "java.security.KeyStore.PrivateKeyEntry",
          "type_short": "PrivateKeyEntry",
          "comment": "optional CA private key entry.  If null, a self-signed CA certificate will be generated."
        },
        {
          "name": "keyFile",
          "type_long": "java.io.File",
          "type_short": "File",
          "comment": "optional file to load/store resulting KeyStore (may be null)"
        },
        {
          "name": "keystoreType",
          "type_long": "java.lang.String",
          "type_short": "String",
          "comment": "support keystore type (e.g., \"JKS\", \"PKCS12\")"
        },
        {
          "name": "protectedPassphrase",
          "type_long": "char[]",
          "type_short": "char[]",
          "comment": "key and keystore protection password"
        }
      ],
      "return": {
        "type_long": "java.security.KeyStore.PrivateKeyEntry",
        "type_short": "PrivateKeyEntry",
        "comment": "newly generated keystore entry with key pair"
      },
      "throws": [
        {
          "type_long": "java.security.KeyStoreException",
          "type_short": "KeyStoreException",
          "comment": "if error occurs while updating keystore"
        }
      ]
    }
  ]
}
